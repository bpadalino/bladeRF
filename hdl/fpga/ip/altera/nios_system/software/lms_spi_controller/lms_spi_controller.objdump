
lms_spi_controller.elf:     file format elf32-littlenios2
lms_spi_controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003a40 memsz 0x00003a40 flags r-x
    LOAD off    0x00004a60 vaddr 0x00003a60 paddr 0x00003b54 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00004c48 vaddr 0x00003c48 paddr 0x00003c48 align 2**12
         filesz 0x00000000 memsz 0x00000028 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000036a4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  000036c4  000036c4  000046c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f4  00003a60  00003b54  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000028  00003c48  00003c48  00004c48  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00004b54  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00004b80  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000008b9  00000000  00000000  00004e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005251  00000000  00000000  00005741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000018b1  00000000  00000000  0000a992  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005b50  00000000  00000000  0000c243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000950  00000000  00000000  00011d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000015fb  00000000  00000000  000126e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002bcd  00000000  00000000  00013cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000168ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003a8  00000000  00000000  000168c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00018521  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00018524  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00018530  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00018531  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00018532  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  0001853d  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00018548  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  00018553  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000004a  00000000  00000000  0001855e  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000454fb  00000000  00000000  000185a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
000036c4 l    d  .rodata	00000000 .rodata
00003a60 l    d  .rwdata	00000000 .rwdata
00003c48 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lms_spi_config.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000027cc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000029e8 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00003a60 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0000327c l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00003308 g     F .text	0000002c alt_main
00003b54 g       *ABS*	00000000 __flash_rwdata_start
00002950 g     F .text	00000054 printf
00000dd0 g     F .text	00000018 lms_lpf_disable
000009f0 g     F .text	00000048 lms_spi_write
000034c8 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000d90 g     F .text	0000000c lms_rxvga1_disable
00000ac4 g     F .text	00000260 lms_calibrate_dc
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003c48 g     O .bss	00000004 errno
00003c50 g     O .bss	00000004 alt_argv
0000bb40 g       *ABS*	00000000 _gp
00001464 g     F .text	00000044 lms_tx_enable
00000d48 g     F .text	0000003c lms_rxvga2_set_gain
00000924 g     F .text	000000cc lms_print_frequency
00001534 g     F .text	00000054 lms_pll_disable
00003834 g     O .rodata	000000c0 bands
000029a4 g     F .text	00000044 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002908 g     F .text	00000008 __udivsi3
00000d84 g     F .text	0000000c lms_rxvga1_enable
0000014c g     F .text	00000014 bladerf_rx_enable
00000080 g     F .text	000000b8 bladerf_set_frequency
00001974 g     F .text	00000058 lms_rxvga2_enable
00003b44 g     O .rwdata	00000004 _global_impure_ptr
00003c70 g       *ABS*	00000000 __bss_end
00002160 g     F .text	0000066c __udivdi3
00000e9c g     F .text	0000006c lms_dump_registers
000001c8 g     F .text	0000009c si5338_write
000036b4 g     F .text	00000004 alt_dcache_flush_all
00001320 g     F .text	000000fc lms_get_frequency
00000d9c g     F .text	00000034 lms_soft_reset
00003b54 g       *ABS*	00000000 __ram_rwdata_end
00003500 g     F .text	00000078 write
00000138 g     F .text	00000014 bladerf_rx_disable
00003a60 g       *ABS*	00000000 __ram_rodata_end
00003b48 g     O .rwdata	00000004 jtag_uart_0
000014a8 g     F .text	00000048 lms_rx_disable
00002910 g     F .text	00000008 __umodsi3
00003c70 g       *ABS*	00000000 end
00014000 g       *ABS*	00000000 __alt_stack_pointer
000016b0 g     F .text	00000044 lms_peakdetect_disable
0000359c g     F .text	00000034 altera_avalon_jtag_uart_write
00000188 g     F .text	00000040 si5338_complete_transfer
00002a68 g     F .text	0000069c ___vfprintf_internal_r
00003334 g     F .text	00000144 alt_printf
00000020 g     F .text	0000003c _start
00003c58 g     O .bss	00000018 xcvr_config
000035d0 g     F .text	000000e4 alt_avalon_spi_command
00001844 g     F .text	00000080 lms_pa_enable
00003578 g     F .text	00000004 alt_sys_init
00001a14 g     F .text	00000060 lms_lna_select
00001620 g     F .text	00000090 lms_get_loopback_mode
00002918 g     F .text	00000038 __mulsi3
00003a60 g       *ABS*	00000000 __ram_rwdata_start
000036c4 g       *ABS*	00000000 __ram_rodata_start
00000160 g     F .text	00000014 bladerf_tx_disable
0000173c g     F .text	0000007c lms_pa_disable
00003c70 g       *ABS*	00000000 __alt_stack_base
000018c4 g     F .text	000000b0 lms_tx_loopback_enable
00000de8 g     F .text	000000b4 lms_spi_read
000017b8 g     F .text	0000008c lms_tx_loopback_disable
00000d24 g     F .text	00000024 lms_set_txvga2_gain
00003128 g     F .text	000000bc __sfvwrite_small_dev
00003c48 g       *ABS*	00000000 __bss_start
00000264 g     F .text	00000604 main
00003c54 g     O .bss	00000004 alt_envp
00003b4c g     O .rwdata	00000004 uart_0
00001d1c g     F .text	000000b8 lms_lpf_enable
000015d8 g     F .text	00000048 lms_power_down
0000005c g     F .text	00000024 bladerf_lms_reset
00000868 g     F .text	000000bc si5338_read
00003b50 g     O .rwdata	00000004 alt_errno
00001c94 g     F .text	00000038 lms_get_bandwidth
00001ccc g     F .text	00000050 lms_lpf_bypass
00001b74 g     F .text	0000005c lms_lna_set_gain
00002848 g     F .text	00000060 __divsi3
00000f08 g     F .text	00000418 lms_set_frequency
000036c4 g       *ABS*	00000000 __flash_rodata_start
00001ee8 g     F .text	00000098 lms_config_init
0000357c g     F .text	00000020 alt_irq_init
00003960 g     O .rodata	00000100 __clz_tab
00003204 g     F .text	00000078 _write_r
00003b40 g     O .rwdata	00000004 _impure_ptr
000038f4 g     O .rodata	0000006b lms_reg_dumpset
00003c4c g     O .bss	00000004 alt_argc
00001c20 g     F .text	00000074 lms_dither_enable
000014f0 g     F .text	00000044 lms_rx_enable
00000a38 g     F .text	0000008c lms_lpf_init
0000141c g     F .text	00000048 lms_tx_disable
00001588 g     F .text	00000050 lms_pll_enable
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001f80 g     F .text	000000bc dac_write
00003b54 g       *ABS*	00000000 _edata
00003c70 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001dd4 g     F .text	00000114 lms_loopback_disable
000019cc g     F .text	00000048 lms_rxvga2_disable
000036bc g     F .text	00000008 altera_nios2_qsys_irq_init
0000000c g       .entry	00000000 exit
000028a8 g     F .text	00000060 __modsi3
00014000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
0000203c g     F .text	00000124 __muldi3
00000174 g     F .text	00000014 bladerf_tx_enable
000031e4 g     F .text	00000020 strlen
00003478 g     F .text	00000050 alt_putchar
000036b8 g     F .text	00000004 alt_icache_flush_all
00003104 g     F .text	00000024 __vfprintf_internal
00001a74 g     F .text	00000100 lms_loopback_enable
00001bd0 g     F .text	00000050 lms_dither_disable
0000329c g     F .text	0000006c alt_load
000016f4 g     F .text	00000048 lms_peakdetect_enable



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6aed014 	ori	gp,gp,47936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	108f1214 	ori	r2,r2,15432

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18cf1c14 	ori	r3,r3,15472

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	000329c0 	call	329c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00033080 	call	3308 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <bladerf_lms_reset>:

	return ;
}

void bladerf_lms_reset() {
	uint32_t gpio = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) ;
      5c:	008000b4 	movhi	r2,2
      60:	109c0004 	addi	r2,r2,28672
      64:	10c00037 	ldwio	r3,0(r2)
	gpio &= ~1 ;
      68:	013fff84 	movi	r4,-2
      6c:	1906703a 	and	r3,r3,r4
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
      70:	10c00035 	stwio	r3,0(r2)
	gpio |= 1 ;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
      74:	18c00054 	ori	r3,r3,1
      78:	10c00035 	stwio	r3,0(r2)
	return ;
}
      7c:	f800283a 	ret

00000080 <bladerf_set_frequency>:
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE,2) ;
	lms_rx_disable() ;
	return ;
}

void bladerf_set_frequency( lms_module_t mod, uint32_t freq ) {
      80:	defffb04 	addi	sp,sp,-20
      84:	dcc00315 	stw	r19,12(sp)
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
      88:	04d65a34 	movhi	r19,22888
      8c:	9ccbc004 	addi	r19,r19,12032
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE,2) ;
	lms_rx_disable() ;
	return ;
}

void bladerf_set_frequency( lms_module_t mod, uint32_t freq ) {
      90:	dc800215 	stw	r18,8(sp)
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
      94:	994f803a 	cmpltu	r7,r19,r5
      98:	04800084 	movi	r18,2
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE,2) ;
	lms_rx_disable() ;
	return ;
}

void bladerf_set_frequency( lms_module_t mod, uint32_t freq ) {
      9c:	dc400115 	stw	r17,4(sp)
      a0:	dc000015 	stw	r16,0(sp)
      a4:	dfc00415 	stw	ra,16(sp)
      a8:	2823883a 	mov	r17,r5
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
      ac:	91cfc83a 	sub	r7,r18,r7
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE,2) ;
	lms_rx_disable() ;
	return ;
}

void bladerf_set_frequency( lms_module_t mod, uint32_t freq ) {
      b0:	2021883a 	mov	r16,r4
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
	uint32_t gpio = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) ;
      b4:	024000b4 	movhi	r9,2
      b8:	4a5c0004 	addi	r9,r9,28672
      bc:	49800037 	ldwio	r6,0(r9)
	gpio &= (mod == TX) ? ~(BAND_MASK << 3) : ~(BAND_MASK << 5) ;
      c0:	00bfe7c4 	movi	r2,-97
	gpio |= (mod == TX) ? band << 3 : band << 5 ;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
      c4:	3810917a 	slli	r8,r7,5
      c8:	380e90fa 	slli	r7,r7,3
}

void bladerf_set_frequency( lms_module_t mod, uint32_t freq ) {
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
	uint32_t gpio = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) ;
	gpio &= (mod == TX) ? ~(BAND_MASK << 3) : ~(BAND_MASK << 5) ;
      cc:	3084703a 	and	r2,r6,r2
      d0:	00fff9c4 	movi	r3,-25
      d4:	30cc703a 	and	r6,r6,r3
	gpio |= (mod == TX) ? band << 3 : band << 5 ;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
      d8:	1206b03a 	or	r3,r2,r8
}

void bladerf_set_frequency( lms_module_t mod, uint32_t freq ) {
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
	uint32_t gpio = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) ;
	gpio &= (mod == TX) ? ~(BAND_MASK << 3) : ~(BAND_MASK << 5) ;
      dc:	00800044 	movi	r2,1
	gpio |= (mod == TX) ? band << 3 : band << 5 ;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
      e0:	31ccb03a 	or	r6,r6,r7
}

void bladerf_set_frequency( lms_module_t mod, uint32_t freq ) {
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
	uint32_t gpio = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) ;
	gpio &= (mod == TX) ? ~(BAND_MASK << 3) : ~(BAND_MASK << 5) ;
      e4:	20800c1e 	bne	r4,r2,118 <bladerf_set_frequency+0x98>
	gpio |= (mod == TX) ? band << 3 : band << 5 ;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
      e8:	49800035 	stwio	r6,0(r9)
	lms_set_frequency( mod, freq ) ;
      ec:	0000f080 	call	f08 <lms_set_frequency>
	if( mod == TX ) {
		lms_pa_enable( freq > 1500000000 ? PA_2 : PA_1 ) ;
      f0:	9009883a 	mov	r4,r18
      f4:	9c400136 	bltu	r19,r17,fc <bladerf_set_frequency+0x7c>
      f8:	8009883a 	mov	r4,r16
	}
	return ;
}
      fc:	dfc00417 	ldw	ra,16(sp)
     100:	dcc00317 	ldw	r19,12(sp)
     104:	dc800217 	ldw	r18,8(sp)
     108:	dc400117 	ldw	r17,4(sp)
     10c:	dc000017 	ldw	r16,0(sp)
     110:	dec00504 	addi	sp,sp,20
	gpio &= (mod == TX) ? ~(BAND_MASK << 3) : ~(BAND_MASK << 5) ;
	gpio |= (mod == TX) ? band << 3 : band << 5 ;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
	lms_set_frequency( mod, freq ) ;
	if( mod == TX ) {
		lms_pa_enable( freq > 1500000000 ? PA_2 : PA_1 ) ;
     114:	00018441 	jmpi	1844 <lms_pa_enable>
void bladerf_set_frequency( lms_module_t mod, uint32_t freq ) {
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
	uint32_t gpio = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) ;
	gpio &= (mod == TX) ? ~(BAND_MASK << 3) : ~(BAND_MASK << 5) ;
	gpio |= (mod == TX) ? band << 3 : band << 5 ;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
     118:	48c00035 	stwio	r3,0(r9)
	lms_set_frequency( mod, freq ) ;
	if( mod == TX ) {
		lms_pa_enable( freq > 1500000000 ? PA_2 : PA_1 ) ;
	}
	return ;
}
     11c:	dfc00417 	ldw	ra,16(sp)
     120:	dcc00317 	ldw	r19,12(sp)
     124:	dc800217 	ldw	r18,8(sp)
     128:	dc400117 	ldw	r17,4(sp)
     12c:	dc000017 	ldw	r16,0(sp)
     130:	dec00504 	addi	sp,sp,20
	uint32_t band = (freq > 1500000000) ? BAND_HIGH : BAND_LOW ;
	uint32_t gpio = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) ;
	gpio &= (mod == TX) ? ~(BAND_MASK << 3) : ~(BAND_MASK << 5) ;
	gpio |= (mod == TX) ? band << 3 : band << 5 ;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpio) ;
	lms_set_frequency( mod, freq ) ;
     134:	0000f081 	jmpi	f08 <lms_set_frequency>

00000138 <bladerf_rx_disable>:
	lms_rx_enable() ;
	return ;
}

void bladerf_rx_disable() {
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE,2) ;
     138:	00c00084 	movi	r3,2
     13c:	008000b4 	movhi	r2,2
     140:	109c0504 	addi	r2,r2,28692
     144:	10c00035 	stwio	r3,0(r2)
	lms_rx_disable() ;
     148:	00014a81 	jmpi	14a8 <lms_rx_disable>

0000014c <bladerf_rx_enable>:
	lms_tx_disable() ;
	return ;
}

void bladerf_rx_enable() {
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE,2) ;
     14c:	00c00084 	movi	r3,2
     150:	008000b4 	movhi	r2,2
     154:	109c0404 	addi	r2,r2,28688
     158:	10c00035 	stwio	r3,0(r2)
	lms_rx_enable() ;
     15c:	00014f01 	jmpi	14f0 <lms_rx_enable>

00000160 <bladerf_tx_disable>:
	lms_tx_enable() ;
	return ;
}

void bladerf_tx_disable() {
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_0_BASE,4) ;
     160:	00c00104 	movi	r3,4
     164:	008000b4 	movhi	r2,2
     168:	109c0504 	addi	r2,r2,28692
     16c:	10c00035 	stwio	r3,0(r2)
	lms_tx_disable() ;
     170:	000141c1 	jmpi	141c <lms_tx_disable>

00000174 <bladerf_tx_enable>:
#define BAND_MASK   3
#define BAND_LOW 	2
#define BAND_HIGH 	1

void bladerf_tx_enable() {
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_0_BASE,4) ;
     174:	00c00104 	movi	r3,4
     178:	008000b4 	movhi	r2,2
     17c:	109c0404 	addi	r2,r2,28688
     180:	10c00035 	stwio	r3,0(r2)
	lms_tx_enable() ;
     184:	00014641 	jmpi	1464 <lms_tx_enable>

00000188 <si5338_complete_transfer>:
#define OC_I2C_TIP 			(1<<1)
#define OC_I2C_RXACK 		(1<<7)
#define OC_I2C_NACK 		(1<<3)

void si5338_complete_transfer( uint8_t check_rxack ) {
	if( (IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP) == 0 ) {
     188:	00c000b4 	movhi	r3,2
     18c:	18d80104 	addi	r3,r3,24580
     190:	18800023 	ldbuio	r2,0(r3)
     194:	1080008c 	andi	r2,r2,2
     198:	103ffd26 	beq	r2,zero,190 <si5338_complete_transfer+0x8>
		while( (IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP) == 0 ) { } ;
	}
	while( IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP ) { } ;
     19c:	00c000b4 	movhi	r3,2
     1a0:	18d80104 	addi	r3,r3,24580
     1a4:	18800023 	ldbuio	r2,0(r3)
     1a8:	1080008c 	andi	r2,r2,2
     1ac:	103ffb1e 	bne	r2,zero,19c <si5338_complete_transfer+0x14>
	while( check_rxack && (IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_RXACK) ) { } ;
     1b0:	20803fcc 	andi	r2,r4,255
     1b4:	10000326 	beq	r2,zero,1c4 <si5338_complete_transfer+0x3c>
     1b8:	18800023 	ldbuio	r2,0(r3)
     1bc:	1080200c 	andi	r2,r2,128
     1c0:	003ffc06 	br	1b4 <si5338_complete_transfer+0x2c>
     1c4:	f800283a 	ret

000001c8 <si5338_write>:

	*data = IORD_8DIRECT(I2C, OC_I2C_DATA) ;
	return ;
}

void si5338_write( uint8_t addr, uint8_t data ) {
     1c8:	defffa04 	addi	sp,sp,-24
     1cc:	dcc00315 	stw	r19,12(sp)
     1d0:	dc800215 	stw	r18,8(sp)
     1d4:	dc000015 	stw	r16,0(sp)
     1d8:	2827883a 	mov	r19,r5
     1dc:	2021883a 	mov	r16,r4

	// Set the address to the Si5338
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C) ;
     1e0:	048000b4 	movhi	r18,2
     1e4:	949800c4 	addi	r18,r18,24579
     1e8:	00803804 	movi	r2,224

	*data = IORD_8DIRECT(I2C, OC_I2C_DATA) ;
	return ;
}

void si5338_write( uint8_t addr, uint8_t data ) {
     1ec:	dfc00515 	stw	ra,20(sp)
     1f0:	dd000415 	stw	r20,16(sp)
     1f4:	dc400115 	stw	r17,4(sp)

	// Set the address to the Si5338
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C) ;
     1f8:	90800025 	stbio	r2,0(r18)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_STA | OC_I2C_WR ) ;
     1fc:	044000b4 	movhi	r17,2
     200:	8c580104 	addi	r17,r17,24580
     204:	00802404 	movi	r2,144
     208:	88800025 	stbio	r2,0(r17)
	si5338_complete_transfer( 1 ) ;
     20c:	05000044 	movi	r20,1
     210:	a009883a 	mov	r4,r20
     214:	00001880 	call	188 <si5338_complete_transfer>

	IOWR_8DIRECT(I2C, OC_I2C_DATA, addr) ;
     218:	84003fcc 	andi	r16,r16,255
     21c:	94000025 	stbio	r16,0(r18)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_CMD_STATUS | OC_I2C_WR ) ;
     220:	00800504 	movi	r2,20
     224:	88800025 	stbio	r2,0(r17)
	si5338_complete_transfer( 1 ) ;
     228:	a009883a 	mov	r4,r20
     22c:	00001880 	call	188 <si5338_complete_transfer>

	IOWR_8DIRECT(I2C, OC_I2C_DATA, data ) ;
     230:	9cc03fcc 	andi	r19,r19,255
     234:	94c00025 	stbio	r19,0(r18)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_WR | OC_I2C_STO ) ;
     238:	00801404 	movi	r2,80
     23c:	88800025 	stbio	r2,0(r17)
	si5338_complete_transfer( 0 ) ;
     240:	0009883a 	mov	r4,zero

	return ;
}
     244:	dfc00517 	ldw	ra,20(sp)
     248:	dd000417 	ldw	r20,16(sp)
     24c:	dcc00317 	ldw	r19,12(sp)
     250:	dc800217 	ldw	r18,8(sp)
     254:	dc400117 	ldw	r17,4(sp)
     258:	dc000017 	ldw	r16,0(sp)
     25c:	dec00604 	addi	sp,sp,24
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_CMD_STATUS | OC_I2C_WR ) ;
	si5338_complete_transfer( 1 ) ;

	IOWR_8DIRECT(I2C, OC_I2C_DATA, data ) ;
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_WR | OC_I2C_STO ) ;
	si5338_complete_transfer( 0 ) ;
     260:	00001881 	jmpi	188 <si5338_complete_transfer>

00000264 <main>:
	return ;
}

// Entry point
int main()
{
     264:	defffd04 	addi	sp,sp,-12
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
     268:	01000034 	movhi	r4,0
     26c:	210db104 	addi	r4,r4,14020
	return ;
}

// Entry point
int main()
{
     270:	dfc00215 	stw	ra,8(sp)
     274:	dc400115 	stw	r17,4(sp)
     278:	dc000015 	stw	r16,0(sp)
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
     27c:	00034c80 	call	34c8 <alt_putstr>
  alt_putstr("---------------------------------------\n");
     280:	01000034 	movhi	r4,0
     284:	210dbc04 	addi	r4,r4,14064
     288:	00034c80 	call	34c8 <alt_putstr>
  bladerf_lms_reset() ;
     28c:	000005c0 	call	5c <bladerf_lms_reset>
  bladerf_tx_enable() ;
     290:	00001740 	call	174 <bladerf_tx_enable>
  bladerf_rx_disable() ;
     294:	00001380 	call	138 <bladerf_rx_disable>
//  lms_spi_write( 0XFA, 0x77 ) ;
//  lms_spi_write( 0XFB, 0x77 ) ;
//  lms_spi_write( 0XFC, 0x18 ) ;
//  lms_spi_write( 0XFD, 0x00 ) ;

  lms_spi_write( 0X82, 0x1F ) ;
     298:	01002084 	movi	r4,130
     29c:	014007c4 	movi	r5,31
     2a0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X83, 0x08 ) ;
     2a4:	010020c4 	movi	r4,131
     2a8:	01400204 	movi	r5,8
     2ac:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X85, 0x3E ) ;
     2b0:	01002144 	movi	r4,133
     2b4:	01400f84 	movi	r5,62
     2b8:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X86, 0x0D ) ;
     2bc:	01002184 	movi	r4,134
     2c0:	01400344 	movi	r5,13
     2c4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X87, 0x00 ) ;
     2c8:	010021c4 	movi	r4,135
     2cc:	000b883a 	mov	r5,zero
     2d0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X88, 0x00 ) ;
     2d4:	01002204 	movi	r4,136
     2d8:	000b883a 	mov	r5,zero
     2dc:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X89, 0x45 ) ;
     2e0:	01002244 	movi	r4,137
     2e4:	01401144 	movi	r5,69
     2e8:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X8A, 0x00 ) ;
     2ec:	01002284 	movi	r4,138
     2f0:	000b883a 	mov	r5,zero
     2f4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X8B, 0x08 ) ;
     2f8:	010022c4 	movi	r4,139
     2fc:	01400204 	movi	r5,8
     300:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X90, 0x34 ) ;
     304:	01002404 	movi	r4,144
     308:	01400d04 	movi	r5,52
     30c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X91, 0x15 ) ;
     310:	01002444 	movi	r4,145
     314:	01400544 	movi	r5,21
     318:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X92, 0x55 ) ;
     31c:	01002484 	movi	r4,146
     320:	01401544 	movi	r5,85
     324:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X93, 0x55 ) ;
     328:	010024c4 	movi	r4,147
     32c:	01401544 	movi	r5,85
     330:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X94, 0x88 ) ;
     334:	01002504 	movi	r4,148
     338:	01402204 	movi	r5,136
     33c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X95, 0x99 ) ;
     340:	01002544 	movi	r4,149
     344:	01402644 	movi	r5,153
     348:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X96, 0x8C ) ;
     34c:	01002584 	movi	r4,150
     350:	01402304 	movi	r5,140
     354:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X97, 0xE3 ) ;
     358:	010025c4 	movi	r4,151
     35c:	014038c4 	movi	r5,227
     360:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X98, 0x40 ) ;
     364:	01002604 	movi	r4,152
     368:	01401004 	movi	r5,64
     36c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X99, 0x92 ) ;
     370:	01002644 	movi	r4,153
     374:	01402484 	movi	r5,146
     378:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X9A, 0x03 ) ;
     37c:	01002684 	movi	r4,154
     380:	014000c4 	movi	r5,3
     384:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X9B, 0x76 ) ;
     388:	010026c4 	movi	r4,155
     38c:	01401d84 	movi	r5,118
     390:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0X9C, 0x38 ) ;
     394:	01002704 	movi	r4,156
     398:	01400e04 	movi	r5,56
     39c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA0, 0x34 ) ;
     3a0:	01002804 	movi	r4,160
     3a4:	01400d04 	movi	r5,52
     3a8:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA1, 0x15 ) ;
     3ac:	01002844 	movi	r4,161
     3b0:	01400544 	movi	r5,21
     3b4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA2, 0x55 ) ;
     3b8:	01002884 	movi	r4,162
     3bc:	01401544 	movi	r5,85
     3c0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA3, 0x55 ) ;
     3c4:	010028c4 	movi	r4,163
     3c8:	01401544 	movi	r5,85
     3cc:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA4, 0x88 ) ;
     3d0:	01002904 	movi	r4,164
     3d4:	01402204 	movi	r5,136
     3d8:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA5, 0x99 ) ;
     3dc:	01002944 	movi	r4,165
     3e0:	01402644 	movi	r5,153
     3e4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA6, 0x8C ) ;
     3e8:	01002984 	movi	r4,166
     3ec:	01402304 	movi	r5,140
     3f0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA7, 0xE3 ) ;
     3f4:	010029c4 	movi	r4,167
     3f8:	014038c4 	movi	r5,227
     3fc:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA8, 0x40 ) ;
     400:	01002a04 	movi	r4,168
     404:	01401004 	movi	r5,64
     408:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XA9, 0x92 ) ;
     40c:	01002a44 	movi	r4,169
     410:	01402484 	movi	r5,146
     414:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XAA, 0x03 ) ;
     418:	01002a84 	movi	r4,170
     41c:	014000c4 	movi	r5,3
     420:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XAB, 0x76 ) ;
     424:	01002ac4 	movi	r4,171
     428:	01401d84 	movi	r5,118
     42c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XAC, 0x38 ) ;
     430:	01002b04 	movi	r4,172
     434:	01400e04 	movi	r5,56
     438:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XB2, 0x1F ) ;
     43c:	01002c84 	movi	r4,178
     440:	014007c4 	movi	r5,31
     444:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XB3, 0x08 ) ;
     448:	01002cc4 	movi	r4,179
     44c:	01400204 	movi	r5,8
     450:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XB4, 0x02 ) ;
     454:	01002d04 	movi	r4,180
     458:	01400084 	movi	r5,2
     45c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XB5, 0x4C ) ;
     460:	01002d44 	movi	r4,181
     464:	01401304 	movi	r5,76
     468:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XB6, 0x30 ) ;
     46c:	01002d84 	movi	r4,182
     470:	01400c04 	movi	r5,48
     474:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC0, 0x02 ) ;
     478:	01003004 	movi	r4,192
     47c:	01400084 	movi	r5,2
     480:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC1, 0x1F ) ;
  lms_spi_write( 0XC2, 0x80 ) ;
     484:	04002004 	movi	r16,128
  lms_spi_write( 0XB3, 0x08 ) ;
  lms_spi_write( 0XB4, 0x02 ) ;
  lms_spi_write( 0XB5, 0x4C ) ;
  lms_spi_write( 0XB6, 0x30 ) ;
  lms_spi_write( 0XC0, 0x02 ) ;
  lms_spi_write( 0XC1, 0x1F ) ;
     488:	01003044 	movi	r4,193
     48c:	014007c4 	movi	r5,31
     490:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC2, 0x80 ) ;
     494:	800b883a 	mov	r5,r16
     498:	01003084 	movi	r4,194
     49c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC3, 0x80 ) ;
     4a0:	800b883a 	mov	r5,r16
     4a4:	010030c4 	movi	r4,195
     4a8:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC4, 0x0B ) ;
     4ac:	01003104 	movi	r4,196
     4b0:	014002c4 	movi	r5,11
     4b4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC5, 0xC8 ) ;
     4b8:	01003144 	movi	r4,197
     4bc:	01403204 	movi	r5,200
     4c0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC6, 0x00 ) ;
     4c4:	01003184 	movi	r4,198
     4c8:	000b883a 	mov	r5,zero
     4cc:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC7, 0x40 ) ;
     4d0:	010031c4 	movi	r4,199
     4d4:	01401004 	movi	r5,64
     4d8:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC8, 0x0C ) ;
     4dc:	01003204 	movi	r4,200
     4e0:	01400304 	movi	r5,12
     4e4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XC9, 0x0C ) ;
     4e8:	01003244 	movi	r4,201
     4ec:	01400304 	movi	r5,12
     4f0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XCA, 0x18 ) ;
     4f4:	01003284 	movi	r4,202
     4f8:	01400604 	movi	r5,24
     4fc:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XCB, 0x50 ) ;
     500:	010032c4 	movi	r4,203
     504:	01401404 	movi	r5,80
     508:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XCC, 0x00 ) ;
     50c:	01003304 	movi	r4,204
     510:	000b883a 	mov	r5,zero
     514:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XCD, 0x00 ) ;
     518:	01003344 	movi	r4,205
     51c:	000b883a 	mov	r5,zero
     520:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XD2, 0x1F ) ;
     524:	01003484 	movi	r4,210
     528:	014007c4 	movi	r5,31
     52c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XD3, 0x08 ) ;
     530:	010034c4 	movi	r4,211
     534:	01400204 	movi	r5,8
     538:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XD4, 0x02 ) ;
     53c:	01003504 	movi	r4,212
     540:	01400084 	movi	r5,2
     544:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XD5, 0x0C ) ;
     548:	01003544 	movi	r4,213
     54c:	01400304 	movi	r5,12
     550:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XD6, 0x30 ) ;
     554:	01003584 	movi	r4,214
     558:	01400c04 	movi	r5,48
     55c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XD7, 0x94 ) ;
     560:	010035c4 	movi	r4,215
     564:	01402504 	movi	r5,148
     568:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XD8, 0x00 ) ;
     56c:	01003604 	movi	r4,216
     570:	000b883a 	mov	r5,zero
     574:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XD9, 0x09 ) ;
  lms_spi_write( 0XDA, 0x20 ) ;
     578:	04400804 	movi	r17,32
  lms_spi_write( 0XD4, 0x02 ) ;
  lms_spi_write( 0XD5, 0x0C ) ;
  lms_spi_write( 0XD6, 0x30 ) ;
  lms_spi_write( 0XD7, 0x94 ) ;
  lms_spi_write( 0XD8, 0x00 ) ;
  lms_spi_write( 0XD9, 0x09 ) ;
     57c:	01003644 	movi	r4,217
     580:	01400244 	movi	r5,9
     584:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XDA, 0x20 ) ;
     588:	880b883a 	mov	r5,r17
     58c:	01003684 	movi	r4,218
     590:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XDB, 0x00 ) ;
     594:	010036c4 	movi	r4,219
     598:	000b883a 	mov	r5,zero
     59c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XDC, 0x00 ) ;
     5a0:	01003704 	movi	r4,220
     5a4:	000b883a 	mov	r5,zero
     5a8:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XDD, 0x00 ) ;
     5ac:	01003744 	movi	r4,221
     5b0:	000b883a 	mov	r5,zero
     5b4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XDE, 0x00 ) ;
     5b8:	01003784 	movi	r4,222
     5bc:	000b883a 	mov	r5,zero
     5c0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XDF, 0x1F ) ;
     5c4:	010037c4 	movi	r4,223
     5c8:	014007c4 	movi	r5,31
     5cc:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XE2, 0x1F ) ;
     5d0:	01003884 	movi	r4,226
     5d4:	014007c4 	movi	r5,31
     5d8:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XE3, 0x08 ) ;
     5dc:	010038c4 	movi	r4,227
     5e0:	01400204 	movi	r5,8
     5e4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XE4, 0x32 ) ;
     5e8:	01003904 	movi	r4,228
     5ec:	01400c84 	movi	r5,50
     5f0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XE5, 0x01 ) ;
     5f4:	01003944 	movi	r4,229
     5f8:	01400044 	movi	r5,1
     5fc:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XE6, 0x00 ) ;
     600:	01003984 	movi	r4,230
     604:	000b883a 	mov	r5,zero
     608:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XE7, 0x00 ) ;
     60c:	010039c4 	movi	r4,231
     610:	000b883a 	mov	r5,zero
     614:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XE8, 0x01 ) ;
     618:	01003a04 	movi	r4,232
     61c:	01400044 	movi	r5,1
     620:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF0, 0x01 ) ;
     624:	01003c04 	movi	r4,240
     628:	01400044 	movi	r5,1
     62c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF1, 0x80 ) ;
     630:	800b883a 	mov	r5,r16
     634:	01003c44 	movi	r4,241
     638:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF2, 0x80 ) ;
     63c:	800b883a 	mov	r5,r16
     640:	01003c84 	movi	r4,242
     644:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF3, 0x00 ) ;
     648:	01003cc4 	movi	r4,243
     64c:	000b883a 	mov	r5,zero
     650:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF4, 0x00 ) ;
     654:	01003d04 	movi	r4,244
     658:	000b883a 	mov	r5,zero
     65c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF5, 0xD0 ) ;
     660:	01003d44 	movi	r4,245
     664:	01403404 	movi	r5,208
     668:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF6, 0x78 ) ;
     66c:	01003d84 	movi	r4,246
     670:	01401e04 	movi	r5,120
     674:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF7, 0x00 ) ;
     678:	01003dc4 	movi	r4,247
     67c:	000b883a 	mov	r5,zero
     680:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF8, 0x1C ) ;
     684:	01003e04 	movi	r4,248
     688:	01400704 	movi	r5,28
     68c:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XF9, 0x37 ) ;
     690:	01003e44 	movi	r4,249
     694:	01400dc4 	movi	r5,55
     698:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XFA, 0x77 ) ;
     69c:	01003e84 	movi	r4,250
     6a0:	01401dc4 	movi	r5,119
     6a4:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XFB, 0x77 ) ;
     6a8:	01003ec4 	movi	r4,251
     6ac:	01401dc4 	movi	r5,119
     6b0:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XFC, 0x18 ) ;
     6b4:	01003f04 	movi	r4,252
     6b8:	01400604 	movi	r5,24
     6bc:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0XFD, 0x00 ) ;
     6c0:	01003f44 	movi	r4,253
     6c4:	000b883a 	mov	r5,zero
     6c8:	00009f00 	call	9f0 <lms_spi_write>

//  lms_soft_reset() ;
//  lms_tx_enable() ;
//  lms_pa_enable( PA_1 ) ;
//  lms_set_frequency( TX, 576000000 ) ;
  bladerf_set_frequency( TX, 2420000000u ) ;
     6cc:	01640fb4 	movhi	r5,36926
     6d0:	29514004 	addi	r5,r5,17664
     6d4:	01000044 	movi	r4,1
     6d8:	00000800 	call	80 <bladerf_set_frequency>
  lms_set_txvga2_gain( 20 ) ;
     6dc:	01000504 	movi	r4,20
     6e0:	0000d240 	call	d24 <lms_set_txvga2_gain>

  bladerf_set_frequency( RX, 320000000 ) ;
     6e4:	0144c4f4 	movhi	r5,4883
     6e8:	29740004 	addi	r5,r5,-12288
     6ec:	0009883a 	mov	r4,zero
     6f0:	00000800 	call	80 <bladerf_set_frequency>
  lms_lpf_enable( TX, BW_20MHz ) ;
     6f4:	01000044 	movi	r4,1
     6f8:	200b883a 	mov	r5,r4
     6fc:	0001d1c0 	call	1d1c <lms_lpf_enable>

  lms_spi_write( 0x47, 0x40 ) ;
     700:	010011c4 	movi	r4,71
     704:	01401004 	movi	r5,64
     708:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0x48, 12 ) ;
     70c:	01001204 	movi	r4,72
     710:	01400304 	movi	r5,12
     714:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0x49, 12 ) ;
     718:	01001244 	movi	r4,73
     71c:	01400304 	movi	r5,12
     720:	00009f00 	call	9f0 <lms_spi_write>

  lms_dump_registers() ;
     724:	0000e9c0 	call	e9c <lms_dump_registers>

  // Set the prescaler for 384kHz with a 38.4MHz clock
  IOWR_16DIRECT(I2C, OC_I2C_PRESCALER, 0x20 ) ;
     728:	008000b4 	movhi	r2,2
     72c:	10980004 	addi	r2,r2,24576
     730:	1440002d 	sthio	r17,0(r2)
  IOWR_8DIRECT(I2C, OC_I2C_CTRL, OC_I2C_ENABLE ) ;
     734:	10800084 	addi	r2,r2,2
     738:	14000025 	stbio	r16,0(r2)
//	  }
//  }

  /* Turn on Si5338 TX/RX clocks */
  {
	  si5338_write(32,0xA2);
     73c:	8809883a 	mov	r4,r17
     740:	01402884 	movi	r5,162
     744:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(37,0x03);
     748:	01000944 	movi	r4,37
     74c:	014000c4 	movi	r5,3
     750:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(65,0x1F);
     754:	01001044 	movi	r4,65
     758:	014007c4 	movi	r5,31
     75c:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(70,0x01);
     760:	01001184 	movi	r4,70
     764:	01400044 	movi	r5,1
     768:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(75,0x80);
     76c:	010012c4 	movi	r4,75
     770:	800b883a 	mov	r5,r16
     774:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(76,0xFE);
     778:	01001304 	movi	r4,76
     77c:	01403f84 	movi	r5,254
     780:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(77,0x03);
     784:	01001344 	movi	r4,77
     788:	014000c4 	movi	r5,3
     78c:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(81,0x01);
     790:	01001444 	movi	r4,81
     794:	01400044 	movi	r5,1
     798:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(86,0x80);
     79c:	01001584 	movi	r4,86
     7a0:	800b883a 	mov	r5,r16
     7a4:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(87,0xFE);
     7a8:	010015c4 	movi	r4,87
     7ac:	01403f84 	movi	r5,254
     7b0:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(88,0x03);
     7b4:	01001604 	movi	r4,88
     7b8:	014000c4 	movi	r5,3
     7bc:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(92,0x01);
     7c0:	01001704 	movi	r4,92
     7c4:	01400044 	movi	r5,1
     7c8:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(110,0x00);
     7cc:	01001b84 	movi	r4,110
     7d0:	000b883a 	mov	r5,zero
     7d4:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(144,0x80);
     7d8:	800b883a 	mov	r5,r16
     7dc:	01002404 	movi	r4,144
     7e0:	00001c80 	call	1c8 <si5338_write>

	  si5338_write(33, 0xA2);
     7e4:	01000844 	movi	r4,33
     7e8:	01402884 	movi	r5,162
     7ec:	00001c80 	call	1c8 <si5338_write>
	  si5338_write(38, 0x03);
     7f0:	01000984 	movi	r4,38
     7f4:	014000c4 	movi	r5,3
     7f8:	00001c80 	call	1c8 <si5338_write>
  /* Event loop never exits. */
  {
	  while(1)
	  {
		  // Check if anything is in the JTAG UART
		  uint32_t reg = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE) ;
     7fc:	008000b4 	movhi	r2,2
     800:	10880004 	addi	r2,r2,8192
     804:	10c00037 	ldwio	r3,0(r2)
		  if( reg & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK )
     808:	18a0000c 	andi	r2,r3,32768
     80c:	10000926 	beq	r2,zero,834 <main+0x5d0>
     810:	010000b4 	movhi	r4,2
     814:	21100204 	addi	r4,r4,16392
		  {
			  // Get value from JTAG UART
			  uint8_t letter = (uint8_t)(reg & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) ;

			  // Write it out to the FSK UART
			  while( (IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) == 0 ) { ; }
     818:	20800037 	ldwio	r2,0(r4)
     81c:	1080100c 	andi	r2,r2,64
     820:	103ffd26 	beq	r2,zero,818 <main+0x5b4>
			  IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, letter) ;
     824:	18c03fcc 	andi	r3,r3,255
     828:	008000b4 	movhi	r2,2
     82c:	10900104 	addi	r2,r2,16388
     830:	10c00035 	stwio	r3,0(r2)
		  }

		  // Check if anything is in the FSK UART
		  if( IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK )
     834:	008000b4 	movhi	r2,2
     838:	10900204 	addi	r2,r2,16392
     83c:	10800037 	ldwio	r2,0(r2)
     840:	1080200c 	andi	r2,r2,128
     844:	103fed26 	beq	r2,zero,7fc <main+0x598>
		  {
			  uint8_t val ;
			  val = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE) ;
     848:	008000b4 	movhi	r2,2
     84c:	10900004 	addi	r2,r2,16384
     850:	11400037 	ldwio	r5,0(r2)

			  // Write it out the JTAG UART
			  alt_printf( "%c", val ) ;
     854:	01000034 	movhi	r4,0
     858:	210dc704 	addi	r4,r4,14108
     85c:	29403fcc 	andi	r5,r5,255
     860:	00033340 	call	3334 <alt_printf>
     864:	003fe506 	br	7fc <main+0x598>

00000868 <si5338_read>:
	}
	while( IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP ) { } ;
	while( check_rxack && (IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_RXACK) ) { } ;
}

void si5338_read( uint8_t addr, uint8_t *data ) {
     868:	defff904 	addi	sp,sp,-28
     86c:	dd400515 	stw	r21,20(sp)
     870:	dcc00315 	stw	r19,12(sp)
     874:	dc000015 	stw	r16,0(sp)
     878:	282b883a 	mov	r21,r5
     87c:	2021883a 	mov	r16,r4

	// Set the address to the Si5338
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C ) ;
     880:	04c000b4 	movhi	r19,2
     884:	9cd800c4 	addi	r19,r19,24579
     888:	00803804 	movi	r2,224
	}
	while( IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP ) { } ;
	while( check_rxack && (IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_RXACK) ) { } ;
}

void si5338_read( uint8_t addr, uint8_t *data ) {
     88c:	dfc00615 	stw	ra,24(sp)
     890:	dd000415 	stw	r20,16(sp)
     894:	dc800215 	stw	r18,8(sp)
     898:	dc400115 	stw	r17,4(sp)

	// Set the address to the Si5338
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C ) ;
     89c:	98800025 	stbio	r2,0(r19)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_STA | OC_I2C_WR ) ;
     8a0:	048000b4 	movhi	r18,2
     8a4:	94980104 	addi	r18,r18,24580
     8a8:	05002404 	movi	r20,144
     8ac:	95000025 	stbio	r20,0(r18)
	si5338_complete_transfer( 1 ) ;
     8b0:	04400044 	movi	r17,1
     8b4:	8809883a 	mov	r4,r17
     8b8:	00001880 	call	188 <si5338_complete_transfer>

	IOWR_8DIRECT(I2C, OC_I2C_DATA, addr ) ;
     8bc:	84003fcc 	andi	r16,r16,255
     8c0:	9c000025 	stbio	r16,0(r19)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_WR | OC_I2C_STO ) ;
     8c4:	00801404 	movi	r2,80
     8c8:	90800025 	stbio	r2,0(r18)
	si5338_complete_transfer( 1 ) ;
     8cc:	8809883a 	mov	r4,r17
     8d0:	00001880 	call	188 <si5338_complete_transfer>

	// Next transfer is a read operation, so '1' in the read/write bit
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C | 1 ) ;
     8d4:	00803844 	movi	r2,225
     8d8:	98800025 	stbio	r2,0(r19)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_STA | OC_I2C_WR ) ;
     8dc:	95000025 	stbio	r20,0(r18)
	si5338_complete_transfer( 1 ) ;
     8e0:	8809883a 	mov	r4,r17
     8e4:	00001880 	call	188 <si5338_complete_transfer>

	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_RD | OC_I2C_NACK | OC_I2C_STO ) ;
     8e8:	00801a04 	movi	r2,104
     8ec:	90800025 	stbio	r2,0(r18)
	si5338_complete_transfer( 0 ) ;
     8f0:	0009883a 	mov	r4,zero
     8f4:	00001880 	call	188 <si5338_complete_transfer>

	*data = IORD_8DIRECT(I2C, OC_I2C_DATA) ;
     8f8:	98800023 	ldbuio	r2,0(r19)
     8fc:	a8800005 	stb	r2,0(r21)
	return ;
}
     900:	dfc00617 	ldw	ra,24(sp)
     904:	dd400517 	ldw	r21,20(sp)
     908:	dd000417 	ldw	r20,16(sp)
     90c:	dcc00317 	ldw	r19,12(sp)
     910:	dc800217 	ldw	r18,8(sp)
     914:	dc400117 	ldw	r17,4(sp)
     918:	dc000017 	ldw	r16,0(sp)
     91c:	dec00704 	addi	sp,sp,28
     920:	f800283a 	ret

00000924 <lms_print_frequency>:
	return ;
}

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
     924:	defffd04 	addi	sp,sp,-12
     928:	dfc00215 	stw	ra,8(sp)
     92c:	dc400115 	stw	r17,4(sp)
     930:	dc000015 	stw	r16,0(sp)
	printf( "  x        : %d\n", f->x ) ;
     934:	21400003 	ldbu	r5,0(r4)
	return ;
}

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
     938:	2021883a 	mov	r16,r4
	printf( "  x        : %d\n", f->x ) ;
     93c:	01000034 	movhi	r4,0
     940:	210dc804 	addi	r4,r4,14112
     944:	00029500 	call	2950 <printf>
	printf( "  nint     : %d\n", f->nint ) ;
     948:	8140008b 	ldhu	r5,2(r16)
     94c:	01000034 	movhi	r4,0
     950:	210dcd04 	addi	r4,r4,14132
	printf( "  nfrac    : %"PRIu32"\n", f->nfrac ) ;
	printf( "  freqsel  : %x\n", f->freqsel ) ;
	printf( "  reference: %"PRIu32"\n", f->reference ) ;
	printf( "  freq     : %"PRIu32"\n", (uint32_t) ( ((uint64_t)((f->nint<<23) + f->nfrac)) * (f->reference/f->x) >>23) )  ;
     954:	0023883a 	mov	r17,zero

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
	printf( "  x        : %d\n", f->x ) ;
	printf( "  nint     : %d\n", f->nint ) ;
     958:	00029500 	call	2950 <printf>
	printf( "  nfrac    : %"PRIu32"\n", f->nfrac ) ;
     95c:	81400117 	ldw	r5,4(r16)
     960:	01000034 	movhi	r4,0
     964:	210dd204 	addi	r4,r4,14152
     968:	00029500 	call	2950 <printf>
	printf( "  freqsel  : %x\n", f->freqsel ) ;
     96c:	81400203 	ldbu	r5,8(r16)
     970:	01000034 	movhi	r4,0
     974:	210dd704 	addi	r4,r4,14172
     978:	00029500 	call	2950 <printf>
	printf( "  reference: %"PRIu32"\n", f->reference ) ;
     97c:	81400317 	ldw	r5,12(r16)
     980:	01000034 	movhi	r4,0
     984:	210ddc04 	addi	r4,r4,14192
     988:	00029500 	call	2950 <printf>
	printf( "  freq     : %"PRIu32"\n", (uint32_t) ( ((uint64_t)((f->nint<<23) + f->nfrac)) * (f->reference/f->x) >>23) )  ;
     98c:	8080008b 	ldhu	r2,2(r16)
     990:	80c00117 	ldw	r3,4(r16)
     994:	81400003 	ldbu	r5,0(r16)
     998:	100495fa 	slli	r2,r2,23
     99c:	81000317 	ldw	r4,12(r16)
     9a0:	10c5883a 	add	r2,r2,r3
     9a4:	1021883a 	mov	r16,r2
     9a8:	00029080 	call	2908 <__udivsi3>
     9ac:	0013883a 	mov	r9,zero
     9b0:	880b883a 	mov	r5,r17
     9b4:	480f883a 	mov	r7,r9
     9b8:	8009883a 	mov	r4,r16
     9bc:	100d883a 	mov	r6,r2
     9c0:	000203c0 	call	203c <__muldi3>
     9c4:	100f883a 	mov	r7,r2
     9c8:	380ad5fa 	srli	r5,r7,23
     9cc:	1804927a 	slli	r2,r3,9
     9d0:	01000034 	movhi	r4,0
     9d4:	210de104 	addi	r4,r4,14212
     9d8:	114ab03a 	or	r5,r2,r5

    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}
     9dc:	dfc00217 	ldw	ra,8(sp)
     9e0:	dc400117 	ldw	r17,4(sp)
     9e4:	dc000017 	ldw	r16,0(sp)
     9e8:	dec00304 	addi	sp,sp,12
	printf( "  x        : %d\n", f->x ) ;
	printf( "  nint     : %d\n", f->nint ) ;
	printf( "  nfrac    : %"PRIu32"\n", f->nfrac ) ;
	printf( "  freqsel  : %x\n", f->freqsel ) ;
	printf( "  reference: %"PRIu32"\n", f->reference ) ;
	printf( "  freq     : %"PRIu32"\n", (uint32_t) ( ((uint64_t)((f->nint<<23) + f->nfrac)) * (f->reference/f->x) >>23) )  ;
     9ec:	00029501 	jmpi	2950 <printf>

000009f0 <lms_spi_write>:
	return ;
}

// SPI Write
void lms_spi_write( uint8_t address, uint8_t val )
{
     9f0:	defffb04 	addi	sp,sp,-20
	/*if( address > 0x7f )
	{
		alt_printf( "Invalid write address: %x\n", address ) ;
	} else*/ 
    {
		uint8_t data[2] = { address |= LMS_WRITE, val } ;
     9f4:	00bfe004 	movi	r2,-128
     9f8:	2084b03a 	or	r2,r4,r2
     9fc:	d9400345 	stb	r5,13(sp)
		alt_avalon_spi_command( SPI_0_BASE, 0, 2, data, 0, 0, 0 ) ;
     a00:	010000b4 	movhi	r4,2
     a04:	21040004 	addi	r4,r4,4096
     a08:	000b883a 	mov	r5,zero
     a0c:	01800084 	movi	r6,2
     a10:	d9c00304 	addi	r7,sp,12
	return ;
}

// SPI Write
void lms_spi_write( uint8_t address, uint8_t val )
{
     a14:	dfc00415 	stw	ra,16(sp)
	/*if( address > 0x7f )
	{
		alt_printf( "Invalid write address: %x\n", address ) ;
	} else*/ 
    {
		uint8_t data[2] = { address |= LMS_WRITE, val } ;
     a18:	d8800305 	stb	r2,12(sp)
		alt_avalon_spi_command( SPI_0_BASE, 0, 2, data, 0, 0, 0 ) ;
     a1c:	d8000015 	stw	zero,0(sp)
     a20:	d8000115 	stw	zero,4(sp)
     a24:	d8000215 	stw	zero,8(sp)
     a28:	00035d00 	call	35d0 <alt_avalon_spi_command>
	}
	return ;
}
     a2c:	dfc00417 	ldw	ra,16(sp)
     a30:	dec00504 	addi	sp,sp,20
     a34:	f800283a 	ret

00000a38 <lms_lpf_init>:

	return ;
}

void lms_lpf_init(void)
{
     a38:	defffe04 	addi	sp,sp,-8
     a3c:	dc000015 	stw	r16,0(sp)
	lms_spi_write( 0x06, 0x0d ) ;
     a40:	01000184 	movi	r4,6
	lms_spi_write( 0x17, 0x43 ) ;
     a44:	040010c4 	movi	r16,67
	return ;
}

void lms_lpf_init(void)
{
	lms_spi_write( 0x06, 0x0d ) ;
     a48:	01400344 	movi	r5,13

	return ;
}

void lms_lpf_init(void)
{
     a4c:	dfc00115 	stw	ra,4(sp)
	lms_spi_write( 0x06, 0x0d ) ;
     a50:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x17, 0x43 ) ;
     a54:	800b883a 	mov	r5,r16
     a58:	010005c4 	movi	r4,23
     a5c:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x27, 0x43 ) ;
     a60:	800b883a 	mov	r5,r16
     a64:	010009c4 	movi	r4,39
     a68:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x41, 0x1f ) ;
     a6c:	01001044 	movi	r4,65
     a70:	014007c4 	movi	r5,31
     a74:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x44, 1<<3 ) ;
     a78:	01001104 	movi	r4,68
     a7c:	01400204 	movi	r5,8
     a80:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x45, 0x1f<<3 ) ;
	lms_spi_write( 0x48, 0xc  ) ;
     a84:	04000304 	movi	r16,12
	lms_spi_write( 0x06, 0x0d ) ;
	lms_spi_write( 0x17, 0x43 ) ;
	lms_spi_write( 0x27, 0x43 ) ;
	lms_spi_write( 0x41, 0x1f ) ;
	lms_spi_write( 0x44, 1<<3 ) ;
	lms_spi_write( 0x45, 0x1f<<3 ) ;
     a88:	01001144 	movi	r4,69
     a8c:	01403e04 	movi	r5,248
     a90:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x48, 0xc  ) ;
     a94:	800b883a 	mov	r5,r16
     a98:	01001204 	movi	r4,72
     a9c:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x49, 0xc ) ;
     aa0:	800b883a 	mov	r5,r16
     aa4:	01001244 	movi	r4,73
     aa8:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x57, 0x84 ) ;
     aac:	010015c4 	movi	r4,87
     ab0:	01402104 	movi	r5,132
	return ;
}
     ab4:	dfc00117 	ldw	ra,4(sp)
     ab8:	dc000017 	ldw	r16,0(sp)
     abc:	dec00204 	addi	sp,sp,8
	lms_spi_write( 0x41, 0x1f ) ;
	lms_spi_write( 0x44, 1<<3 ) ;
	lms_spi_write( 0x45, 0x1f<<3 ) ;
	lms_spi_write( 0x48, 0xc  ) ;
	lms_spi_write( 0x49, 0xc ) ;
	lms_spi_write( 0x57, 0x84 ) ;
     ac0:	00009f01 	jmpi	9f0 <lms_spi_write>

00000ac4 <lms_calibrate_dc>:
        alt_printf( "addr: %x data: %x\n", lms_reg_dumpset[i], data ) ;
    }
}

void lms_calibrate_dc(void)
{
     ac4:	defff604 	addi	sp,sp,-40
     ac8:	dc800215 	stw	r18,8(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     acc:	04800244 	movi	r18,9
        alt_printf( "addr: %x data: %x\n", lms_reg_dumpset[i], data ) ;
    }
}

void lms_calibrate_dc(void)
{
     ad0:	dd400515 	stw	r21,20(sp)
     ad4:	dd000415 	stw	r20,16(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
	lms_spi_write( 0x43, 0x08 ) ; // I filter
     ad8:	05400204 	movi	r21,8
     adc:	050010c4 	movi	r20,67
}

void lms_calibrate_dc(void)
{
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     ae0:	9009883a 	mov	r4,r18
     ae4:	01402304 	movi	r5,140
        alt_printf( "addr: %x data: %x\n", lms_reg_dumpset[i], data ) ;
    }
}

void lms_calibrate_dc(void)
{
     ae8:	dfc00915 	stw	ra,36(sp)
     aec:	df000815 	stw	fp,32(sp)
     af0:	ddc00715 	stw	r23,28(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
	lms_spi_write( 0x43, 0x08 ) ; // I filter
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
     af4:	07000a04 	movi	fp,40
        alt_printf( "addr: %x data: %x\n", lms_reg_dumpset[i], data ) ;
    }
}

void lms_calibrate_dc(void)
{
     af8:	dd800615 	stw	r22,24(sp)
     afc:	dcc00315 	stw	r19,12(sp)
     b00:	dc400115 	stw	r17,4(sp)
     b04:	dc000015 	stw	r16,0(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     b08:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x43, 0x08 ) ; // I filter
     b0c:	a009883a 	mov	r4,r20
     b10:	a80b883a 	mov	r5,r21
     b14:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
     b18:	a009883a 	mov	r4,r20
     b1c:	e00b883a 	mov	r5,fp
     b20:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x43, 0x08 ) ; // Stop calibration
     b24:	a009883a 	mov	r4,r20
     b28:	a80b883a 	mov	r5,r21
     b2c:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x43, 0x09 ) ; // Q Filter
     b30:	a009883a 	mov	r4,r20
     b34:	900b883a 	mov	r5,r18
     b38:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x43, 0x29 ) ;
     b3c:	a009883a 	mov	r4,r20
     b40:	01400a44 	movi	r5,41
     b44:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;
     b48:	05802104 	movi	r22,132
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
	lms_spi_write( 0x43, 0x08 ) ; // Stop calibration

	lms_spi_write( 0x43, 0x09 ) ; // Q Filter
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;
     b4c:	a009883a 	mov	r4,r20
     b50:	900b883a 	mov	r5,r18
     b54:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x09, 0x84 ) ;
     b58:	b00b883a 	mov	r5,r22
     b5c:	9009883a 	mov	r4,r18
     b60:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators
     b64:	05c01984 	movi	r23,102
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
     b68:	9009883a 	mov	r4,r18
     b6c:	01402504 	movi	r5,148
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators

	lms_spi_write( 0x63, 0x08 ) ; // DC reference module
     b70:	040018c4 	movi	r16,99
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
     b74:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators
     b78:	b809883a 	mov	r4,r23
     b7c:	000b883a 	mov	r5,zero
     b80:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x63, 0x08 ) ; // DC reference module
     b84:	8009883a 	mov	r4,r16
     b88:	a80b883a 	mov	r5,r21
     b8c:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x28 ) ;
     b90:	8009883a 	mov	r4,r16
     b94:	e00b883a 	mov	r5,fp
     b98:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x08 ) ;
     b9c:	8009883a 	mov	r4,r16
     ba0:	a80b883a 	mov	r5,r21
     ba4:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x63, 0x09 ) ;
     ba8:	8009883a 	mov	r4,r16
     bac:	900b883a 	mov	r5,r18
     bb0:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x29 ) ;
     bb4:	8009883a 	mov	r4,r16
     bb8:	01400a44 	movi	r5,41
     bbc:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x09 ) ;

	lms_spi_write( 0x63, 0x0a ) ;
     bc0:	04c00284 	movi	r19,10
	lms_spi_write( 0x63, 0x28 ) ;
	lms_spi_write( 0x63, 0x08 ) ;

	lms_spi_write( 0x63, 0x09 ) ;
	lms_spi_write( 0x63, 0x29 ) ;
	lms_spi_write( 0x63, 0x09 ) ;
     bc4:	8009883a 	mov	r4,r16
     bc8:	900b883a 	mov	r5,r18
     bcc:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x63, 0x0a ) ;
     bd0:	980b883a 	mov	r5,r19
     bd4:	8009883a 	mov	r4,r16
     bd8:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x2a ) ;
     bdc:	8009883a 	mov	r4,r16
     be0:	01400a84 	movi	r5,42
     be4:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x0a ) ;

	lms_spi_write( 0x63, 0x0b ) ;
     be8:	044002c4 	movi	r17,11
	lms_spi_write( 0x63, 0x29 ) ;
	lms_spi_write( 0x63, 0x09 ) ;

	lms_spi_write( 0x63, 0x0a ) ;
	lms_spi_write( 0x63, 0x2a ) ;
	lms_spi_write( 0x63, 0x0a ) ;
     bec:	8009883a 	mov	r4,r16
     bf0:	980b883a 	mov	r5,r19
     bf4:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x63, 0x0b ) ;
     bf8:	880b883a 	mov	r5,r17
     bfc:	8009883a 	mov	r4,r16
     c00:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x2b ) ;
     c04:	8009883a 	mov	r4,r16
     c08:	01400ac4 	movi	r5,43
     c0c:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x0b ) ;
     c10:	8009883a 	mov	r4,r16
     c14:	880b883a 	mov	r5,r17

	lms_spi_write( 0x63, 0x0c ) ;
     c18:	04400304 	movi	r17,12
	lms_spi_write( 0x63, 0x2a ) ;
	lms_spi_write( 0x63, 0x0a ) ;

	lms_spi_write( 0x63, 0x0b ) ;
	lms_spi_write( 0x63, 0x2b ) ;
	lms_spi_write( 0x63, 0x0b ) ;
     c1c:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x63, 0x0c ) ;
     c20:	880b883a 	mov	r5,r17
     c24:	8009883a 	mov	r4,r16
     c28:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x2c ) ;
     c2c:	8009883a 	mov	r4,r16
     c30:	01400b04 	movi	r5,44
     c34:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x63, 0x0c ) ;
     c38:	8009883a 	mov	r4,r16
     c3c:	880b883a 	mov	r5,r17
     c40:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x66, 0x0a ) ;
     c44:	b809883a 	mov	r4,r23
     c48:	980b883a 	mov	r5,r19
     c4c:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     c50:	044015c4 	movi	r17,87
	lms_spi_write( 0x63, 0x0c ) ;
	lms_spi_write( 0x63, 0x2c ) ;
	lms_spi_write( 0x63, 0x0c ) ;

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;
     c54:	9009883a 	mov	r4,r18
     c58:	b00b883a 	mov	r5,r22
     c5c:	00009f00 	call	9f0 <lms_spi_write>

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
	lms_spi_write( 0x09, 0x42 ) ;
     c60:	04c01084 	movi	r19,66

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     c64:	8809883a 	mov	r4,r17
     c68:	01400104 	movi	r5,4
	lms_spi_write( 0x09, 0x42 ) ;

	lms_spi_write( 0x33, 0x08 ) ;
     c6c:	04000cc4 	movi	r16,51

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     c70:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x09, 0x42 ) ;
     c74:	9009883a 	mov	r4,r18
     c78:	980b883a 	mov	r5,r19
     c7c:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x33, 0x08 ) ;
     c80:	8009883a 	mov	r4,r16
     c84:	a80b883a 	mov	r5,r21
     c88:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x33, 0x28 ) ;
     c8c:	8009883a 	mov	r4,r16
     c90:	e00b883a 	mov	r5,fp
     c94:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x33, 0x08 ) ;
     c98:	8009883a 	mov	r4,r16
     c9c:	a80b883a 	mov	r5,r21
     ca0:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x33, 0x09 ) ;
     ca4:	8009883a 	mov	r4,r16
     ca8:	900b883a 	mov	r5,r18
     cac:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x33, 0x29 ) ;
     cb0:	8009883a 	mov	r4,r16
     cb4:	01400a44 	movi	r5,41
     cb8:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x33, 0x09 ) ;
     cbc:	8009883a 	mov	r4,r16
     cc0:	900b883a 	mov	r5,r18
     cc4:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x57, 0x84 ) ;
     cc8:	8809883a 	mov	r4,r17
     ccc:	b00b883a 	mov	r5,r22
     cd0:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x09, 0x81 ) ;
     cd4:	9009883a 	mov	r4,r18
     cd8:	01402044 	movi	r5,129
     cdc:	00009f00 	call	9f0 <lms_spi_write>

	lms_spi_write( 0x42, 0x77 ) ;
     ce0:	9809883a 	mov	r4,r19
     ce4:	01401dc4 	movi	r5,119
     ce8:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x43, 0x7f ) ;
     cec:	a009883a 	mov	r4,r20
     cf0:	01401fc4 	movi	r5,127

	return ;
}
     cf4:	dfc00917 	ldw	ra,36(sp)
     cf8:	df000817 	ldw	fp,32(sp)
     cfc:	ddc00717 	ldw	r23,28(sp)
     d00:	dd800617 	ldw	r22,24(sp)
     d04:	dd400517 	ldw	r21,20(sp)
     d08:	dd000417 	ldw	r20,16(sp)
     d0c:	dcc00317 	ldw	r19,12(sp)
     d10:	dc800217 	ldw	r18,8(sp)
     d14:	dc400117 	ldw	r17,4(sp)
     d18:	dc000017 	ldw	r16,0(sp)
     d1c:	dec00a04 	addi	sp,sp,40

	lms_spi_write( 0x57, 0x84 ) ;
	lms_spi_write( 0x09, 0x81 ) ;

	lms_spi_write( 0x42, 0x77 ) ;
	lms_spi_write( 0x43, 0x7f ) ;
     d20:	00009f01 	jmpi	9f0 <lms_spi_write>

00000d24 <lms_set_txvga2_gain>:

void lms_set_txvga2_gain( uint8_t gain ) {
	if( gain > 25 ) {
		gain = 25 ;
	}
	lms_spi_write( 0x45, gain << 3 ) ;
     d24:	2007883a 	mov	r3,r4
     d28:	18803fcc 	andi	r2,r3,255
     d2c:	01400644 	movi	r5,25
     d30:	01001144 	movi	r4,69
     d34:	2880012e 	bgeu	r5,r2,d3c <lms_set_txvga2_gain+0x18>
     d38:	2807883a 	mov	r3,r5
     d3c:	180a90fa 	slli	r5,r3,3
     d40:	29403fcc 	andi	r5,r5,255
     d44:	00009f01 	jmpi	9f0 <lms_spi_write>

00000d48 <lms_rxvga2_set_gain>:
	return ;
}

// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
     d48:	defffe04 	addi	sp,sp,-8
     d4c:	dc000015 	stw	r16,0(sp)
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
     d50:	00800284 	movi	r2,10
     d54:	240007cc 	andi	r16,r4,31
	return ;
}

// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
     d58:	dfc00115 	stw	ra,4(sp)
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
     d5c:	01000034 	movhi	r4,0
     d60:	210de604 	addi	r4,r4,14232
// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
     d64:	1400010e 	bge	r2,r16,d6c <lms_rxvga2_set_gain+0x24>
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
     d68:	00034c80 	call	34c8 <alt_putstr>
	}
	lms_spi_write( 0x65, (0x1f)&gain ) ;
     d6c:	800b883a 	mov	r5,r16
     d70:	01001944 	movi	r4,101
	return ;
}
     d74:	dfc00117 	ldw	ra,4(sp)
     d78:	dc000017 	ldw	r16,0(sp)
     d7c:	dec00204 	addi	sp,sp,8
	// go above 30dB
	if( (gain&0x1f) > 10 )
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
	}
	lms_spi_write( 0x65, (0x1f)&gain ) ;
     d80:	00009f01 	jmpi	9f0 <lms_spi_write>

00000d84 <lms_rxvga1_enable>:

// Enable RXVGA1
void lms_rxvga1_enable()
{
	// Set bias current to nominal
	lms_spi_write( 0x7b, 0x33 ) ;
     d84:	01001ec4 	movi	r4,123
     d88:	01400cc4 	movi	r5,51
     d8c:	00009f01 	jmpi	9f0 <lms_spi_write>

00000d90 <lms_rxvga1_disable>:

// Disable RXVGA1
void lms_rxvga1_disable()
{
	// Set bias current to 0
	lms_spi_write( 0x7b, 0x03 ) ;
     d90:	01001ec4 	movi	r4,123
     d94:	014000c4 	movi	r5,3
     d98:	00009f01 	jmpi	9f0 <lms_spi_write>

00000d9c <lms_soft_reset>:
	return ;
}

// Soft reset of the LMS
void lms_soft_reset( )
{
     d9c:	defffe04 	addi	sp,sp,-8
     da0:	dc000015 	stw	r16,0(sp)
	lms_spi_write( 0x05, 0x12 ) ;
     da4:	04000144 	movi	r16,5
     da8:	8009883a 	mov	r4,r16
     dac:	01400484 	movi	r5,18
	return ;
}

// Soft reset of the LMS
void lms_soft_reset( )
{
     db0:	dfc00115 	stw	ra,4(sp)
	lms_spi_write( 0x05, 0x12 ) ;
     db4:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_write( 0x05, 0x32 ) ;
     db8:	8009883a 	mov	r4,r16
     dbc:	01400c84 	movi	r5,50
	return ;
}
     dc0:	dfc00117 	ldw	ra,4(sp)
     dc4:	dc000017 	ldw	r16,0(sp)
     dc8:	dec00204 	addi	sp,sp,8

// Soft reset of the LMS
void lms_soft_reset( )
{
	lms_spi_write( 0x05, 0x12 ) ;
	lms_spi_write( 0x05, 0x32 ) ;
     dcc:	00009f01 	jmpi	9f0 <lms_spi_write>

00000dd0 <lms_lpf_disable>:
}

// Disable the LPF for a specific module
void lms_lpf_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
     dd0:	00801504 	movi	r2,84
     dd4:	20000126 	beq	r4,zero,ddc <lms_lpf_disable+0xc>
     dd8:	00800d04 	movi	r2,52
	lms_spi_write( reg, 0x00 ) ;
     ddc:	11003fcc 	andi	r4,r2,255
     de0:	000b883a 	mov	r5,zero
     de4:	00009f01 	jmpi	9f0 <lms_spi_write>

00000de8 <lms_spi_read>:

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
	uint8_t rv ;
	if( address > 0x7f )
     de8:	20c03fcc 	andi	r3,r4,255
     dec:	18803fcc 	andi	r2,r3,255
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     df0:	defff904 	addi	sp,sp,-28
	uint8_t rv ;
	if( address > 0x7f )
     df4:	1080201c 	xori	r2,r2,128
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     df8:	dc000415 	stw	r16,16(sp)
	uint8_t rv ;
	if( address > 0x7f )
     dfc:	10bfe004 	addi	r2,r2,-128
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     e00:	04000044 	movi	r16,1
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     e04:	dc400515 	stw	r17,20(sp)
     e08:	d9000305 	stb	r4,12(sp)
     e0c:	2823883a 	mov	r17,r5
     e10:	dfc00615 	stw	ra,24(sp)
	uint8_t rv ;
	if( address > 0x7f )
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     e14:	010000b4 	movhi	r4,2
     e18:	21040004 	addi	r4,r4,4096
     e1c:	800d883a 	mov	r6,r16
     e20:	d9c00304 	addi	r7,sp,12
     e24:	000b883a 	mov	r5,zero

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
	uint8_t rv ;
	if( address > 0x7f )
     e28:	1000050e 	bge	r2,zero,e40 <lms_spi_read+0x58>
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
     e2c:	19403fcc 	andi	r5,r3,255
     e30:	01000034 	movhi	r4,0
     e34:	210df004 	addi	r4,r4,14272
     e38:	00033340 	call	3334 <alt_printf>
     e3c:	00001206 	br	e88 <lms_spi_read+0xa0>
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     e40:	d8000015 	stw	zero,0(sp)
     e44:	d8000115 	stw	zero,4(sp)
     e48:	dc000215 	stw	r16,8(sp)
     e4c:	00035d00 	call	35d0 <alt_avalon_spi_command>
		rv = alt_avalon_spi_command( SPI_0_BASE, 0, 0, 0, 1, val, 0 ) ;
     e50:	010000b4 	movhi	r4,2
     e54:	21040004 	addi	r4,r4,4096
     e58:	000b883a 	mov	r5,zero
     e5c:	000d883a 	mov	r6,zero
     e60:	000f883a 	mov	r7,zero
     e64:	dc400115 	stw	r17,4(sp)
     e68:	dc000015 	stw	r16,0(sp)
     e6c:	d8000215 	stw	zero,8(sp)
     e70:	00035d00 	call	35d0 <alt_avalon_spi_command>
		if( rv != 1 )
     e74:	10803fcc 	andi	r2,r2,255
		{
			alt_putstr( "SPI data read did not work :(\n") ;
     e78:	01000034 	movhi	r4,0
     e7c:	210df704 	addi	r4,r4,14300
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
		rv = alt_avalon_spi_command( SPI_0_BASE, 0, 0, 0, 1, val, 0 ) ;
		if( rv != 1 )
     e80:	14000126 	beq	r2,r16,e88 <lms_spi_read+0xa0>
		{
			alt_putstr( "SPI data read did not work :(\n") ;
     e84:	00034c80 	call	34c8 <alt_putstr>
	if( LMS_VERBOSE )
	{
		alt_printf( "r-addr: %x data: %x\n", address, *val ) ;
	}
	return ;
}
     e88:	dfc00617 	ldw	ra,24(sp)
     e8c:	dc400517 	ldw	r17,20(sp)
     e90:	dc000417 	ldw	r16,16(sp)
     e94:	dec00704 	addi	sp,sp,28
     e98:	f800283a 	ret

00000e9c <lms_dump_registers>:

	return ;
}

void lms_dump_registers(void)
{
     e9c:	defffc04 	addi	sp,sp,-16
     ea0:	dc400215 	stw	r17,8(sp)
     ea4:	dfc00315 	stw	ra,12(sp)
     ea8:	dc000115 	stw	r16,4(sp)
     eac:	0023883a 	mov	r17,zero
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
     eb0:	00c00034 	movhi	r3,0
     eb4:	18ce3d04 	addi	r3,r3,14580
     eb8:	88803fcc 	andi	r2,r17,255
     ebc:	10c5883a 	add	r2,r2,r3
     ec0:	14000003 	ldbu	r16,0(r2)
     ec4:	d80b883a 	mov	r5,sp

void lms_dump_registers(void)
{
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
     ec8:	8c400044 	addi	r17,r17,1
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
     ecc:	8009883a 	mov	r4,r16
     ed0:	0000de80 	call	de8 <lms_spi_read>
        alt_printf( "addr: %x data: %x\n", lms_reg_dumpset[i], data ) ;
     ed4:	d9800003 	ldbu	r6,0(sp)
     ed8:	800b883a 	mov	r5,r16
     edc:	01000034 	movhi	r4,0
     ee0:	210dff04 	addi	r4,r4,14332
     ee4:	00033340 	call	3334 <alt_printf>

void lms_dump_registers(void)
{
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
     ee8:	88c03fcc 	andi	r3,r17,255
     eec:	00801ac4 	movi	r2,107
     ef0:	18bfef1e 	bne	r3,r2,eb0 <lms_dump_registers+0x14>
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
        alt_printf( "addr: %x data: %x\n", lms_reg_dumpset[i], data ) ;
    }
}
     ef4:	dfc00317 	ldw	ra,12(sp)
     ef8:	dc400217 	ldw	r17,8(sp)
     efc:	dc000117 	ldw	r16,4(sp)
     f00:	dec00404 	addi	sp,sp,16
     f04:	f800283a 	ret

00000f08 <lms_set_frequency>:
	return ;
}

// Set the frequency of a module
void lms_set_frequency( lms_module_t mod, uint32_t freq )
{
     f08:	defff104 	addi	sp,sp,-60
     f0c:	df000d15 	stw	fp,52(sp)
     f10:	dc800715 	stw	r18,28(sp)
     f14:	dfc00e15 	stw	ra,56(sp)
     f18:	ddc00c15 	stw	r23,48(sp)
     f1c:	dd800b15 	stw	r22,44(sp)
     f20:	dd400a15 	stw	r21,40(sp)
     f24:	dd000915 	stw	r20,36(sp)
     f28:	dcc00815 	stw	r19,32(sp)
     f2c:	dc400615 	stw	r17,24(sp)
     f30:	dc000515 	stw	r16,20(sp)
     f34:	2039883a 	mov	fp,r4
     f38:	2825883a 	mov	r18,r5
	// Select the base address based on which PLL we are configuring
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     f3c:	20000926 	beq	r4,zero,f64 <lms_set_frequency+0x5c>
     f40:	05800404 	movi	r22,16
     f44:	00000806 	br	f68 <lms_set_frequency+0x60>
		uint8_t i = 0 ;
		while( i < 16 )
		{
			if( (lfreq > bands[i].low) && (lfreq <= bands[i].high) )
			{
				freqsel = bands[i].value ;
     f48:	01400304 	movi	r5,12
     f4c:	00029180 	call	2918 <__mulsi3>
     f50:	00c00034 	movhi	r3,0
     f54:	18ce0d04 	addi	r3,r3,14388
     f58:	10c5883a 	add	r2,r2,r3
     f5c:	15400203 	ldbu	r21,8(r2)
     f60:	00001c06 	br	fd4 <lms_set_frequency+0xcc>

// Set the frequency of a module
void lms_set_frequency( lms_module_t mod, uint32_t freq )
{
	// Select the base address based on which PLL we are configuring
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     f64:	05800804 	movi	r22,32
	uint64_t temp ;
	uint32_t left ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
     f68:	01000244 	movi	r4,9
     f6c:	d80b883a 	mov	r5,sp
     f70:	0000de80 	call	de8 <lms_spi_read>
	data |= 0x05 ;
     f74:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
     f78:	01000244 	movi	r4,9
	uint32_t left ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
	data |= 0x05 ;
     f7c:	10800154 	ori	r2,r2,5
	lms_spi_write( 0x09, data ) ;
     f80:	11403fcc 	andi	r5,r2,255
	uint32_t left ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
	data |= 0x05 ;
     f84:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
     f88:	00009f00 	call	9f0 <lms_spi_write>

	// Figure out freqsel
	if( lfreq < bands[0].low )
     f8c:	00837734 	movhi	r2,3548
     f90:	10aac7c4 	addi	r2,r2,-21729
     f94:	14800e2e 	bgeu	r2,r18,fd0 <lms_set_frequency+0xc8>
	{
		// Too low
	} else if( lfreq > bands[15].high )
     f98:	00b76ef4 	movhi	r2,56763
     f9c:	10ac8004 	addi	r2,r2,-19968
     fa0:	14800b36 	bltu	r2,r18,fd0 <lms_set_frequency+0xc8>
     fa4:	0009883a 	mov	r4,zero
     fa8:	00c00034 	movhi	r3,0
     fac:	18ce0d04 	addi	r3,r3,14388
     fb0:	01400404 	movi	r5,16
	} else
	{
		uint8_t i = 0 ;
		while( i < 16 )
		{
			if( (lfreq > bands[i].low) && (lfreq <= bands[i].high) )
     fb4:	18800017 	ldw	r2,0(r3)
     fb8:	1480022e 	bgeu	r2,r18,fc4 <lms_set_frequency+0xbc>
     fbc:	18800117 	ldw	r2,4(r3)
     fc0:	14bfe12e 	bgeu	r2,r18,f48 <lms_set_frequency+0x40>
			{
				freqsel = bands[i].value ;
				break ;
     fc4:	21000044 	addi	r4,r4,1
     fc8:	18c00304 	addi	r3,r3,12
	{
		// Too high!
	} else
	{
		uint8_t i = 0 ;
		while( i < 16 )
     fcc:	217ff91e 	bne	r4,r5,fb4 <lms_set_frequency+0xac>
     fd0:	054009c4 	movi	r21,39
			}
			i++ ;
		}
	}

    x = 1 << ((freqsel&7)-3);
     fd4:	acc03fcc 	andi	r19,r21,255
     fd8:	988001cc 	andi	r2,r19,7
     fdc:	10bfff44 	addi	r2,r2,-3
     fe0:	00c00044 	movi	r3,1
     fe4:	18ae983a 	sll	r23,r3,r2
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
         temp ;
         vcofreq = (uint64_t)freq*x ;
     fe8:	0013883a 	mov	r9,zero
     fec:	0007883a 	mov	r3,zero
     ff0:	480f883a 	mov	r7,r9
     ff4:	180b883a 	mov	r5,r3
     ff8:	9009883a 	mov	r4,r18
     ffc:	b80d883a 	mov	r6,r23
    1000:	000203c0 	call	203c <__muldi3>
    1004:	1009883a 	mov	r4,r2

        nint = vcofreq/reference ;
    1008:	018092b4 	movhi	r6,586
    100c:	31bc0004 	addi	r6,r6,-4096
    x = 1 << ((freqsel&7)-3);
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
         temp ;
         vcofreq = (uint64_t)freq*x ;
    1010:	180b883a 	mov	r5,r3

        nint = vcofreq/reference ;
    1014:	000f883a 	mov	r7,zero
    x = 1 << ((freqsel&7)-3);
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
         temp ;
         vcofreq = (uint64_t)freq*x ;
    1018:	1021883a 	mov	r16,r2

        nint = vcofreq/reference ;
    101c:	00021600 	call	2160 <__udivdi3>
        left = vcofreq - nint*reference ;
    1020:	113fffcc 	andi	r4,r2,65535
    1024:	014092b4 	movhi	r5,586
    1028:	297c0004 	addi	r5,r5,-4096
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
         temp ;
         vcofreq = (uint64_t)freq*x ;

        nint = vcofreq/reference ;
    102c:	1029883a 	mov	r20,r2
        left = vcofreq - nint*reference ;
    1030:	00029180 	call	2918 <__mulsi3>
    1034:	80a1c83a 	sub	r16,r16,r2
    1038:	0023883a 	mov	r17,zero
    103c:	0007883a 	mov	r3,zero
    1040:	018092b4 	movhi	r6,586
    1044:	31bbffc4 	addi	r6,r6,-4097
    1048:	017f6db4 	movhi	r5,64950
    104c:	29440004 	addi	r5,r5,4096
    1050:	01000604 	movi	r4,24
    1054:	8c45883a 	add	r2,r17,r17
        	// Long division ...
        	int i ;
        	for( i = 0 ; i < 24 ; i++ ) {
        		if( left >= reference ) {
        			left = left - reference ;
        			nfrac = (nfrac << 1) + 1 ;
    1058:	14400044 	addi	r17,r2,1
        nfrac = 0 ;
        {
        	// Long division ...
        	int i ;
        	for( i = 0 ; i < 24 ; i++ ) {
        		if( left >= reference ) {
    105c:	3400022e 	bgeu	r6,r16,1068 <lms_set_frequency+0x160>
        			left = left - reference ;
    1060:	8161883a 	add	r16,r16,r5
    1064:	00000106 	br	106c <lms_set_frequency+0x164>
        			nfrac = (nfrac << 1) + 1 ;
        		} else {
        			nfrac <<= 1 ;
    1068:	1023883a 	mov	r17,r2
        left = vcofreq - nint*reference ;
        nfrac = 0 ;
        {
        	// Long division ...
        	int i ;
        	for( i = 0 ; i < 24 ; i++ ) {
    106c:	18c00044 	addi	r3,r3,1
        			left = left - reference ;
        			nfrac = (nfrac << 1) + 1 ;
        		} else {
        			nfrac <<= 1 ;
        		}
        		left <<= 1 ;
    1070:	8421883a 	add	r16,r16,r16
        left = vcofreq - nint*reference ;
        nfrac = 0 ;
        {
        	// Long division ...
        	int i ;
        	for( i = 0 ; i < 24 ; i++ ) {
    1074:	193ff71e 	bne	r3,r4,1054 <lms_set_frequency+0x14c>
	//nfrac <<= ((freqsel&7)-3) ;
    f.x = x ;
	f.nint = nint ;
	f.nfrac = nfrac ;
	f.freqsel = freqsel ;
	f.reference = reference ;
    1078:	008092b4 	movhi	r2,586
    107c:	10bc0004 	addi	r2,r2,-4096
	lms_print_frequency( &f ) ;
    1080:	d9000104 	addi	r4,sp,4
//        nfrac = (temp - (nint*reference))<<23 ;

    }
	//nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
	//nfrac <<= ((freqsel&7)-3) ;
    f.x = x ;
    1084:	ddc00105 	stb	r23,4(sp)
	f.nint = nint ;
	f.nfrac = nfrac ;
	f.freqsel = freqsel ;
    1088:	dd400305 	stb	r21,12(sp)
	f.reference = reference ;
    108c:	d8800415 	stw	r2,16(sp)

    }
	//nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
	//nfrac <<= ((freqsel&7)-3) ;
    f.x = x ;
	f.nint = nint ;
    1090:	dd00018d 	sth	r20,6(sp)
	f.nfrac = nfrac ;
    1094:	dc400215 	stw	r17,8(sp)
	f.freqsel = freqsel ;
	f.reference = reference ;
	lms_print_frequency( &f ) ;
    1098:	00009240 	call	924 <lms_print_frequency>

	// Program freqsel, selout (rx only), nint and nfrac
	if( mod == RX )
    109c:	e000061e 	bne	fp,zero,10b8 <lms_set_frequency+0x1b0>
	{
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
    10a0:	00965a34 	movhi	r2,22888
    10a4:	108bbfc4 	addi	r2,r2,12031
    10a8:	1485803a 	cmpltu	r2,r2,r18
    10ac:	9ccb883a 	add	r5,r19,r19
    10b0:	10800044 	addi	r2,r2,1
    10b4:	00000706 	br	10d4 <lms_set_frequency+0x1cc>
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
    10b8:	00965a34 	movhi	r2,22888
    10bc:	108bbfc4 	addi	r2,r2,12031
    10c0:	14800236 	bltu	r2,r18,10cc <lms_set_frequency+0x1c4>
    10c4:	00800044 	movi	r2,1
    10c8:	00000106 	br	10d0 <lms_set_frequency+0x1c8>
    10cc:	00800084 	movi	r2,2
    10d0:	9ccb883a 	add	r5,r19,r19
    10d4:	294b883a 	add	r5,r5,r5
    10d8:	288ab03a 	or	r5,r5,r2
    10dc:	b1000144 	addi	r4,r22,5
    10e0:	21003fcc 	andi	r4,r4,255
    10e4:	29403fcc 	andi	r5,r5,255
    10e8:	00009f00 	call	9f0 <lms_spi_write>
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
    10ec:	a0bfffcc 	andi	r2,r20,65535
    10f0:	1004d07a 	srli	r2,r2,1
	lms_spi_write( base+0, data ) ;
    10f4:	b1003fcc 	andi	r4,r22,255
	lms_spi_write( base+2, data ) ;
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
    10f8:	b4000184 	addi	r16,r22,6
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
    10fc:	11403fcc 	andi	r5,r2,255
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
    1100:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+0, data ) ;
    1104:	00009f00 	call	9f0 <lms_spi_write>
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
    1108:	8804d43a 	srli	r2,r17,16
    110c:	a0c0004c 	andi	r3,r20,1
    1110:	180691fa 	slli	r3,r3,7
    1114:	10801fcc 	andi	r2,r2,127
	lms_spi_write( base+1, data ) ;
    1118:	b1000044 	addi	r4,r22,1
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
    111c:	1886b03a 	or	r3,r3,r2
	lms_spi_write( base+1, data ) ;
    1120:	180b883a 	mov	r5,r3
    1124:	21003fcc 	andi	r4,r4,255
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
    1128:	d8c00005 	stb	r3,0(sp)
	lms_spi_write( base+1, data ) ;
    112c:	00009f00 	call	9f0 <lms_spi_write>
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
    1130:	8804d23a 	srli	r2,r17,8
	lms_spi_write( base+2, data ) ;
    1134:	b1000084 	addi	r4,r22,2
    1138:	21003fcc 	andi	r4,r4,255
    113c:	11403fcc 	andi	r5,r2,255
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
    1140:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+2, data ) ;
    1144:	00009f00 	call	9f0 <lms_spi_write>
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+3, data ) ;
    1148:	b10000c4 	addi	r4,r22,3
    114c:	89403fcc 	andi	r5,r17,255

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
    1150:	84003fcc 	andi	r16,r16,255
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+2, data ) ;
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+3, data ) ;
    1154:	21003fcc 	andi	r4,r4,255
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+2, data ) ;
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
    1158:	dc400005 	stb	r17,0(sp)
	lms_spi_write( base+3, data ) ;
    115c:	00009f00 	call	9f0 <lms_spi_write>

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
    1160:	8009883a 	mov	r4,r16
    1164:	d80b883a 	mov	r5,sp
    1168:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(0x1f) ;
	data |= 0x0c ;
    116c:	d8800003 	ldbu	r2,0(sp)
    1170:	047ff804 	movi	r17,-32
	lms_spi_write( base+6, data ) ;
    1174:	8009883a 	mov	r4,r16
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
    1178:	1444703a 	and	r2,r2,r17
    117c:	10800314 	ori	r2,r2,12
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
    1180:	b40001c4 	addi	r16,r22,7

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
	lms_spi_write( base+6, data ) ;
    1184:	11403b0c 	andi	r5,r2,236
	lms_spi_read( base+7, &data ) ;
    1188:	84003fcc 	andi	r16,r16,255
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
    118c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+6, data ) ;
    1190:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_read( base+7, &data ) ;
    1194:	8009883a 	mov	r4,r16
    1198:	d80b883a 	mov	r5,sp
    119c:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
    11a0:	8009883a 	mov	r4,r16
	lms_spi_read( base+8, &data ) ;
    11a4:	b4000204 	addi	r16,r22,8
	data |= 0x0c ;
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
    11a8:	00bff8c4 	movi	r2,-29
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
    11ac:	84003fcc 	andi	r16,r16,255
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
    11b0:	014038c4 	movi	r5,227
	data |= 0x0c ;
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
    11b4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+7, data ) ;
    11b8:	00009f00 	call	9f0 <lms_spi_write>
	lms_spi_read( base+8, &data ) ;
    11bc:	8009883a 	mov	r4,r16
    11c0:	d80b883a 	mov	r5,sp
    11c4:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(0x1f) ;
    11c8:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( base+8, data ) ;
    11cc:	8009883a 	mov	r4,r16

	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
	data &= ~(0x3f) ;
    11d0:	0027883a 	mov	r19,zero
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
	data &= ~(0x1f) ;
    11d4:	1444703a 	and	r2,r2,r17
	lms_spi_write( base+8, data ) ;
    11d8:	1140380c 	andi	r5,r2,224
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
	data &= ~(0x1f) ;
    11dc:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+8, data ) ;
    11e0:	00009f00 	call	9f0 <lms_spi_write>

	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
    11e4:	b0800244 	addi	r2,r22,9
    11e8:	14403fcc 	andi	r17,r2,255
    11ec:	8809883a 	mov	r4,r17
    11f0:	d80b883a 	mov	r5,sp
    11f4:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(0x3f) ;
    11f8:	d8800003 	ldbu	r2,0(sp)
    11fc:	0021883a 	mov	r16,zero
    1200:	1080300c 	andi	r2,r2,192
    1204:	d8800005 	stb	r2,0(sp)
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
    1208:	d8800003 	ldbu	r2,0(sp)
    120c:	00fff004 	movi	r3,-64
			lms_spi_write( base+9, data ) ;
    1210:	8809883a 	mov	r4,r17
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
    1214:	10c4703a 	and	r2,r2,r3
    1218:	8084b03a 	or	r2,r16,r2
			lms_spi_write( base+9, data ) ;
    121c:	11403fcc 	andi	r5,r2,255
			lms_spi_read( base+10, &vtune ) ;
    1220:	b4800284 	addi	r18,r22,10
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
    1224:	d8800005 	stb	r2,0(sp)
			lms_spi_write( base+9, data ) ;
    1228:	00009f00 	call	9f0 <lms_spi_write>
			lms_spi_read( base+10, &vtune ) ;
    122c:	91003fcc 	andi	r4,r18,255
    1230:	d9400044 	addi	r5,sp,1
    1234:	0000de80 	call	de8 <lms_spi_read>
			if( (vtune&0xc0) == 0xc0 )
    1238:	d8800043 	ldbu	r2,1(sp)
    123c:	00c03004 	movi	r3,192
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
    1240:	01000034 	movhi	r4,0
    1244:	210e0404 	addi	r4,r4,14352
		{
			data &= ~(0x3f) ;
			data |= i ;
			lms_spi_write( base+9, data ) ;
			lms_spi_read( base+10, &vtune ) ;
			if( (vtune&0xc0) == 0xc0 )
    1248:	1080300c 	andi	r2,r2,192
    124c:	10c0011e 	bne	r2,r3,1254 <lms_set_frequency+0x34c>
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
    1250:	00034c80 	call	34c8 <alt_putstr>
			}
			if( vtune&0x80 )
    1254:	d8800043 	ldbu	r2,1(sp)
			{
				//alt_putstr( "Setting HIGH\n" ) ;
				high = i ;
			}
			if( (vtune&0x40) && low == 64 )
    1258:	10c0100c 	andi	r3,r2,64
			lms_spi_read( base+10, &vtune ) ;
			if( (vtune&0xc0) == 0xc0 )
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
			}
			if( vtune&0x80 )
    125c:	10803fcc 	andi	r2,r2,255
    1260:	1080201c 	xori	r2,r2,128
    1264:	10bfe004 	addi	r2,r2,-128
    1268:	1000010e 	bge	r2,zero,1270 <lms_set_frequency+0x368>
    126c:	8027883a 	mov	r19,r16
			{
				//alt_putstr( "Setting HIGH\n" ) ;
				high = i ;
			}
			if( (vtune&0x40) && low == 64 )
    1270:	1800031e 	bne	r3,zero,1280 <lms_set_frequency+0x378>
    1274:	84000044 	addi	r16,r16,1
	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
	data &= ~(0x3f) ;
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
    1278:	00801004 	movi	r2,64
    127c:	80bfe21e 	bne	r16,r2,1208 <lms_set_frequency+0x300>
				break ;
			}
		}
		//alt_printf( "LOW: %x HIGH: %x VCOCAP: %x\n", low, high, (low+high)>>1 ) ;
		data &= ~(0x3f) ;
		data |= ((low+high)>>1) ;
    1280:	98803fcc 	andi	r2,r19,255
    1284:	81003fcc 	andi	r4,r16,255
    1288:	2089883a 	add	r4,r4,r2
    128c:	d8800003 	ldbu	r2,0(sp)
    1290:	2009d07a 	srai	r4,r4,1
    1294:	00fff004 	movi	r3,-64
    1298:	10c4703a 	and	r2,r2,r3
    129c:	1104b03a 	or	r2,r2,r4
		lms_spi_write( base+9, data ) ;
    12a0:	11403fcc 	andi	r5,r2,255
    12a4:	8809883a 	mov	r4,r17
				break ;
			}
		}
		//alt_printf( "LOW: %x HIGH: %x VCOCAP: %x\n", low, high, (low+high)>>1 ) ;
		data &= ~(0x3f) ;
		data |= ((low+high)>>1) ;
    12a8:	d8800005 	stb	r2,0(sp)
		lms_spi_write( base+9, data ) ;
    12ac:	00009f00 	call	9f0 <lms_spi_write>
		lms_spi_write( base+9, data ) ;
    12b0:	d9400003 	ldbu	r5,0(sp)
    12b4:	8809883a 	mov	r4,r17
    12b8:	00009f00 	call	9f0 <lms_spi_write>
		lms_spi_read( base+10, &vtune ) ;
    12bc:	91003fcc 	andi	r4,r18,255
    12c0:	d9400044 	addi	r5,sp,1
    12c4:	0000de80 	call	de8 <lms_spi_read>
		//alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
    12c8:	d80b883a 	mov	r5,sp
    12cc:	01000244 	movi	r4,9
    12d0:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(0x05) ;
    12d4:	d8800003 	ldbu	r2,0(sp)
    12d8:	00fffe84 	movi	r3,-6
	lms_spi_write( 0x09, data ) ;
    12dc:	01000244 	movi	r4,9
		//alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
	data &= ~(0x05) ;
    12e0:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x09, data ) ;
    12e4:	11403e8c 	andi	r5,r2,250
		//alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
	data &= ~(0x05) ;
    12e8:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
    12ec:	00009f00 	call	9f0 <lms_spi_write>

	return ;
}
    12f0:	dfc00e17 	ldw	ra,56(sp)
    12f4:	df000d17 	ldw	fp,52(sp)
    12f8:	ddc00c17 	ldw	r23,48(sp)
    12fc:	dd800b17 	ldw	r22,44(sp)
    1300:	dd400a17 	ldw	r21,40(sp)
    1304:	dd000917 	ldw	r20,36(sp)
    1308:	dcc00817 	ldw	r19,32(sp)
    130c:	dc800717 	ldw	r18,28(sp)
    1310:	dc400617 	ldw	r17,24(sp)
    1314:	dc000517 	ldw	r16,20(sp)
    1318:	dec00f04 	addi	sp,sp,60
    131c:	f800283a 	ret

00001320 <lms_get_frequency>:
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}

// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
    1320:	defffc04 	addi	sp,sp,-16
    1324:	dc400215 	stw	r17,8(sp)
    1328:	dc000115 	stw	r16,4(sp)
    132c:	dfc00315 	stw	ra,12(sp)
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
    1330:	04400804 	movi	r17,32
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}

// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
    1334:	2821883a 	mov	r16,r5
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
    1338:	20000126 	beq	r4,zero,1340 <lms_get_frequency+0x20>
    133c:	04400404 	movi	r17,16
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
    1340:	89003fcc 	andi	r4,r17,255
    1344:	d80b883a 	mov	r5,sp
    1348:	0000de80 	call	de8 <lms_spi_read>
	f->nint = ((uint16_t)data) << 1 ;
    134c:	d8800003 	ldbu	r2,0(sp)
	lms_spi_read( base+1, &data ) ;
    1350:	89000044 	addi	r4,r17,1
    1354:	d80b883a 	mov	r5,sp
// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
    1358:	1085883a 	add	r2,r2,r2
    135c:	8080008d 	sth	r2,2(r16)
	lms_spi_read( base+1, &data ) ;
    1360:	21003fcc 	andi	r4,r4,255
    1364:	0000de80 	call	de8 <lms_spi_read>
	f->nint |= (data&0x80)>>7 ;
    1368:	d8800003 	ldbu	r2,0(sp)
    136c:	8140008b 	ldhu	r5,2(r16)
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
    1370:	89000084 	addi	r4,r17,2
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
    1374:	10c01fcc 	andi	r3,r2,127
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
    1378:	1004d1fa 	srli	r2,r2,7
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
    137c:	1806943a 	slli	r3,r3,16
	lms_spi_read( base+2, &data ) ;
    1380:	21003fcc 	andi	r4,r4,255
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
    1384:	1144b03a 	or	r2,r2,r5
    1388:	8080008d 	sth	r2,2(r16)
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
    138c:	80c00115 	stw	r3,4(r16)
	lms_spi_read( base+2, &data ) ;
    1390:	d80b883a 	mov	r5,sp
    1394:	0000de80 	call	de8 <lms_spi_read>
	f->nfrac |= ((uint32_t)data)<<8 ;
    1398:	d8800003 	ldbu	r2,0(sp)
    139c:	80c00117 	ldw	r3,4(r16)
	lms_spi_read( base+3, &data) ;
    13a0:	890000c4 	addi	r4,r17,3
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
    13a4:	1004923a 	slli	r2,r2,8
	lms_spi_read( base+3, &data) ;
    13a8:	d80b883a 	mov	r5,sp
    13ac:	21003fcc 	andi	r4,r4,255
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
    13b0:	1886b03a 	or	r3,r3,r2
    13b4:	80c00115 	stw	r3,4(r16)
	lms_spi_read( base+3, &data) ;
    13b8:	0000de80 	call	de8 <lms_spi_read>
	f->nfrac |= data ;
    13bc:	d8c00003 	ldbu	r3,0(sp)
    13c0:	80800117 	ldw	r2,4(r16)
	lms_spi_read( base+5, &data ) ;
    13c4:	89000144 	addi	r4,r17,5
    13c8:	21003fcc 	andi	r4,r4,255
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
	lms_spi_read( base+3, &data) ;
	f->nfrac |= data ;
    13cc:	10c4b03a 	or	r2,r2,r3
    13d0:	80800115 	stw	r2,4(r16)
	lms_spi_read( base+5, &data ) ;
    13d4:	d80b883a 	mov	r5,sp
    13d8:	0000de80 	call	de8 <lms_spi_read>
	f->freqsel = (data>>2) ;
    13dc:	d9000003 	ldbu	r4,0(sp)
	f->x = 1 << ((f->freqsel&7)-3);
	f->reference = 38400000 ;
    13e0:	008092b4 	movhi	r2,586
    13e4:	10bc0004 	addi	r2,r2,-4096
    13e8:	80800315 	stw	r2,12(r16)
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
	lms_spi_read( base+3, &data) ;
	f->nfrac |= data ;
	lms_spi_read( base+5, &data ) ;
	f->freqsel = (data>>2) ;
    13ec:	2008d0ba 	srli	r4,r4,2
	f->x = 1 << ((f->freqsel&7)-3);
    13f0:	00c00044 	movi	r3,1
    13f4:	208001cc 	andi	r2,r4,7
    13f8:	10bfff44 	addi	r2,r2,-3
    13fc:	1886983a 	sll	r3,r3,r2
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
	lms_spi_read( base+3, &data) ;
	f->nfrac |= data ;
	lms_spi_read( base+5, &data ) ;
	f->freqsel = (data>>2) ;
    1400:	81000205 	stb	r4,8(r16)
	f->x = 1 << ((f->freqsel&7)-3);
    1404:	80c00005 	stb	r3,0(r16)
	f->reference = 38400000 ;
	return ;
}
    1408:	dfc00317 	ldw	ra,12(sp)
    140c:	dc400217 	ldw	r17,8(sp)
    1410:	dc000117 	ldw	r16,4(sp)
    1414:	dec00404 	addi	sp,sp,16
    1418:	f800283a 	ret

0000141c <lms_tx_disable>:
	return ;
}

// Disable the TX subsystem
void lms_tx_disable( )
{
    141c:	defffd04 	addi	sp,sp,-12
    1420:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    1424:	04000144 	movi	r16,5
    1428:	8009883a 	mov	r4,r16
    142c:	d80b883a 	mov	r5,sp
	return ;
}

// Disable the TX subsystem
void lms_tx_disable( )
{
    1430:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    1434:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(1<<3) ;
    1438:	d8800003 	ldbu	r2,0(sp)
    143c:	00fffdc4 	movi	r3,-9
	lms_spi_write( 0x05, data ) ;
    1440:	8009883a 	mov	r4,r16
// Disable the TX subsystem
void lms_tx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<3) ;
    1444:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
    1448:	11403dcc 	andi	r5,r2,247
// Disable the TX subsystem
void lms_tx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<3) ;
    144c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
    1450:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1454:	dfc00217 	ldw	ra,8(sp)
    1458:	dc000117 	ldw	r16,4(sp)
    145c:	dec00304 	addi	sp,sp,12
    1460:	f800283a 	ret

00001464 <lms_tx_enable>:
	return ;
}

// Enable the TX subsystem
void lms_tx_enable( )
{
    1464:	defffd04 	addi	sp,sp,-12
    1468:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    146c:	04000144 	movi	r16,5
    1470:	8009883a 	mov	r4,r16
    1474:	d80b883a 	mov	r5,sp
	return ;
}

// Enable the TX subsystem
void lms_tx_enable( )
{
    1478:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    147c:	0000de80 	call	de8 <lms_spi_read>
	data |= (1<<3) ;
    1480:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
    1484:	8009883a 	mov	r4,r16
// Enable the TX subsystem
void lms_tx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<3) ;
    1488:	10800214 	ori	r2,r2,8
	lms_spi_write( 0x05, data ) ;
    148c:	11403fcc 	andi	r5,r2,255
// Enable the TX subsystem
void lms_tx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<3) ;
    1490:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
    1494:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1498:	dfc00217 	ldw	ra,8(sp)
    149c:	dc000117 	ldw	r16,4(sp)
    14a0:	dec00304 	addi	sp,sp,12
    14a4:	f800283a 	ret

000014a8 <lms_rx_disable>:
	return ;
}

// Disable the RX subsystem
void lms_rx_disable( )
{
    14a8:	defffd04 	addi	sp,sp,-12
    14ac:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    14b0:	04000144 	movi	r16,5
    14b4:	8009883a 	mov	r4,r16
    14b8:	d80b883a 	mov	r5,sp
	return ;
}

// Disable the RX subsystem
void lms_rx_disable( )
{
    14bc:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    14c0:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(1<<2) ;
    14c4:	d8800003 	ldbu	r2,0(sp)
    14c8:	00fffec4 	movi	r3,-5
	lms_spi_write( 0x05, data ) ;
    14cc:	8009883a 	mov	r4,r16
// Disable the RX subsystem
void lms_rx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<2) ;
    14d0:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
    14d4:	11403ecc 	andi	r5,r2,251
// Disable the RX subsystem
void lms_rx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<2) ;
    14d8:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
    14dc:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    14e0:	dfc00217 	ldw	ra,8(sp)
    14e4:	dc000117 	ldw	r16,4(sp)
    14e8:	dec00304 	addi	sp,sp,12
    14ec:	f800283a 	ret

000014f0 <lms_rx_enable>:
	return ;
}

// Enable the RX subsystem
void lms_rx_enable( )
{
    14f0:	defffd04 	addi	sp,sp,-12
    14f4:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    14f8:	04000144 	movi	r16,5
    14fc:	8009883a 	mov	r4,r16
    1500:	d80b883a 	mov	r5,sp
	return ;
}

// Enable the RX subsystem
void lms_rx_enable( )
{
    1504:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    1508:	0000de80 	call	de8 <lms_spi_read>
	data |= (1<<2) ;
    150c:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
    1510:	8009883a 	mov	r4,r16
// Enable the RX subsystem
void lms_rx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<2) ;
    1514:	10800114 	ori	r2,r2,4
	lms_spi_write( 0x05, data ) ;
    1518:	11403fcc 	andi	r5,r2,255
// Enable the RX subsystem
void lms_rx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<2) ;
    151c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
    1520:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1524:	dfc00217 	ldw	ra,8(sp)
    1528:	dc000117 	ldw	r16,4(sp)
    152c:	dec00304 	addi	sp,sp,12
    1530:	f800283a 	ret

00001534 <lms_pll_disable>:
	return ;
}

// Disable the PLL of a module
void lms_pll_disable( lms_module_t mod )
{
    1534:	defffd04 	addi	sp,sp,-12
    1538:	dc000115 	stw	r16,4(sp)
    153c:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    1540:	04000904 	movi	r16,36
    1544:	20000126 	beq	r4,zero,154c <lms_pll_disable+0x18>
    1548:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
    154c:	84003fcc 	andi	r16,r16,255
    1550:	d80b883a 	mov	r5,sp
    1554:	8009883a 	mov	r4,r16
    1558:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(1<<3) ;
    155c:	d8800003 	ldbu	r2,0(sp)
    1560:	00fffdc4 	movi	r3,-9
	lms_spi_write( reg, data ) ;
    1564:	8009883a 	mov	r4,r16
void lms_pll_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<3) ;
    1568:	10c4703a 	and	r2,r2,r3
	lms_spi_write( reg, data ) ;
    156c:	11403dcc 	andi	r5,r2,247
void lms_pll_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<3) ;
    1570:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1574:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1578:	dfc00217 	ldw	ra,8(sp)
    157c:	dc000117 	ldw	r16,4(sp)
    1580:	dec00304 	addi	sp,sp,12
    1584:	f800283a 	ret

00001588 <lms_pll_enable>:
	return ;
}

// Enable the PLL of a module
void lms_pll_enable( lms_module_t mod )
{
    1588:	defffd04 	addi	sp,sp,-12
    158c:	dc000115 	stw	r16,4(sp)
    1590:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    1594:	04000904 	movi	r16,36
    1598:	20000126 	beq	r4,zero,15a0 <lms_pll_enable+0x18>
    159c:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
    15a0:	84003fcc 	andi	r16,r16,255
    15a4:	d80b883a 	mov	r5,sp
    15a8:	8009883a 	mov	r4,r16
    15ac:	0000de80 	call	de8 <lms_spi_read>
	data |= (1<<3) ;
    15b0:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
    15b4:	8009883a 	mov	r4,r16
void lms_pll_enable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<3) ;
    15b8:	10800214 	ori	r2,r2,8
	lms_spi_write( reg, data ) ;
    15bc:	11403fcc 	andi	r5,r2,255
void lms_pll_enable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<3) ;
    15c0:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
    15c4:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    15c8:	dfc00217 	ldw	ra,8(sp)
    15cc:	dc000117 	ldw	r16,4(sp)
    15d0:	dec00304 	addi	sp,sp,12
    15d4:	f800283a 	ret

000015d8 <lms_power_down>:
	return ;
}

// Top level power down of the LMS
void lms_power_down( )
{
    15d8:	defffd04 	addi	sp,sp,-12
    15dc:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    15e0:	04000144 	movi	r16,5
    15e4:	8009883a 	mov	r4,r16
    15e8:	d80b883a 	mov	r5,sp
	return ;
}

// Top level power down of the LMS
void lms_power_down( )
{
    15ec:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
    15f0:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(1<<4) ;
    15f4:	d8800003 	ldbu	r2,0(sp)
    15f8:	00fffbc4 	movi	r3,-17
	lms_spi_write( 0x05, data ) ;
    15fc:	8009883a 	mov	r4,r16
// Top level power down of the LMS
void lms_power_down( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<4) ;
    1600:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
    1604:	11403bcc 	andi	r5,r2,239
// Top level power down of the LMS
void lms_power_down( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<4) ;
    1608:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
    160c:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1610:	dfc00217 	ldw	ra,8(sp)
    1614:	dc000117 	ldw	r16,4(sp)
    1618:	dec00304 	addi	sp,sp,12
    161c:	f800283a 	ret

00001620 <lms_get_loopback_mode>:
	return ;
}

// Figure out what loopback mode we're in (if any at all!)
lms_loopback_mode_t lms_get_loopback_mode( )
{
    1620:	defffe04 	addi	sp,sp,-8
	uint8_t data ;
	lms_loopback_mode_t mode = LB_NONE ;
	lms_spi_read( 0x08, &data ) ;
    1624:	01000204 	movi	r4,8
    1628:	d80b883a 	mov	r5,sp
	return ;
}

// Figure out what loopback mode we're in (if any at all!)
lms_loopback_mode_t lms_get_loopback_mode( )
{
    162c:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	lms_loopback_mode_t mode = LB_NONE ;
	lms_spi_read( 0x08, &data ) ;
    1630:	0000de80 	call	de8 <lms_spi_read>
	if( data == 0 )
    1634:	d8c00003 	ldbu	r3,0(sp)
    1638:	18001926 	beq	r3,zero,16a0 <lms_get_loopback_mode+0x80>
	{
		mode = LB_NONE ;
	} else if( data&(1<<6) )
    163c:	1880100c 	andi	r2,r3,64
    1640:	10000226 	beq	r2,zero,164c <lms_get_loopback_mode+0x2c>
    1644:	0005883a 	mov	r2,zero
    1648:	00001606 	br	16a4 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_LPF ;
	} else if( data&(1<<5) )
    164c:	1880080c 	andi	r2,r3,32
    1650:	10000226 	beq	r2,zero,165c <lms_get_loopback_mode+0x3c>
    1654:	00800044 	movi	r2,1
    1658:	00001206 	br	16a4 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_VGA2 ;
	} else if( data&(1<<4) )
    165c:	1880040c 	andi	r2,r3,16
    1660:	10000226 	beq	r2,zero,166c <lms_get_loopback_mode+0x4c>
    1664:	00800084 	movi	r2,2
    1668:	00000e06 	br	16a4 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_OP ;
	} else if( (data&0xf) == 1 )
    166c:	18c003cc 	andi	r3,r3,15
    1670:	00800044 	movi	r2,1
    1674:	1880021e 	bne	r3,r2,1680 <lms_get_loopback_mode+0x60>
    1678:	00800104 	movi	r2,4
    167c:	00000906 	br	16a4 <lms_get_loopback_mode+0x84>
	{
		mode = LB_RF_LNA1 ;
	} else if( (data&0xf) == 2 )
    1680:	00800084 	movi	r2,2
    1684:	1880021e 	bne	r3,r2,1690 <lms_get_loopback_mode+0x70>
    1688:	00800144 	movi	r2,5
    168c:	00000506 	br	16a4 <lms_get_loopback_mode+0x84>
	{
		mode = LB_RF_LNA2 ;
	} else if( (data&0xf) == 3 )
    1690:	008000c4 	movi	r2,3
    1694:	1880021e 	bne	r3,r2,16a0 <lms_get_loopback_mode+0x80>
    1698:	00800184 	movi	r2,6
    169c:	00000106 	br	16a4 <lms_get_loopback_mode+0x84>
    16a0:	008001c4 	movi	r2,7
	{
		mode = LB_RF_LNA3 ;
	}
	return mode ;
}
    16a4:	dfc00117 	ldw	ra,4(sp)
    16a8:	dec00204 	addi	sp,sp,8
    16ac:	f800283a 	ret

000016b0 <lms_peakdetect_disable>:
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_disable( )
{
    16b0:	defffd04 	addi	sp,sp,-12
    16b4:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    16b8:	04001104 	movi	r16,68
    16bc:	8009883a 	mov	r4,r16
    16c0:	d80b883a 	mov	r5,sp
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_disable( )
{
    16c4:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    16c8:	0000de80 	call	de8 <lms_spi_read>
	data |= (1<<0) ;
    16cc:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
    16d0:	8009883a 	mov	r4,r16

void lms_peakdetect_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data |= (1<<0) ;
    16d4:	10800054 	ori	r2,r2,1
	lms_spi_write( 0x44, data ) ;
    16d8:	11403fcc 	andi	r5,r2,255

void lms_peakdetect_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data |= (1<<0) ;
    16dc:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
    16e0:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    16e4:	dfc00217 	ldw	ra,8(sp)
    16e8:	dc000117 	ldw	r16,4(sp)
    16ec:	dec00304 	addi	sp,sp,12
    16f0:	f800283a 	ret

000016f4 <lms_peakdetect_enable>:
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_enable( )
{
    16f4:	defffd04 	addi	sp,sp,-12
    16f8:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    16fc:	04001104 	movi	r16,68
    1700:	8009883a 	mov	r4,r16
    1704:	d80b883a 	mov	r5,sp
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_enable( )
{
    1708:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    170c:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(1<<0) ;
    1710:	d8800003 	ldbu	r2,0(sp)
    1714:	00ffff84 	movi	r3,-2
	lms_spi_write( 0x44, data ) ;
    1718:	8009883a 	mov	r4,r16

void lms_peakdetect_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data &= ~(1<<0) ;
    171c:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x44, data ) ;
    1720:	11403f8c 	andi	r5,r2,254

void lms_peakdetect_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data &= ~(1<<0) ;
    1724:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
    1728:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    172c:	dfc00217 	ldw	ra,8(sp)
    1730:	dc000117 	ldw	r16,4(sp)
    1734:	dec00304 	addi	sp,sp,12
    1738:	f800283a 	ret

0000173c <lms_pa_disable>:
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
    173c:	defffd04 	addi	sp,sp,-12
    1740:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1744:	d80b883a 	mov	r5,sp
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
    1748:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    174c:	01001104 	movi	r4,68
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
    1750:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1754:	0000de80 	call	de8 <lms_spi_read>
	if( pa == PA_ALL )
    1758:	008000c4 	movi	r2,3
    175c:	8080041e 	bne	r16,r2,1770 <lms_pa_disable+0x34>
	{
		data |= (1<<1) ;
		data &= ~(4<<2) ;
		data &= ~(2<<2) ;
    1760:	d8800003 	ldbu	r2,0(sp)
    1764:	10800094 	ori	r2,r2,2
    1768:	108039cc 	andi	r2,r2,231
    176c:	00000a06 	br	1798 <lms_pa_disable+0x5c>
	} else if( pa == PA_AUX )
    1770:	8000031e 	bne	r16,zero,1780 <lms_pa_disable+0x44>
	{
		data |= (1<<1) ;
    1774:	d8800003 	ldbu	r2,0(sp)
    1778:	10800094 	ori	r2,r2,2
    177c:	00000606 	br	1798 <lms_pa_disable+0x5c>
	} else if( pa == PA_1 )
    1780:	00800044 	movi	r2,1
    1784:	d8c00003 	ldbu	r3,0(sp)
    1788:	8080021e 	bne	r16,r2,1794 <lms_pa_disable+0x58>
	{
		data &= ~(4<<2) ;
    178c:	18803bcc 	andi	r2,r3,239
    1790:	00000106 	br	1798 <lms_pa_disable+0x5c>
	} else { // pa == PA_2
		data &= ~(2<<2) ;
    1794:	18803dcc 	andi	r2,r3,247
    1798:	d8800005 	stb	r2,0(sp)
	}
	lms_spi_write( 0x44, data ) ;
    179c:	d9400003 	ldbu	r5,0(sp)
    17a0:	01001104 	movi	r4,68
    17a4:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    17a8:	dfc00217 	ldw	ra,8(sp)
    17ac:	dc000117 	ldw	r16,4(sp)
    17b0:	dec00304 	addi	sp,sp,12
    17b4:	f800283a 	ret

000017b8 <lms_tx_loopback_disable>:
	return ;
}

// Disable TX loopback
void lms_tx_loopback_disable( lms_txlb_t mode )
{
    17b8:	defffe04 	addi	sp,sp,-8
    17bc:	2007883a 	mov	r3,r4
    17c0:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    17c4:	d80b883a 	mov	r5,sp
    17c8:	01001184 	movi	r4,70

// Disable TX loopback
void lms_tx_loopback_disable( lms_txlb_t mode )
{
	uint8_t data ;
	switch(mode)
    17cc:	18000326 	beq	r3,zero,17dc <lms_tx_loopback_disable+0x24>
    17d0:	00800044 	movi	r2,1
    17d4:	1880181e 	bne	r3,r2,1838 <lms_tx_loopback_disable+0x80>
    17d8:	00000806 	br	17fc <lms_tx_loopback_disable+0x44>
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    17dc:	0000de80 	call	de8 <lms_spi_read>
			data &= ~(3<<2) ;
    17e0:	d8800003 	ldbu	r2,0(sp)
    17e4:	00fffcc4 	movi	r3,-13
			lms_spi_write( 0x46, data ) ;
    17e8:	01001184 	movi	r4,70
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data &= ~(3<<2) ;
    17ec:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x46, data ) ;
    17f0:	11403ccc 	andi	r5,r2,243
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data &= ~(3<<2) ;
    17f4:	d8800005 	stb	r2,0(sp)
    17f8:	00000e06 	br	1834 <lms_tx_loopback_disable+0x7c>
			lms_spi_write( 0x46, data ) ;
			break ;
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
    17fc:	0009883a 	mov	r4,zero
    1800:	000173c0 	call	173c <lms_pa_disable>
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
    1804:	d80b883a 	mov	r5,sp
    1808:	010002c4 	movi	r4,11
    180c:	0000de80 	call	de8 <lms_spi_read>
			data &= ~(1<<0) ;
    1810:	d8800003 	ldbu	r2,0(sp)
    1814:	00ffff84 	movi	r3,-2
			lms_spi_write( 0x0b, data ) ;
    1818:	010002c4 	movi	r4,11
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
			data &= ~(1<<0) ;
    181c:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x0b, data ) ;
    1820:	11403f8c 	andi	r5,r2,254
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
			data &= ~(1<<0) ;
    1824:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    1828:	00009f00 	call	9f0 <lms_spi_write>
            // Power up the LNA's
            lms_spi_write( 0x70, 0 ) ;
    182c:	01001c04 	movi	r4,112
    1830:	000b883a 	mov	r5,zero
    1834:	00009f00 	call	9f0 <lms_spi_write>
			break ;
	}
	return ;
}
    1838:	dfc00117 	ldw	ra,4(sp)
    183c:	dec00204 	addi	sp,sp,8
    1840:	f800283a 	ret

00001844 <lms_pa_enable>:
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    1844:	defffd04 	addi	sp,sp,-12
    1848:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    184c:	d80b883a 	mov	r5,sp
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    1850:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1854:	01001104 	movi	r4,68
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    1858:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    185c:	0000de80 	call	de8 <lms_spi_read>
	if( pa == PA_AUX )
    1860:	8000031e 	bne	r16,zero,1870 <lms_pa_enable+0x2c>
	{
		data &= ~(1<<1) ;
    1864:	d8800003 	ldbu	r2,0(sp)
    1868:	10803f4c 	andi	r2,r2,253
    186c:	00000d06 	br	18a4 <lms_pa_enable+0x60>
	} else if( pa == PA_1 )
    1870:	00800044 	movi	r2,1
    1874:	8080051e 	bne	r16,r2,188c <lms_pa_enable+0x48>
	{
		data &= ~(3<<3) ;
		data |= (1<<3) ;
    1878:	d8800003 	ldbu	r2,0(sp)
    187c:	00fff9c4 	movi	r3,-25
    1880:	10c4703a 	and	r2,r2,r3
    1884:	10800214 	ori	r2,r2,8
    1888:	00000606 	br	18a4 <lms_pa_enable+0x60>
	} else if( pa == PA_2 )
    188c:	00800084 	movi	r2,2
    1890:	8080051e 	bne	r16,r2,18a8 <lms_pa_enable+0x64>
	{
		data &= ~(3<<3) ;
		data |= (2<<3) ;
    1894:	d8800003 	ldbu	r2,0(sp)
    1898:	00fff9c4 	movi	r3,-25
    189c:	10c4703a 	and	r2,r2,r3
    18a0:	10800414 	ori	r2,r2,16
    18a4:	d8800005 	stb	r2,0(sp)
	}
	lms_spi_write( 0x44, data ) ;
    18a8:	d9400003 	ldbu	r5,0(sp)
    18ac:	01001104 	movi	r4,68
    18b0:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    18b4:	dfc00217 	ldw	ra,8(sp)
    18b8:	dc000117 	ldw	r16,4(sp)
    18bc:	dec00304 	addi	sp,sp,12
    18c0:	f800283a 	ret

000018c4 <lms_tx_loopback_enable>:
	return ;
}

// Enable TX loopback
void lms_tx_loopback_enable( lms_txlb_t mode )
{
    18c4:	defffd04 	addi	sp,sp,-12
    18c8:	dc000115 	stw	r16,4(sp)
    18cc:	2021883a 	mov	r16,r4
    18d0:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    18d4:	d80b883a 	mov	r5,sp
    18d8:	01001184 	movi	r4,70

// Enable TX loopback
void lms_tx_loopback_enable( lms_txlb_t mode )
{
	uint8_t data ;
	switch(mode)
    18dc:	80000326 	beq	r16,zero,18ec <lms_tx_loopback_enable+0x28>
    18e0:	00800044 	movi	r2,1
    18e4:	80801f1e 	bne	r16,r2,1964 <lms_tx_loopback_enable+0xa0>
    18e8:	00000606 	br	1904 <lms_tx_loopback_enable+0x40>
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    18ec:	0000de80 	call	de8 <lms_spi_read>
			data |= (3<<2) ;
    18f0:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x46, data ) ;
    18f4:	01001184 	movi	r4,70
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data |= (3<<2) ;
    18f8:	10800314 	ori	r2,r2,12
			lms_spi_write( 0x46, data ) ;
    18fc:	11403fcc 	andi	r5,r2,255
    1900:	00001606 	br	195c <lms_tx_loopback_enable+0x98>
			break ;
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
    1904:	010000c4 	movi	r4,3
    1908:	000173c0 	call	173c <lms_pa_disable>
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
    190c:	d80b883a 	mov	r5,sp
    1910:	010002c4 	movi	r4,11
    1914:	0000de80 	call	de8 <lms_spi_read>
			data |= (1<<0) ;
    1918:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    191c:	010002c4 	movi	r4,11
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
			data |= (1<<0) ;
    1920:	8084b03a 	or	r2,r16,r2
			lms_spi_write( 0x0b, data ) ;
    1924:	11403fcc 	andi	r5,r2,255
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
			data |= (1<<0) ;
    1928:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    192c:	00009f00 	call	9f0 <lms_spi_write>
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
    1930:	0009883a 	mov	r4,zero
    1934:	00018440 	call	1844 <lms_pa_enable>
			lms_peakdetect_enable( );
    1938:	00016f40 	call	16f4 <lms_peakdetect_enable>
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
    193c:	01001144 	movi	r4,69
    1940:	d80b883a 	mov	r5,sp
    1944:	0000de80 	call	de8 <lms_spi_read>
			data &= ~(7<<0) ;
    1948:	d8800003 	ldbu	r2,0(sp)
    194c:	00fffe04 	movi	r3,-8
			lms_spi_write( 0x45, data ) ;
    1950:	01001144 	movi	r4,69
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
			lms_peakdetect_enable( );
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
			data &= ~(7<<0) ;
    1954:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x45, data ) ;
    1958:	11403e0c 	andi	r5,r2,248
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
			lms_peakdetect_enable( );
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
			data &= ~(7<<0) ;
    195c:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x45, data ) ;
    1960:	00009f00 	call	9f0 <lms_spi_write>
			break ;
	}
	return ;
}
    1964:	dfc00217 	ldw	ra,8(sp)
    1968:	dc000117 	ldw	r16,4(sp)
    196c:	dec00304 	addi	sp,sp,12
    1970:	f800283a 	ret

00001974 <lms_rxvga2_enable>:
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    1974:	defffc04 	addi	sp,sp,-16
    1978:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    197c:	04001904 	movi	r16,100
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    1980:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    1984:	d80b883a 	mov	r5,sp
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    1988:	2023883a 	mov	r17,r4
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    198c:	8009883a 	mov	r4,r16
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    1990:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    1994:	0000de80 	call	de8 <lms_spi_read>
	data |= (1<<1) ;
    1998:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    199c:	8009883a 	mov	r4,r16
// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data |= (1<<1) ;
    19a0:	10800094 	ori	r2,r2,2
	lms_spi_write( 0x64, data ) ;
    19a4:	11403fcc 	andi	r5,r2,255
// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data |= (1<<1) ;
    19a8:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    19ac:	00009f00 	call	9f0 <lms_spi_write>
	lms_rxvga2_set_gain( gain ) ;
    19b0:	89003fcc 	andi	r4,r17,255
    19b4:	0000d480 	call	d48 <lms_rxvga2_set_gain>
	return ;
}
    19b8:	dfc00317 	ldw	ra,12(sp)
    19bc:	dc400217 	ldw	r17,8(sp)
    19c0:	dc000117 	ldw	r16,4(sp)
    19c4:	dec00404 	addi	sp,sp,16
    19c8:	f800283a 	ret

000019cc <lms_rxvga2_disable>:
	return ;
}

// Disable RXVGA2
void lms_rxvga2_disable()
{
    19cc:	defffd04 	addi	sp,sp,-12
    19d0:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    19d4:	04001904 	movi	r16,100
    19d8:	8009883a 	mov	r4,r16
    19dc:	d80b883a 	mov	r5,sp
	return ;
}

// Disable RXVGA2
void lms_rxvga2_disable()
{
    19e0:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    19e4:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(1<<1) ;
    19e8:	d8800003 	ldbu	r2,0(sp)
    19ec:	00ffff44 	movi	r3,-3
	lms_spi_write( 0x64, data ) ;
    19f0:	8009883a 	mov	r4,r16
// Disable RXVGA2
void lms_rxvga2_disable()
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data &= ~(1<<1) ;
    19f4:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x64, data ) ;
    19f8:	11403f4c 	andi	r5,r2,253
// Disable RXVGA2
void lms_rxvga2_disable()
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data &= ~(1<<1) ;
    19fc:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    1a00:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1a04:	dfc00217 	ldw	ra,8(sp)
    1a08:	dc000117 	ldw	r16,4(sp)
    1a0c:	dec00304 	addi	sp,sp,12
    1a10:	f800283a 	ret

00001a14 <lms_lna_select>:
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    1a14:	defffc04 	addi	sp,sp,-16
    1a18:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1a1c:	04401d44 	movi	r17,117
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    1a20:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1a24:	d80b883a 	mov	r5,sp
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    1a28:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1a2c:	8809883a 	mov	r4,r17
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    1a30:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1a34:	840000cc 	andi	r16,r16,3

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1a38:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1a3c:	d8800003 	ldbu	r2,0(sp)
    1a40:	8020913a 	slli	r16,r16,4
    1a44:	00fff3c4 	movi	r3,-49
    1a48:	10c4703a 	and	r2,r2,r3
    1a4c:	1404b03a 	or	r2,r2,r16
	lms_spi_write( 0x75, data ) ;
    1a50:	8809883a 	mov	r4,r17
    1a54:	11403fcc 	andi	r5,r2,255
void lms_lna_select( lms_lna_t lna )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1a58:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x75, data ) ;
    1a5c:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1a60:	dfc00317 	ldw	ra,12(sp)
    1a64:	dc400217 	ldw	r17,8(sp)
    1a68:	dc000117 	ldw	r16,4(sp)
    1a6c:	dec00404 	addi	sp,sp,16
    1a70:	f800283a 	ret

00001a74 <lms_loopback_enable>:
	return ;
}

// Loopback enable
void lms_loopback_enable( lms_loopback_mode_t mode )
{
    1a74:	defffd04 	addi	sp,sp,-12
	uint8_t data ;
	switch(mode)
    1a78:	00800184 	movi	r2,6
	return ;
}

// Loopback enable
void lms_loopback_enable( lms_loopback_mode_t mode )
{
    1a7c:	dc000115 	stw	r16,4(sp)
    1a80:	dfc00215 	stw	ra,8(sp)
    1a84:	2021883a 	mov	r16,r4
	uint8_t data ;
	switch(mode)
    1a88:	11003636 	bltu	r2,r4,1b64 <lms_loopback_enable+0xf0>
    1a8c:	2105883a 	add	r2,r4,r4
    1a90:	1085883a 	add	r2,r2,r2
    1a94:	00c00034 	movhi	r3,0
    1a98:	18c6aa04 	addi	r3,r3,6824
    1a9c:	10c5883a 	add	r2,r2,r3
    1aa0:	10800017 	ldw	r2,0(r2)
    1aa4:	1000683a 	jmp	r2
    1aa8:	00001ac4 	movi	zero,107
    1aac:	00001ad8 	cmpnei	zero,zero,107
    1ab0:	00001af0 	cmpltui	zero,zero,107
    1ab4:	00001b64 	muli	zero,zero,109
    1ab8:	00001b14 	movui	zero,108
    1abc:	00001b14 	movui	zero,108
    1ac0:	00001b14 	movui	zero,108
	{
		case LB_BB_LPF:
			// Disable RXVGA1 first
			lms_rxvga1_disable() ;
    1ac4:	0000d900 	call	d90 <lms_rxvga1_disable>

			// Enable BB TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    1ac8:	0009883a 	mov	r4,zero
    1acc:	00018c40 	call	18c4 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<6 ) ;
    1ad0:	01401004 	movi	r5,64
    1ad4:	00000d06 	br	1b0c <lms_loopback_enable+0x98>
			break ;

		case LB_BB_VGA2:
			// Disable RXLPF first
			lms_lpf_disable( RX ) ;
    1ad8:	0009883a 	mov	r4,zero
    1adc:	0000dd00 	call	dd0 <lms_lpf_disable>

			// Enable TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	00018c40 	call	18c4 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<5 ) ;
    1ae8:	01400804 	movi	r5,32
    1aec:	00000706 	br	1b0c <lms_loopback_enable+0x98>
			break ;

		case LB_BB_OP:
			// Disable RXLPF, RXVGA2, and RXVGA1
			lms_rxvga1_disable() ;
    1af0:	0000d900 	call	d90 <lms_rxvga1_disable>
			lms_rxvga2_disable() ;
    1af4:	00019cc0 	call	19cc <lms_rxvga2_disable>
			lms_lpf_disable( RX ) ;
    1af8:	0009883a 	mov	r4,zero
    1afc:	0000dd00 	call	dd0 <lms_lpf_disable>

			// Enable TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    1b00:	0009883a 	mov	r4,zero
    1b04:	00018c40 	call	18c4 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<4 ) ;
    1b08:	01400404 	movi	r5,16
    1b0c:	01000204 	movi	r4,8
    1b10:	00001306 	br	1b60 <lms_loopback_enable+0xec>

		case LB_RF_LNA1:
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable all LNAs
			lms_lna_select( LNA_NONE ) ;
    1b14:	0009883a 	mov	r4,zero
    1b18:	0001a140 	call	1a14 <lms_lna_select>

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
    1b1c:	01000044 	movi	r4,1
    1b20:	00018c40 	call	18c4 <lms_tx_loopback_enable>
			lms_spi_read( 0x7d, &data ) ;
    1b24:	d80b883a 	mov	r5,sp
    1b28:	01001f44 	movi	r4,125
    1b2c:	0000de80 	call	de8 <lms_spi_read>
			data |= 1 ;
    1b30:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x7d, data ) ;
    1b34:	01001f44 	movi	r4,125
			lms_lna_select( LNA_NONE ) ;

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
			lms_spi_read( 0x7d, &data ) ;
			data |= 1 ;
    1b38:	10800054 	ori	r2,r2,1
			lms_spi_write( 0x7d, data ) ;
    1b3c:	11403fcc 	andi	r5,r2,255
			lms_lna_select( LNA_NONE ) ;

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
			lms_spi_read( 0x7d, &data ) ;
			data |= 1 ;
    1b40:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x7d, data ) ;
    1b44:	00009f00 	call	9f0 <lms_spi_write>

            // Choose the LNA (1 = LNA1, 2 = LNA2, 3 = LNA3)
            lms_spi_write( 0x08, (mode - LB_RF_LNA_START) ) ;
    1b48:	817fff44 	addi	r5,r16,-3
    1b4c:	29403fcc 	andi	r5,r5,255
    1b50:	01000204 	movi	r4,8
    1b54:	00009f00 	call	9f0 <lms_spi_write>

            // Set magical decode test registers bit
            lms_spi_write( 0x70, (1<<1) ) ;
    1b58:	01001c04 	movi	r4,112
    1b5c:	01400084 	movi	r5,2
    1b60:	00009f00 	call	9f0 <lms_spi_write>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1b64:	dfc00217 	ldw	ra,8(sp)
    1b68:	dc000117 	ldw	r16,4(sp)
    1b6c:	dec00304 	addi	sp,sp,12
    1b70:	f800283a 	ret

00001b74 <lms_lna_set_gain>:
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    1b74:	defffc04 	addi	sp,sp,-16
    1b78:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    1b7c:	04401d44 	movi	r17,117
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    1b80:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    1b84:	d80b883a 	mov	r5,sp
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    1b88:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    1b8c:	8809883a 	mov	r4,r17
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    1b90:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1b94:	840000cc 	andi	r16,r16,3

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    1b98:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1b9c:	d8800003 	ldbu	r2,0(sp)
    1ba0:	802091ba 	slli	r16,r16,6
	lms_spi_write( 0x75, data ) ;
    1ba4:	8809883a 	mov	r4,r17
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1ba8:	10800fcc 	andi	r2,r2,63
    1bac:	1404b03a 	or	r2,r2,r16
	lms_spi_write( 0x75, data ) ;
    1bb0:	100b883a 	mov	r5,r2
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1bb4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x75, data ) ;
    1bb8:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1bbc:	dfc00317 	ldw	ra,12(sp)
    1bc0:	dc400217 	ldw	r17,8(sp)
    1bc4:	dc000117 	ldw	r16,4(sp)
    1bc8:	dec00404 	addi	sp,sp,16
    1bcc:	f800283a 	ret

00001bd0 <lms_dither_disable>:
	return ;
}

// Disable dithering on the module PLL
void lms_dither_disable( lms_module_t mod )
{
    1bd0:	defffd04 	addi	sp,sp,-12
    1bd4:	dc000115 	stw	r16,4(sp)
    1bd8:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    1bdc:	04000904 	movi	r16,36
    1be0:	20000126 	beq	r4,zero,1be8 <lms_dither_disable+0x18>
    1be4:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
    1be8:	84003fcc 	andi	r16,r16,255
    1bec:	d80b883a 	mov	r5,sp
    1bf0:	8009883a 	mov	r4,r16
    1bf4:	0000de80 	call	de8 <lms_spi_read>
	data &= ~(1<<7) ;
    1bf8:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1bfc:	8009883a 	mov	r4,r16
void lms_dither_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<7) ;
    1c00:	10801fcc 	andi	r2,r2,127
	lms_spi_write( reg, data ) ;
    1c04:	100b883a 	mov	r5,r2
void lms_dither_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<7) ;
    1c08:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1c0c:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1c10:	dfc00217 	ldw	ra,8(sp)
    1c14:	dc000117 	ldw	r16,4(sp)
    1c18:	dec00304 	addi	sp,sp,12
    1c1c:	f800283a 	ret

00001c20 <lms_dither_enable>:
	return (lms_bw_t)data ;
}

// Enable dithering on the module PLL
void lms_dither_enable( lms_module_t mod, uint8_t nbits )
{
    1c20:	defffc04 	addi	sp,sp,-16
    1c24:	dc400215 	stw	r17,8(sp)
    1c28:	dc000115 	stw	r16,4(sp)
    1c2c:	dfc00315 	stw	ra,12(sp)
	// Select the base address based on which PLL we are configuring
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    1c30:	04000904 	movi	r16,36
	return (lms_bw_t)data ;
}

// Enable dithering on the module PLL
void lms_dither_enable( lms_module_t mod, uint8_t nbits )
{
    1c34:	2823883a 	mov	r17,r5
	// Select the base address based on which PLL we are configuring
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    1c38:	20000126 	beq	r4,zero,1c40 <lms_dither_enable+0x20>
    1c3c:	04000504 	movi	r16,20
	uint8_t data ;

	// Read what we currently have in there
	lms_spi_read( reg, &data ) ;
    1c40:	84003fcc 	andi	r16,r16,255
    1c44:	d80b883a 	mov	r5,sp
    1c48:	8009883a 	mov	r4,r16
    1c4c:	0000de80 	call	de8 <lms_spi_read>

	// Clear out the number of bits from before
	data &= ~(7<<4) ;

	// Put in the number of bits to dither
	data |= ((nbits-1)&7) ;
    1c50:	d8800003 	ldbu	r2,0(sp)
    1c54:	00ffe004 	movi	r3,-128
    1c58:	893fffc4 	addi	r4,r17,-1
    1c5c:	10c4b03a 	or	r2,r2,r3
    1c60:	00ffe3c4 	movi	r3,-113
    1c64:	10c4703a 	and	r2,r2,r3
    1c68:	210001cc 	andi	r4,r4,7
    1c6c:	1104b03a 	or	r2,r2,r4

	// Write it out
	lms_spi_write( reg, data ) ;
    1c70:	114023cc 	andi	r5,r2,143
    1c74:	8009883a 	mov	r4,r16

	// Clear out the number of bits from before
	data &= ~(7<<4) ;

	// Put in the number of bits to dither
	data |= ((nbits-1)&7) ;
    1c78:	d8800005 	stb	r2,0(sp)

	// Write it out
	lms_spi_write( reg, data ) ;
    1c7c:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1c80:	dfc00317 	ldw	ra,12(sp)
    1c84:	dc400217 	ldw	r17,8(sp)
    1c88:	dc000117 	ldw	r16,4(sp)
    1c8c:	dec00404 	addi	sp,sp,16
    1c90:	f800283a 	ret

00001c94 <lms_get_bandwidth>:
	return ;
}

// Get the bandwidth for the selected module
lms_bw_t lms_get_bandwidth( lms_module_t mod )
{
    1c94:	defffe04 	addi	sp,sp,-8
    1c98:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    1c9c:	00801504 	movi	r2,84
    1ca0:	20000126 	beq	r4,zero,1ca8 <lms_get_bandwidth+0x14>
    1ca4:	00800d04 	movi	r2,52
	lms_spi_read( reg, &data ) ;
    1ca8:	11003fcc 	andi	r4,r2,255
    1cac:	d80b883a 	mov	r5,sp
    1cb0:	0000de80 	call	de8 <lms_spi_read>
    1cb4:	d8800003 	ldbu	r2,0(sp)
    1cb8:	10800f0c 	andi	r2,r2,60
	data &= 0x3c ;
	data >>= 2 ;
	return (lms_bw_t)data ;
}
    1cbc:	1004d0ba 	srli	r2,r2,2
    1cc0:	dfc00117 	ldw	ra,4(sp)
    1cc4:	dec00204 	addi	sp,sp,8
    1cc8:	f800283a 	ret

00001ccc <lms_lpf_bypass>:
	}
	return ;
}

void lms_lpf_bypass( lms_module_t mod )
{
    1ccc:	defffd04 	addi	sp,sp,-12
    1cd0:	dc000115 	stw	r16,4(sp)
    1cd4:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
    1cd8:	04001544 	movi	r16,85
    1cdc:	20000126 	beq	r4,zero,1ce4 <lms_lpf_bypass+0x18>
    1ce0:	04000d44 	movi	r16,53
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
    1ce4:	84003fcc 	andi	r16,r16,255
    1ce8:	d80b883a 	mov	r5,sp
    1cec:	8009883a 	mov	r4,r16
    1cf0:	0000de80 	call	de8 <lms_spi_read>
	data |= (1<<6) ;
    1cf4:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1cf8:	8009883a 	mov	r4,r16
void lms_lpf_bypass( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<6) ;
    1cfc:	10801014 	ori	r2,r2,64
	lms_spi_write( reg, data ) ;
    1d00:	11403fcc 	andi	r5,r2,255
void lms_lpf_bypass( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<6) ;
    1d04:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1d08:	00009f00 	call	9f0 <lms_spi_write>
	return ;
}
    1d0c:	dfc00217 	ldw	ra,8(sp)
    1d10:	dc000117 	ldw	r16,4(sp)
    1d14:	dec00304 	addi	sp,sp,12
    1d18:	f800283a 	ret

00001d1c <lms_lpf_enable>:
	return ;
}

// When enabling an LPF, we must select both the module and the filter bandwidth
void lms_lpf_enable( lms_module_t mod, lms_bw_t bw )
{
    1d1c:	defffb04 	addi	sp,sp,-20
    1d20:	dc800315 	stw	r18,12(sp)
    1d24:	dc400215 	stw	r17,8(sp)
    1d28:	dfc00415 	stw	ra,16(sp)
    1d2c:	dc000115 	stw	r16,4(sp)
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    1d30:	04801504 	movi	r18,84
	return ;
}

// When enabling an LPF, we must select both the module and the filter bandwidth
void lms_lpf_enable( lms_module_t mod, lms_bw_t bw )
{
    1d34:	2823883a 	mov	r17,r5
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    1d38:	20000126 	beq	r4,zero,1d40 <lms_lpf_enable+0x24>
    1d3c:	04800d04 	movi	r18,52
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
    1d40:	94003fcc 	andi	r16,r18,255
    1d44:	d80b883a 	mov	r5,sp
    1d48:	8009883a 	mov	r4,r16
    1d4c:	0000de80 	call	de8 <lms_spi_read>
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    1d50:	d9800003 	ldbu	r6,0(sp)
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
    1d54:	00bff0c4 	movi	r2,-61
    1d58:	8c47883a 	add	r3,r17,r17
    1d5c:	3084703a 	and	r2,r6,r2
    1d60:	18c7883a 	add	r3,r3,r3
    1d64:	10800094 	ori	r2,r2,2
    1d68:	1886b03a 	or	r3,r3,r2
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    1d6c:	318003cc 	andi	r6,r6,15
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
    1d70:	8009883a 	mov	r4,r16
    1d74:	19403fcc 	andi	r5,r3,255
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    1d78:	34400226 	beq	r6,r17,1d84 <lms_lpf_enable+0x68>
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
    1d7c:	d8c00005 	stb	r3,0(sp)
		lms_spi_write( reg, data ) ;
    1d80:	00009f00 	call	9f0 <lms_spi_write>
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
    1d84:	94000044 	addi	r16,r18,1
    1d88:	84003fcc 	andi	r16,r16,255
    1d8c:	d80b883a 	mov	r5,sp
    1d90:	8009883a 	mov	r4,r16
    1d94:	0000de80 	call	de8 <lms_spi_read>
	if( data&(1<<6) )
    1d98:	d8c00003 	ldbu	r3,0(sp)
	{
		data &= ~(1<<6) ;
    1d9c:	00bfefc4 	movi	r2,-65
		lms_spi_write( reg+1, data ) ;
    1da0:	8009883a 	mov	r4,r16
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
	{
		data &= ~(1<<6) ;
    1da4:	1884703a 	and	r2,r3,r2
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
    1da8:	18c0100c 	andi	r3,r3,64
	{
		data &= ~(1<<6) ;
		lms_spi_write( reg+1, data ) ;
    1dac:	11402fcc 	andi	r5,r2,191
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
    1db0:	18000226 	beq	r3,zero,1dbc <lms_lpf_enable+0xa0>
	{
		data &= ~(1<<6) ;
    1db4:	d8800005 	stb	r2,0(sp)
		lms_spi_write( reg+1, data ) ;
    1db8:	00009f00 	call	9f0 <lms_spi_write>
	}
	return ;
}
    1dbc:	dfc00417 	ldw	ra,16(sp)
    1dc0:	dc800317 	ldw	r18,12(sp)
    1dc4:	dc400217 	ldw	r17,8(sp)
    1dc8:	dc000117 	ldw	r16,4(sp)
    1dcc:	dec00504 	addi	sp,sp,20
    1dd0:	f800283a 	ret

00001dd4 <lms_loopback_disable>:
	return mode ;
}

// Disable loopback mode - must choose which LNA to hook up and what bandwidth you want
void lms_loopback_disable( lms_lna_t lna, lms_bw_t bw )
{
    1dd4:	defffc04 	addi	sp,sp,-16
    1dd8:	dfc00315 	stw	ra,12(sp)
    1ddc:	dc800215 	stw	r18,8(sp)
    1de0:	dc400115 	stw	r17,4(sp)
    1de4:	dc000015 	stw	r16,0(sp)
    1de8:	2025883a 	mov	r18,r4
    1dec:	2823883a 	mov	r17,r5
	// Read which type of loopback mode we were in
	lms_loopback_mode_t mode = lms_get_loopback_mode() ;
    1df0:	00016200 	call	1620 <lms_get_loopback_mode>

	// Disable all RX loopback modes
	lms_spi_write( 0x08, 0 ) ;
    1df4:	01000204 	movi	r4,8
    1df8:	000b883a 	mov	r5,zero

// Disable loopback mode - must choose which LNA to hook up and what bandwidth you want
void lms_loopback_disable( lms_lna_t lna, lms_bw_t bw )
{
	// Read which type of loopback mode we were in
	lms_loopback_mode_t mode = lms_get_loopback_mode() ;
    1dfc:	1021883a 	mov	r16,r2

	// Disable all RX loopback modes
	lms_spi_write( 0x08, 0 ) ;
    1e00:	00009f00 	call	9f0 <lms_spi_write>

	switch(mode)
    1e04:	00800184 	movi	r2,6
    1e08:	14003136 	bltu	r2,r16,1ed0 <lms_loopback_disable+0xfc>
    1e0c:	8405883a 	add	r2,r16,r16
    1e10:	1085883a 	add	r2,r2,r2
    1e14:	00c00034 	movhi	r3,0
    1e18:	18c78a04 	addi	r3,r3,7720
    1e1c:	10c5883a 	add	r2,r2,r3
    1e20:	10800017 	ldw	r2,0(r2)
    1e24:	1000683a 	jmp	r2
    1e28:	00001e44 	movi	zero,121
    1e2c:	00001e50 	cmplti	zero,zero,121
    1e30:	00001e78 	rdprs	zero,zero,121
    1e34:	00001ed0 	cmplti	zero,zero,123
    1e38:	00001eac 	andhi	zero,zero,122
    1e3c:	00001eac 	andhi	zero,zero,122
    1e40:	00001eac 	andhi	zero,zero,122
	{
		case LB_BB_LPF:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    1e44:	0009883a 	mov	r4,zero
    1e48:	00017b80 	call	17b8 <lms_tx_loopback_disable>
    1e4c:	00001106 	br	1e94 <lms_loopback_disable+0xc0>
			// Enable RXVGA1
			lms_rxvga1_enable() ;
			break ;
		case LB_BB_VGA2:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    1e50:	0009883a 	mov	r4,zero
    1e54:	00017b80 	call	17b8 <lms_tx_loopback_disable>
			// Enable RXLPF
			lms_lpf_enable( RX, bw ) ;
    1e58:	880b883a 	mov	r5,r17
    1e5c:	0009883a 	mov	r4,zero
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1e60:	dfc00317 	ldw	ra,12(sp)
    1e64:	dc800217 	ldw	r18,8(sp)
    1e68:	dc400117 	ldw	r17,4(sp)
    1e6c:	dc000017 	ldw	r16,0(sp)
    1e70:	dec00404 	addi	sp,sp,16
			break ;
		case LB_BB_VGA2:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
			// Enable RXLPF
			lms_lpf_enable( RX, bw ) ;
    1e74:	0001d1c1 	jmpi	1d1c <lms_lpf_enable>
			break ;
		case LB_BB_OP:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    1e78:	0009883a 	mov	r4,zero
    1e7c:	00017b80 	call	17b8 <lms_tx_loopback_disable>
			// Enable RXLPF, RXVGA1 and RXVGA2
			lms_lpf_enable( RX, bw ) ;
    1e80:	880b883a 	mov	r5,r17
    1e84:	0009883a 	mov	r4,zero
    1e88:	0001d1c0 	call	1d1c <lms_lpf_enable>
			lms_rxvga2_enable( 30/3 ) ;
    1e8c:	01000284 	movi	r4,10
    1e90:	00019740 	call	1974 <lms_rxvga2_enable>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1e94:	dfc00317 	ldw	ra,12(sp)
    1e98:	dc800217 	ldw	r18,8(sp)
    1e9c:	dc400117 	ldw	r17,4(sp)
    1ea0:	dc000017 	ldw	r16,0(sp)
    1ea4:	dec00404 	addi	sp,sp,16
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
			// Enable RXLPF, RXVGA1 and RXVGA2
			lms_lpf_enable( RX, bw ) ;
			lms_rxvga2_enable( 30/3 ) ;
			lms_rxvga1_enable() ;
    1ea8:	0000d841 	jmpi	d84 <lms_rxvga1_enable>
			break ;
		case LB_RF_LNA1:
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable TX RF loopback
			lms_tx_loopback_disable( TXLB_RF ) ;
    1eac:	01000044 	movi	r4,1
    1eb0:	00017b80 	call	17b8 <lms_tx_loopback_disable>
			// Enable selected LNA
			lms_lna_select( lna ) ;
    1eb4:	9009883a 	mov	r4,r18
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1eb8:	dfc00317 	ldw	ra,12(sp)
    1ebc:	dc800217 	ldw	r18,8(sp)
    1ec0:	dc400117 	ldw	r17,4(sp)
    1ec4:	dc000017 	ldw	r16,0(sp)
    1ec8:	dec00404 	addi	sp,sp,16
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable TX RF loopback
			lms_tx_loopback_disable( TXLB_RF ) ;
			// Enable selected LNA
			lms_lna_select( lna ) ;
    1ecc:	0001a141 	jmpi	1a14 <lms_lna_select>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1ed0:	dfc00317 	ldw	ra,12(sp)
    1ed4:	dc800217 	ldw	r18,8(sp)
    1ed8:	dc400117 	ldw	r17,4(sp)
    1edc:	dc000017 	ldw	r16,0(sp)
    1ee0:	dec00404 	addi	sp,sp,16
    1ee4:	f800283a 	ret

00001ee8 <lms_config_init>:
	return ;
}


int lms_config_init(xcvr_config_t *config)
{
    1ee8:	defffe04 	addi	sp,sp,-8
    1eec:	dfc00115 	stw	ra,4(sp)
    1ef0:	dc000015 	stw	r16,0(sp)
    1ef4:	2021883a 	mov	r16,r4

  lms_soft_reset() ;
    1ef8:	0000d9c0 	call	d9c <lms_soft_reset>
  lms_lpf_init() ;
    1efc:	0000a380 	call	a38 <lms_lpf_init>
  lms_tx_enable() ;
    1f00:	00014640 	call	1464 <lms_tx_enable>
  lms_rx_enable() ;
    1f04:	00014f00 	call	14f0 <lms_rx_enable>

  lms_spi_write( 0x48, 20 ) ;
    1f08:	01001204 	movi	r4,72
    1f0c:	01400504 	movi	r5,20
    1f10:	00009f00 	call	9f0 <lms_spi_write>
  lms_spi_write( 0x49, 20 ) ;
    1f14:	01001244 	movi	r4,73
    1f18:	01400504 	movi	r5,20
    1f1c:	00009f00 	call	9f0 <lms_spi_write>

  lms_set_frequency( RX,  config->rx_freq_hz ) ;
    1f20:	81400117 	ldw	r5,4(r16)
    1f24:	0009883a 	mov	r4,zero
    1f28:	0000f080 	call	f08 <lms_set_frequency>
  lms_set_frequency( TX,  config->tx_freq_hz ) ;
    1f2c:	81400017 	ldw	r5,0(r16)
    1f30:	01000044 	movi	r4,1
    1f34:	0000f080 	call	f08 <lms_set_frequency>

  lms_lna_select( config->lna  ) ;
    1f38:	81000317 	ldw	r4,12(r16)
    1f3c:	0001a140 	call	1a14 <lms_lna_select>
  lms_pa_enable( config->pa ) ;
    1f40:	81000417 	ldw	r4,16(r16)
    1f44:	00018440 	call	1844 <lms_pa_enable>

  if( config->loopback_mode == LB_NONE ) {
    1f48:	80c00217 	ldw	r3,8(r16)
    1f4c:	008001c4 	movi	r2,7
	  lms_loopback_disable( config->lna, config->bw ) ;
  } else {
	  lms_loopback_enable(config->loopback_mode);
    1f50:	1809883a 	mov	r4,r3
  lms_set_frequency( TX,  config->tx_freq_hz ) ;

  lms_lna_select( config->lna  ) ;
  lms_pa_enable( config->pa ) ;

  if( config->loopback_mode == LB_NONE ) {
    1f54:	1880041e 	bne	r3,r2,1f68 <lms_config_init+0x80>
	  lms_loopback_disable( config->lna, config->bw ) ;
    1f58:	81400517 	ldw	r5,20(r16)
    1f5c:	81000317 	ldw	r4,12(r16)
    1f60:	0001dd40 	call	1dd4 <lms_loopback_disable>
    1f64:	00000106 	br	1f6c <lms_config_init+0x84>
  } else {
	  lms_loopback_enable(config->loopback_mode);
    1f68:	0001a740 	call	1a74 <lms_loopback_enable>
  }

  return 0;
}
    1f6c:	0005883a 	mov	r2,zero
    1f70:	dfc00117 	ldw	ra,4(sp)
    1f74:	dc000017 	ldw	r16,0(sp)
    1f78:	dec00204 	addi	sp,sp,8
    1f7c:	f800283a 	ret

00001f80 <dac_write>:

     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1f80:	defff704 	addi	sp,sp,-36
    1f84:	dc000415 	stw	r16,16(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
    1f88:	243fffcc 	andi	r16,r4,65535

     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1f8c:	dcc00715 	stw	r19,28(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
    1f90:	800b883a 	mov	r5,r16

     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1f94:	2027883a 	mov	r19,r4
	alt_printf( "DAC Writing: %x\n", val ) ;
    1f98:	01000034 	movhi	r4,0
    1f9c:	210e0804 	addi	r4,r4,14368

     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1fa0:	dfc00815 	stw	ra,32(sp)
    1fa4:	dc800615 	stw	r18,24(sp)
    1fa8:	dc400515 	stw	r17,20(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    1fac:	048000c4 	movi	r18,3
     0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
    1fb0:	00033340 	call	3334 <alt_printf>
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    1fb4:	044000b4 	movhi	r17,2
    1fb8:	8c540004 	addi	r17,r17,20480
    1fbc:	8809883a 	mov	r4,r17
    1fc0:	900d883a 	mov	r6,r18
    1fc4:	d9c00304 	addi	r7,sp,12
    1fc8:	000b883a 	mov	r5,zero

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
    1fcc:	00800a04 	movi	r2,40
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    1fd0:	8020d23a 	srli	r16,r16,8

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
    1fd4:	d8800305 	stb	r2,12(sp)
    1fd8:	d8000345 	stb	zero,13(sp)
    1fdc:	d8000385 	stb	zero,14(sp)
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    1fe0:	d8000015 	stw	zero,0(sp)
    1fe4:	d8000115 	stw	zero,4(sp)
    1fe8:	d8000215 	stw	zero,8(sp)
    1fec:	00035d00 	call	35d0 <alt_avalon_spi_command>
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    1ff0:	00800204 	movi	r2,8
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0) ;
    1ff4:	8809883a 	mov	r4,r17
    1ff8:	900d883a 	mov	r6,r18
    1ffc:	000b883a 	mov	r5,zero
    2000:	d9c00304 	addi	r7,sp,12
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    2004:	d8800305 	stb	r2,12(sp)
    2008:	dc000345 	stb	r16,13(sp)
    200c:	dcc00385 	stb	r19,14(sp)
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0) ;
    2010:	d8000015 	stw	zero,0(sp)
    2014:	d8000115 	stw	zero,4(sp)
    2018:	d8000215 	stw	zero,8(sp)
    201c:	00035d00 	call	35d0 <alt_avalon_spi_command>
	return ;
}
    2020:	dfc00817 	ldw	ra,32(sp)
    2024:	dcc00717 	ldw	r19,28(sp)
    2028:	dc800617 	ldw	r18,24(sp)
    202c:	dc400517 	ldw	r17,20(sp)
    2030:	dc000417 	ldw	r16,16(sp)
    2034:	dec00904 	addi	sp,sp,36
    2038:	f800283a 	ret

0000203c <__muldi3>:
    203c:	defff204 	addi	sp,sp,-56
    2040:	df000c15 	stw	fp,48(sp)
    2044:	3038d43a 	srli	fp,r6,16
    2048:	dd000815 	stw	r20,32(sp)
    204c:	dc400515 	stw	r17,20(sp)
    2050:	2028d43a 	srli	r20,r4,16
    2054:	247fffcc 	andi	r17,r4,65535
    2058:	dc000415 	stw	r16,16(sp)
    205c:	343fffcc 	andi	r16,r6,65535
    2060:	dcc00715 	stw	r19,28(sp)
    2064:	d9000015 	stw	r4,0(sp)
    2068:	2827883a 	mov	r19,r5
    206c:	8809883a 	mov	r4,r17
    2070:	d9400115 	stw	r5,4(sp)
    2074:	800b883a 	mov	r5,r16
    2078:	d9800215 	stw	r6,8(sp)
    207c:	dfc00d15 	stw	ra,52(sp)
    2080:	d9c00315 	stw	r7,12(sp)
    2084:	dd800a15 	stw	r22,40(sp)
    2088:	dd400915 	stw	r21,36(sp)
    208c:	302d883a 	mov	r22,r6
    2090:	ddc00b15 	stw	r23,44(sp)
    2094:	dc800615 	stw	r18,24(sp)
    2098:	00029180 	call	2918 <__mulsi3>
    209c:	8809883a 	mov	r4,r17
    20a0:	e00b883a 	mov	r5,fp
    20a4:	102b883a 	mov	r21,r2
    20a8:	00029180 	call	2918 <__mulsi3>
    20ac:	800b883a 	mov	r5,r16
    20b0:	a009883a 	mov	r4,r20
    20b4:	1023883a 	mov	r17,r2
    20b8:	00029180 	call	2918 <__mulsi3>
    20bc:	a009883a 	mov	r4,r20
    20c0:	e00b883a 	mov	r5,fp
    20c4:	1021883a 	mov	r16,r2
    20c8:	00029180 	call	2918 <__mulsi3>
    20cc:	a8ffffcc 	andi	r3,r21,65535
    20d0:	a82ad43a 	srli	r21,r21,16
    20d4:	8c23883a 	add	r17,r17,r16
    20d8:	1011883a 	mov	r8,r2
    20dc:	ac6b883a 	add	r21,r21,r17
    20e0:	a804943a 	slli	r2,r21,16
    20e4:	b009883a 	mov	r4,r22
    20e8:	980b883a 	mov	r5,r19
    20ec:	10c7883a 	add	r3,r2,r3
    20f0:	a812d43a 	srli	r9,r21,16
    20f4:	180d883a 	mov	r6,r3
    20f8:	ac00022e 	bgeu	r21,r16,2104 <__muldi3+0xc8>
    20fc:	00800074 	movhi	r2,1
    2100:	4091883a 	add	r8,r8,r2
    2104:	4267883a 	add	r19,r8,r9
    2108:	302d883a 	mov	r22,r6
    210c:	00029180 	call	2918 <__mulsi3>
    2110:	d9400317 	ldw	r5,12(sp)
    2114:	d9000017 	ldw	r4,0(sp)
    2118:	1023883a 	mov	r17,r2
    211c:	00029180 	call	2918 <__mulsi3>
    2120:	14cb883a 	add	r5,r2,r19
    2124:	894b883a 	add	r5,r17,r5
    2128:	b005883a 	mov	r2,r22
    212c:	2807883a 	mov	r3,r5
    2130:	dfc00d17 	ldw	ra,52(sp)
    2134:	df000c17 	ldw	fp,48(sp)
    2138:	ddc00b17 	ldw	r23,44(sp)
    213c:	dd800a17 	ldw	r22,40(sp)
    2140:	dd400917 	ldw	r21,36(sp)
    2144:	dd000817 	ldw	r20,32(sp)
    2148:	dcc00717 	ldw	r19,28(sp)
    214c:	dc800617 	ldw	r18,24(sp)
    2150:	dc400517 	ldw	r17,20(sp)
    2154:	dc000417 	ldw	r16,16(sp)
    2158:	dec00e04 	addi	sp,sp,56
    215c:	f800283a 	ret

00002160 <__udivdi3>:
    2160:	defff104 	addi	sp,sp,-60
    2164:	0015883a 	mov	r10,zero
    2168:	2005883a 	mov	r2,r4
    216c:	3011883a 	mov	r8,r6
    2170:	df000d15 	stw	fp,52(sp)
    2174:	dd400a15 	stw	r21,40(sp)
    2178:	dcc00815 	stw	r19,32(sp)
    217c:	dfc00e15 	stw	ra,56(sp)
    2180:	ddc00c15 	stw	r23,48(sp)
    2184:	dd800b15 	stw	r22,44(sp)
    2188:	dd000915 	stw	r20,36(sp)
    218c:	dc800715 	stw	r18,28(sp)
    2190:	dc400615 	stw	r17,24(sp)
    2194:	dc000515 	stw	r16,20(sp)
    2198:	da800315 	stw	r10,12(sp)
    219c:	4027883a 	mov	r19,r8
    21a0:	1039883a 	mov	fp,r2
    21a4:	282b883a 	mov	r21,r5
    21a8:	da800415 	stw	r10,16(sp)
    21ac:	3800401e 	bne	r7,zero,22b0 <__udivdi3+0x150>
    21b0:	2a006536 	bltu	r5,r8,2348 <__udivdi3+0x1e8>
    21b4:	4000b526 	beq	r8,zero,248c <__udivdi3+0x32c>
    21b8:	00bfffd4 	movui	r2,65535
    21bc:	14c0ad36 	bltu	r2,r19,2474 <__udivdi3+0x314>
    21c0:	00803fc4 	movi	r2,255
    21c4:	14c15e36 	bltu	r2,r19,2740 <__udivdi3+0x5e0>
    21c8:	000b883a 	mov	r5,zero
    21cc:	0005883a 	mov	r2,zero
    21d0:	9884d83a 	srl	r2,r19,r2
    21d4:	01000034 	movhi	r4,0
    21d8:	210e5804 	addi	r4,r4,14688
    21dc:	01800804 	movi	r6,32
    21e0:	1105883a 	add	r2,r2,r4
    21e4:	10c00003 	ldbu	r3,0(r2)
    21e8:	28c7883a 	add	r3,r5,r3
    21ec:	30e9c83a 	sub	r20,r6,r3
    21f0:	a0010a1e 	bne	r20,zero,261c <__udivdi3+0x4bc>
    21f4:	982ed43a 	srli	r23,r19,16
    21f8:	acebc83a 	sub	r21,r21,r19
    21fc:	9dbfffcc 	andi	r22,r19,65535
    2200:	05000044 	movi	r20,1
    2204:	a809883a 	mov	r4,r21
    2208:	b80b883a 	mov	r5,r23
    220c:	00029080 	call	2908 <__udivsi3>
    2210:	100b883a 	mov	r5,r2
    2214:	b009883a 	mov	r4,r22
    2218:	1021883a 	mov	r16,r2
    221c:	00029180 	call	2918 <__mulsi3>
    2220:	a809883a 	mov	r4,r21
    2224:	b80b883a 	mov	r5,r23
    2228:	1023883a 	mov	r17,r2
    222c:	00029100 	call	2910 <__umodsi3>
    2230:	1004943a 	slli	r2,r2,16
    2234:	e006d43a 	srli	r3,fp,16
    2238:	10c4b03a 	or	r2,r2,r3
    223c:	1440042e 	bgeu	r2,r17,2250 <__udivdi3+0xf0>
    2240:	14c5883a 	add	r2,r2,r19
    2244:	843fffc4 	addi	r16,r16,-1
    2248:	14c00136 	bltu	r2,r19,2250 <__udivdi3+0xf0>
    224c:	14415c36 	bltu	r2,r17,27c0 <__udivdi3+0x660>
    2250:	1463c83a 	sub	r17,r2,r17
    2254:	8809883a 	mov	r4,r17
    2258:	b80b883a 	mov	r5,r23
    225c:	00029080 	call	2908 <__udivsi3>
    2260:	100b883a 	mov	r5,r2
    2264:	b009883a 	mov	r4,r22
    2268:	102b883a 	mov	r21,r2
    226c:	00029180 	call	2918 <__mulsi3>
    2270:	8809883a 	mov	r4,r17
    2274:	b80b883a 	mov	r5,r23
    2278:	1025883a 	mov	r18,r2
    227c:	00029100 	call	2910 <__umodsi3>
    2280:	1004943a 	slli	r2,r2,16
    2284:	e0ffffcc 	andi	r3,fp,65535
    2288:	10c4b03a 	or	r2,r2,r3
    228c:	1480042e 	bgeu	r2,r18,22a0 <__udivdi3+0x140>
    2290:	9885883a 	add	r2,r19,r2
    2294:	ad7fffc4 	addi	r21,r21,-1
    2298:	14c00136 	bltu	r2,r19,22a0 <__udivdi3+0x140>
    229c:	14813c36 	bltu	r2,r18,2790 <__udivdi3+0x630>
    22a0:	8004943a 	slli	r2,r16,16
    22a4:	a009883a 	mov	r4,r20
    22a8:	a884b03a 	or	r2,r21,r2
    22ac:	00001506 	br	2304 <__udivdi3+0x1a4>
    22b0:	380d883a 	mov	r6,r7
    22b4:	29c06c36 	bltu	r5,r7,2468 <__udivdi3+0x308>
    22b8:	00bfffd4 	movui	r2,65535
    22bc:	11c06436 	bltu	r2,r7,2450 <__udivdi3+0x2f0>
    22c0:	00803fc4 	movi	r2,255
    22c4:	11c11836 	bltu	r2,r7,2728 <__udivdi3+0x5c8>
    22c8:	000b883a 	mov	r5,zero
    22cc:	0005883a 	mov	r2,zero
    22d0:	3084d83a 	srl	r2,r6,r2
    22d4:	01000034 	movhi	r4,0
    22d8:	210e5804 	addi	r4,r4,14688
    22dc:	01c00804 	movi	r7,32
    22e0:	1105883a 	add	r2,r2,r4
    22e4:	10c00003 	ldbu	r3,0(r2)
    22e8:	28c7883a 	add	r3,r5,r3
    22ec:	38edc83a 	sub	r22,r7,r3
    22f0:	b000731e 	bne	r22,zero,24c0 <__udivdi3+0x360>
    22f4:	35400136 	bltu	r6,r21,22fc <__udivdi3+0x19c>
    22f8:	e4c05b36 	bltu	fp,r19,2468 <__udivdi3+0x308>
    22fc:	00800044 	movi	r2,1
    2300:	0009883a 	mov	r4,zero
    2304:	d8800315 	stw	r2,12(sp)
    2308:	d9400317 	ldw	r5,12(sp)
    230c:	2007883a 	mov	r3,r4
    2310:	d9000415 	stw	r4,16(sp)
    2314:	2805883a 	mov	r2,r5
    2318:	dfc00e17 	ldw	ra,56(sp)
    231c:	df000d17 	ldw	fp,52(sp)
    2320:	ddc00c17 	ldw	r23,48(sp)
    2324:	dd800b17 	ldw	r22,44(sp)
    2328:	dd400a17 	ldw	r21,40(sp)
    232c:	dd000917 	ldw	r20,36(sp)
    2330:	dcc00817 	ldw	r19,32(sp)
    2334:	dc800717 	ldw	r18,28(sp)
    2338:	dc400617 	ldw	r17,24(sp)
    233c:	dc000517 	ldw	r16,20(sp)
    2340:	dec00f04 	addi	sp,sp,60
    2344:	f800283a 	ret
    2348:	00bfffd4 	movui	r2,65535
    234c:	12005636 	bltu	r2,r8,24a8 <__udivdi3+0x348>
    2350:	00803fc4 	movi	r2,255
    2354:	12010036 	bltu	r2,r8,2758 <__udivdi3+0x5f8>
    2358:	000b883a 	mov	r5,zero
    235c:	0005883a 	mov	r2,zero
    2360:	9884d83a 	srl	r2,r19,r2
    2364:	01000034 	movhi	r4,0
    2368:	210e5804 	addi	r4,r4,14688
    236c:	01800804 	movi	r6,32
    2370:	1105883a 	add	r2,r2,r4
    2374:	10c00003 	ldbu	r3,0(r2)
    2378:	28c7883a 	add	r3,r5,r3
    237c:	30cbc83a 	sub	r5,r6,r3
    2380:	28000626 	beq	r5,zero,239c <__udivdi3+0x23c>
    2384:	3145c83a 	sub	r2,r6,r5
    2388:	e084d83a 	srl	r2,fp,r2
    238c:	a946983a 	sll	r3,r21,r5
    2390:	e178983a 	sll	fp,fp,r5
    2394:	9966983a 	sll	r19,r19,r5
    2398:	18aab03a 	or	r21,r3,r2
    239c:	982ed43a 	srli	r23,r19,16
    23a0:	a809883a 	mov	r4,r21
    23a4:	9cbfffcc 	andi	r18,r19,65535
    23a8:	b80b883a 	mov	r5,r23
    23ac:	00029080 	call	2908 <__udivsi3>
    23b0:	100b883a 	mov	r5,r2
    23b4:	9009883a 	mov	r4,r18
    23b8:	1021883a 	mov	r16,r2
    23bc:	00029180 	call	2918 <__mulsi3>
    23c0:	a809883a 	mov	r4,r21
    23c4:	b80b883a 	mov	r5,r23
    23c8:	1023883a 	mov	r17,r2
    23cc:	00029100 	call	2910 <__umodsi3>
    23d0:	1004943a 	slli	r2,r2,16
    23d4:	e006d43a 	srli	r3,fp,16
    23d8:	10c4b03a 	or	r2,r2,r3
    23dc:	1440042e 	bgeu	r2,r17,23f0 <__udivdi3+0x290>
    23e0:	14c5883a 	add	r2,r2,r19
    23e4:	843fffc4 	addi	r16,r16,-1
    23e8:	14c00136 	bltu	r2,r19,23f0 <__udivdi3+0x290>
    23ec:	1440ea36 	bltu	r2,r17,2798 <__udivdi3+0x638>
    23f0:	1463c83a 	sub	r17,r2,r17
    23f4:	8809883a 	mov	r4,r17
    23f8:	b80b883a 	mov	r5,r23
    23fc:	00029080 	call	2908 <__udivsi3>
    2400:	100b883a 	mov	r5,r2
    2404:	9009883a 	mov	r4,r18
    2408:	102b883a 	mov	r21,r2
    240c:	00029180 	call	2918 <__mulsi3>
    2410:	8809883a 	mov	r4,r17
    2414:	b80b883a 	mov	r5,r23
    2418:	1025883a 	mov	r18,r2
    241c:	00029100 	call	2910 <__umodsi3>
    2420:	1004943a 	slli	r2,r2,16
    2424:	e0ffffcc 	andi	r3,fp,65535
    2428:	10c4b03a 	or	r2,r2,r3
    242c:	1480042e 	bgeu	r2,r18,2440 <__udivdi3+0x2e0>
    2430:	9885883a 	add	r2,r19,r2
    2434:	ad7fffc4 	addi	r21,r21,-1
    2438:	14c00136 	bltu	r2,r19,2440 <__udivdi3+0x2e0>
    243c:	1480d936 	bltu	r2,r18,27a4 <__udivdi3+0x644>
    2440:	8004943a 	slli	r2,r16,16
    2444:	0009883a 	mov	r4,zero
    2448:	a884b03a 	or	r2,r21,r2
    244c:	003fad06 	br	2304 <__udivdi3+0x1a4>
    2450:	00804034 	movhi	r2,256
    2454:	10bfffc4 	addi	r2,r2,-1
    2458:	11c0b636 	bltu	r2,r7,2734 <__udivdi3+0x5d4>
    245c:	01400404 	movi	r5,16
    2460:	2805883a 	mov	r2,r5
    2464:	003f9a06 	br	22d0 <__udivdi3+0x170>
    2468:	0005883a 	mov	r2,zero
    246c:	0009883a 	mov	r4,zero
    2470:	003fa406 	br	2304 <__udivdi3+0x1a4>
    2474:	00804034 	movhi	r2,256
    2478:	10bfffc4 	addi	r2,r2,-1
    247c:	14c0b336 	bltu	r2,r19,274c <__udivdi3+0x5ec>
    2480:	01400404 	movi	r5,16
    2484:	2805883a 	mov	r2,r5
    2488:	003f5106 	br	21d0 <__udivdi3+0x70>
    248c:	01000044 	movi	r4,1
    2490:	000b883a 	mov	r5,zero
    2494:	00029080 	call	2908 <__udivsi3>
    2498:	1027883a 	mov	r19,r2
    249c:	00bfffd4 	movui	r2,65535
    24a0:	14fff436 	bltu	r2,r19,2474 <__udivdi3+0x314>
    24a4:	003f4606 	br	21c0 <__udivdi3+0x60>
    24a8:	00804034 	movhi	r2,256
    24ac:	10bfffc4 	addi	r2,r2,-1
    24b0:	1200ac36 	bltu	r2,r8,2764 <__udivdi3+0x604>
    24b4:	01400404 	movi	r5,16
    24b8:	2805883a 	mov	r2,r5
    24bc:	003fa806 	br	2360 <__udivdi3+0x200>
    24c0:	3d85c83a 	sub	r2,r7,r22
    24c4:	3588983a 	sll	r4,r6,r22
    24c8:	9886d83a 	srl	r3,r19,r2
    24cc:	a8a2d83a 	srl	r17,r21,r2
    24d0:	e084d83a 	srl	r2,fp,r2
    24d4:	20eeb03a 	or	r23,r4,r3
    24d8:	b824d43a 	srli	r18,r23,16
    24dc:	ad86983a 	sll	r3,r21,r22
    24e0:	8809883a 	mov	r4,r17
    24e4:	900b883a 	mov	r5,r18
    24e8:	1886b03a 	or	r3,r3,r2
    24ec:	d8c00115 	stw	r3,4(sp)
    24f0:	bc3fffcc 	andi	r16,r23,65535
    24f4:	00029080 	call	2908 <__udivsi3>
    24f8:	100b883a 	mov	r5,r2
    24fc:	8009883a 	mov	r4,r16
    2500:	1029883a 	mov	r20,r2
    2504:	00029180 	call	2918 <__mulsi3>
    2508:	900b883a 	mov	r5,r18
    250c:	8809883a 	mov	r4,r17
    2510:	102b883a 	mov	r21,r2
    2514:	00029100 	call	2910 <__umodsi3>
    2518:	d9400117 	ldw	r5,4(sp)
    251c:	1004943a 	slli	r2,r2,16
    2520:	9da6983a 	sll	r19,r19,r22
    2524:	2806d43a 	srli	r3,r5,16
    2528:	10c4b03a 	or	r2,r2,r3
    252c:	1540032e 	bgeu	r2,r21,253c <__udivdi3+0x3dc>
    2530:	15c5883a 	add	r2,r2,r23
    2534:	a53fffc4 	addi	r20,r20,-1
    2538:	15c0912e 	bgeu	r2,r23,2780 <__udivdi3+0x620>
    253c:	1563c83a 	sub	r17,r2,r21
    2540:	8809883a 	mov	r4,r17
    2544:	900b883a 	mov	r5,r18
    2548:	00029080 	call	2908 <__udivsi3>
    254c:	100b883a 	mov	r5,r2
    2550:	8009883a 	mov	r4,r16
    2554:	102b883a 	mov	r21,r2
    2558:	00029180 	call	2918 <__mulsi3>
    255c:	8809883a 	mov	r4,r17
    2560:	900b883a 	mov	r5,r18
    2564:	1021883a 	mov	r16,r2
    2568:	00029100 	call	2910 <__umodsi3>
    256c:	da800117 	ldw	r10,4(sp)
    2570:	1004943a 	slli	r2,r2,16
    2574:	50ffffcc 	andi	r3,r10,65535
    2578:	10c6b03a 	or	r3,r2,r3
    257c:	1c00032e 	bgeu	r3,r16,258c <__udivdi3+0x42c>
    2580:	1dc7883a 	add	r3,r3,r23
    2584:	ad7fffc4 	addi	r21,r21,-1
    2588:	1dc0792e 	bgeu	r3,r23,2770 <__udivdi3+0x610>
    258c:	a004943a 	slli	r2,r20,16
    2590:	982ed43a 	srli	r23,r19,16
    2594:	9cffffcc 	andi	r19,r19,65535
    2598:	a8a4b03a 	or	r18,r21,r2
    259c:	947fffcc 	andi	r17,r18,65535
    25a0:	902ad43a 	srli	r21,r18,16
    25a4:	8809883a 	mov	r4,r17
    25a8:	980b883a 	mov	r5,r19
    25ac:	1c21c83a 	sub	r16,r3,r16
    25b0:	00029180 	call	2918 <__mulsi3>
    25b4:	8809883a 	mov	r4,r17
    25b8:	b80b883a 	mov	r5,r23
    25bc:	1029883a 	mov	r20,r2
    25c0:	00029180 	call	2918 <__mulsi3>
    25c4:	980b883a 	mov	r5,r19
    25c8:	a809883a 	mov	r4,r21
    25cc:	1023883a 	mov	r17,r2
    25d0:	00029180 	call	2918 <__mulsi3>
    25d4:	a809883a 	mov	r4,r21
    25d8:	b80b883a 	mov	r5,r23
    25dc:	1027883a 	mov	r19,r2
    25e0:	00029180 	call	2918 <__mulsi3>
    25e4:	1009883a 	mov	r4,r2
    25e8:	a004d43a 	srli	r2,r20,16
    25ec:	8ce3883a 	add	r17,r17,r19
    25f0:	1447883a 	add	r3,r2,r17
    25f4:	1cc0022e 	bgeu	r3,r19,2600 <__udivdi3+0x4a0>
    25f8:	00800074 	movhi	r2,1
    25fc:	2089883a 	add	r4,r4,r2
    2600:	1804d43a 	srli	r2,r3,16
    2604:	2085883a 	add	r2,r4,r2
    2608:	80804436 	bltu	r16,r2,271c <__udivdi3+0x5bc>
    260c:	80803e26 	beq	r16,r2,2708 <__udivdi3+0x5a8>
    2610:	9005883a 	mov	r2,r18
    2614:	0009883a 	mov	r4,zero
    2618:	003f3a06 	br	2304 <__udivdi3+0x1a4>
    261c:	9d26983a 	sll	r19,r19,r20
    2620:	3505c83a 	sub	r2,r6,r20
    2624:	a8a2d83a 	srl	r17,r21,r2
    2628:	982ed43a 	srli	r23,r19,16
    262c:	e084d83a 	srl	r2,fp,r2
    2630:	ad06983a 	sll	r3,r21,r20
    2634:	8809883a 	mov	r4,r17
    2638:	b80b883a 	mov	r5,r23
    263c:	1886b03a 	or	r3,r3,r2
    2640:	d8c00015 	stw	r3,0(sp)
    2644:	9dbfffcc 	andi	r22,r19,65535
    2648:	00029080 	call	2908 <__udivsi3>
    264c:	100b883a 	mov	r5,r2
    2650:	b009883a 	mov	r4,r22
    2654:	d8800215 	stw	r2,8(sp)
    2658:	00029180 	call	2918 <__mulsi3>
    265c:	8809883a 	mov	r4,r17
    2660:	b80b883a 	mov	r5,r23
    2664:	102b883a 	mov	r21,r2
    2668:	00029100 	call	2910 <__umodsi3>
    266c:	d9000017 	ldw	r4,0(sp)
    2670:	1004943a 	slli	r2,r2,16
    2674:	2006d43a 	srli	r3,r4,16
    2678:	10c4b03a 	or	r2,r2,r3
    267c:	1540052e 	bgeu	r2,r21,2694 <__udivdi3+0x534>
    2680:	d9400217 	ldw	r5,8(sp)
    2684:	14c5883a 	add	r2,r2,r19
    2688:	297fffc4 	addi	r5,r5,-1
    268c:	d9400215 	stw	r5,8(sp)
    2690:	14c0462e 	bgeu	r2,r19,27ac <__udivdi3+0x64c>
    2694:	1563c83a 	sub	r17,r2,r21
    2698:	8809883a 	mov	r4,r17
    269c:	b80b883a 	mov	r5,r23
    26a0:	00029080 	call	2908 <__udivsi3>
    26a4:	100b883a 	mov	r5,r2
    26a8:	b009883a 	mov	r4,r22
    26ac:	1025883a 	mov	r18,r2
    26b0:	00029180 	call	2918 <__mulsi3>
    26b4:	8809883a 	mov	r4,r17
    26b8:	b80b883a 	mov	r5,r23
    26bc:	1021883a 	mov	r16,r2
    26c0:	00029100 	call	2910 <__umodsi3>
    26c4:	da800017 	ldw	r10,0(sp)
    26c8:	1004943a 	slli	r2,r2,16
    26cc:	50ffffcc 	andi	r3,r10,65535
    26d0:	10c6b03a 	or	r3,r2,r3
    26d4:	1c00062e 	bgeu	r3,r16,26f0 <__udivdi3+0x590>
    26d8:	1cc7883a 	add	r3,r3,r19
    26dc:	94bfffc4 	addi	r18,r18,-1
    26e0:	1cc00336 	bltu	r3,r19,26f0 <__udivdi3+0x590>
    26e4:	1c00022e 	bgeu	r3,r16,26f0 <__udivdi3+0x590>
    26e8:	94bfffc4 	addi	r18,r18,-1
    26ec:	1cc7883a 	add	r3,r3,r19
    26f0:	d9000217 	ldw	r4,8(sp)
    26f4:	e538983a 	sll	fp,fp,r20
    26f8:	1c2bc83a 	sub	r21,r3,r16
    26fc:	2004943a 	slli	r2,r4,16
    2700:	90a8b03a 	or	r20,r18,r2
    2704:	003ebf06 	br	2204 <__udivdi3+0xa4>
    2708:	1804943a 	slli	r2,r3,16
    270c:	e588983a 	sll	r4,fp,r22
    2710:	a0ffffcc 	andi	r3,r20,65535
    2714:	10c5883a 	add	r2,r2,r3
    2718:	20bfbd2e 	bgeu	r4,r2,2610 <__udivdi3+0x4b0>
    271c:	90bfffc4 	addi	r2,r18,-1
    2720:	0009883a 	mov	r4,zero
    2724:	003ef706 	br	2304 <__udivdi3+0x1a4>
    2728:	01400204 	movi	r5,8
    272c:	2805883a 	mov	r2,r5
    2730:	003ee706 	br	22d0 <__udivdi3+0x170>
    2734:	01400604 	movi	r5,24
    2738:	2805883a 	mov	r2,r5
    273c:	003ee406 	br	22d0 <__udivdi3+0x170>
    2740:	01400204 	movi	r5,8
    2744:	2805883a 	mov	r2,r5
    2748:	003ea106 	br	21d0 <__udivdi3+0x70>
    274c:	01400604 	movi	r5,24
    2750:	2805883a 	mov	r2,r5
    2754:	003e9e06 	br	21d0 <__udivdi3+0x70>
    2758:	01400204 	movi	r5,8
    275c:	2805883a 	mov	r2,r5
    2760:	003eff06 	br	2360 <__udivdi3+0x200>
    2764:	01400604 	movi	r5,24
    2768:	2805883a 	mov	r2,r5
    276c:	003efc06 	br	2360 <__udivdi3+0x200>
    2770:	1c3f862e 	bgeu	r3,r16,258c <__udivdi3+0x42c>
    2774:	1dc7883a 	add	r3,r3,r23
    2778:	ad7fffc4 	addi	r21,r21,-1
    277c:	003f8306 	br	258c <__udivdi3+0x42c>
    2780:	157f6e2e 	bgeu	r2,r21,253c <__udivdi3+0x3dc>
    2784:	a53fffc4 	addi	r20,r20,-1
    2788:	15c5883a 	add	r2,r2,r23
    278c:	003f6b06 	br	253c <__udivdi3+0x3dc>
    2790:	ad7fffc4 	addi	r21,r21,-1
    2794:	003ec206 	br	22a0 <__udivdi3+0x140>
    2798:	843fffc4 	addi	r16,r16,-1
    279c:	14c5883a 	add	r2,r2,r19
    27a0:	003f1306 	br	23f0 <__udivdi3+0x290>
    27a4:	ad7fffc4 	addi	r21,r21,-1
    27a8:	003f2506 	br	2440 <__udivdi3+0x2e0>
    27ac:	157fb92e 	bgeu	r2,r21,2694 <__udivdi3+0x534>
    27b0:	297fffc4 	addi	r5,r5,-1
    27b4:	14c5883a 	add	r2,r2,r19
    27b8:	d9400215 	stw	r5,8(sp)
    27bc:	003fb506 	br	2694 <__udivdi3+0x534>
    27c0:	843fffc4 	addi	r16,r16,-1
    27c4:	14c5883a 	add	r2,r2,r19
    27c8:	003ea106 	br	2250 <__udivdi3+0xf0>

000027cc <udivmodsi4>:
    27cc:	29001b2e 	bgeu	r5,r4,283c <udivmodsi4+0x70>
    27d0:	28001a16 	blt	r5,zero,283c <udivmodsi4+0x70>
    27d4:	00800044 	movi	r2,1
    27d8:	0007883a 	mov	r3,zero
    27dc:	01c007c4 	movi	r7,31
    27e0:	00000306 	br	27f0 <udivmodsi4+0x24>
    27e4:	19c01326 	beq	r3,r7,2834 <udivmodsi4+0x68>
    27e8:	18c00044 	addi	r3,r3,1
    27ec:	28000416 	blt	r5,zero,2800 <udivmodsi4+0x34>
    27f0:	294b883a 	add	r5,r5,r5
    27f4:	1085883a 	add	r2,r2,r2
    27f8:	293ffa36 	bltu	r5,r4,27e4 <udivmodsi4+0x18>
    27fc:	10000d26 	beq	r2,zero,2834 <udivmodsi4+0x68>
    2800:	0007883a 	mov	r3,zero
    2804:	21400236 	bltu	r4,r5,2810 <udivmodsi4+0x44>
    2808:	2149c83a 	sub	r4,r4,r5
    280c:	1886b03a 	or	r3,r3,r2
    2810:	1004d07a 	srli	r2,r2,1
    2814:	280ad07a 	srli	r5,r5,1
    2818:	103ffa1e 	bne	r2,zero,2804 <udivmodsi4+0x38>
    281c:	30000226 	beq	r6,zero,2828 <udivmodsi4+0x5c>
    2820:	2005883a 	mov	r2,r4
    2824:	f800283a 	ret
    2828:	1809883a 	mov	r4,r3
    282c:	2005883a 	mov	r2,r4
    2830:	f800283a 	ret
    2834:	0007883a 	mov	r3,zero
    2838:	003ff806 	br	281c <udivmodsi4+0x50>
    283c:	00800044 	movi	r2,1
    2840:	0007883a 	mov	r3,zero
    2844:	003fef06 	br	2804 <udivmodsi4+0x38>

00002848 <__divsi3>:
    2848:	defffe04 	addi	sp,sp,-8
    284c:	dc000015 	stw	r16,0(sp)
    2850:	dfc00115 	stw	ra,4(sp)
    2854:	0021883a 	mov	r16,zero
    2858:	20000c16 	blt	r4,zero,288c <__divsi3+0x44>
    285c:	000d883a 	mov	r6,zero
    2860:	28000e16 	blt	r5,zero,289c <__divsi3+0x54>
    2864:	00027cc0 	call	27cc <udivmodsi4>
    2868:	1007883a 	mov	r3,r2
    286c:	8005003a 	cmpeq	r2,r16,zero
    2870:	1000011e 	bne	r2,zero,2878 <__divsi3+0x30>
    2874:	00c7c83a 	sub	r3,zero,r3
    2878:	1805883a 	mov	r2,r3
    287c:	dfc00117 	ldw	ra,4(sp)
    2880:	dc000017 	ldw	r16,0(sp)
    2884:	dec00204 	addi	sp,sp,8
    2888:	f800283a 	ret
    288c:	0109c83a 	sub	r4,zero,r4
    2890:	04000044 	movi	r16,1
    2894:	000d883a 	mov	r6,zero
    2898:	283ff20e 	bge	r5,zero,2864 <__divsi3+0x1c>
    289c:	014bc83a 	sub	r5,zero,r5
    28a0:	8021003a 	cmpeq	r16,r16,zero
    28a4:	003fef06 	br	2864 <__divsi3+0x1c>

000028a8 <__modsi3>:
    28a8:	deffff04 	addi	sp,sp,-4
    28ac:	dfc00015 	stw	ra,0(sp)
    28b0:	01800044 	movi	r6,1
    28b4:	2807883a 	mov	r3,r5
    28b8:	20000416 	blt	r4,zero,28cc <__modsi3+0x24>
    28bc:	28000c16 	blt	r5,zero,28f0 <__modsi3+0x48>
    28c0:	dfc00017 	ldw	ra,0(sp)
    28c4:	dec00104 	addi	sp,sp,4
    28c8:	00027cc1 	jmpi	27cc <udivmodsi4>
    28cc:	0109c83a 	sub	r4,zero,r4
    28d0:	28000b16 	blt	r5,zero,2900 <__modsi3+0x58>
    28d4:	180b883a 	mov	r5,r3
    28d8:	01800044 	movi	r6,1
    28dc:	00027cc0 	call	27cc <udivmodsi4>
    28e0:	0085c83a 	sub	r2,zero,r2
    28e4:	dfc00017 	ldw	ra,0(sp)
    28e8:	dec00104 	addi	sp,sp,4
    28ec:	f800283a 	ret
    28f0:	014bc83a 	sub	r5,zero,r5
    28f4:	dfc00017 	ldw	ra,0(sp)
    28f8:	dec00104 	addi	sp,sp,4
    28fc:	00027cc1 	jmpi	27cc <udivmodsi4>
    2900:	0147c83a 	sub	r3,zero,r5
    2904:	003ff306 	br	28d4 <__modsi3+0x2c>

00002908 <__udivsi3>:
    2908:	000d883a 	mov	r6,zero
    290c:	00027cc1 	jmpi	27cc <udivmodsi4>

00002910 <__umodsi3>:
    2910:	01800044 	movi	r6,1
    2914:	00027cc1 	jmpi	27cc <udivmodsi4>

00002918 <__mulsi3>:
    2918:	20000a26 	beq	r4,zero,2944 <__mulsi3+0x2c>
    291c:	0007883a 	mov	r3,zero
    2920:	2080004c 	andi	r2,r4,1
    2924:	1005003a 	cmpeq	r2,r2,zero
    2928:	2008d07a 	srli	r4,r4,1
    292c:	1000011e 	bne	r2,zero,2934 <__mulsi3+0x1c>
    2930:	1947883a 	add	r3,r3,r5
    2934:	294b883a 	add	r5,r5,r5
    2938:	203ff91e 	bne	r4,zero,2920 <__mulsi3+0x8>
    293c:	1805883a 	mov	r2,r3
    2940:	f800283a 	ret
    2944:	0007883a 	mov	r3,zero
    2948:	1805883a 	mov	r2,r3
    294c:	f800283a 	ret

00002950 <printf>:
    2950:	defffb04 	addi	sp,sp,-20
    2954:	dfc00115 	stw	ra,4(sp)
    2958:	d9400215 	stw	r5,8(sp)
    295c:	d9800315 	stw	r6,12(sp)
    2960:	d9c00415 	stw	r7,16(sp)
    2964:	00800034 	movhi	r2,0
    2968:	108ed004 	addi	r2,r2,15168
    296c:	11400017 	ldw	r5,0(r2)
    2970:	d8800204 	addi	r2,sp,8
    2974:	d8800015 	stw	r2,0(sp)
    2978:	29c00217 	ldw	r7,8(r5)
    297c:	100d883a 	mov	r6,r2
    2980:	00800034 	movhi	r2,0
    2984:	108c4a04 	addi	r2,r2,12584
    2988:	200b883a 	mov	r5,r4
    298c:	38800115 	stw	r2,4(r7)
    2990:	3809883a 	mov	r4,r7
    2994:	00031040 	call	3104 <__vfprintf_internal>
    2998:	dfc00117 	ldw	ra,4(sp)
    299c:	dec00504 	addi	sp,sp,20
    29a0:	f800283a 	ret

000029a4 <_printf_r>:
    29a4:	defffc04 	addi	sp,sp,-16
    29a8:	dfc00115 	stw	ra,4(sp)
    29ac:	d9800215 	stw	r6,8(sp)
    29b0:	d9c00315 	stw	r7,12(sp)
    29b4:	22000217 	ldw	r8,8(r4)
    29b8:	d8800204 	addi	r2,sp,8
    29bc:	d8800015 	stw	r2,0(sp)
    29c0:	100f883a 	mov	r7,r2
    29c4:	00800034 	movhi	r2,0
    29c8:	108c4a04 	addi	r2,r2,12584
    29cc:	280d883a 	mov	r6,r5
    29d0:	40800115 	stw	r2,4(r8)
    29d4:	400b883a 	mov	r5,r8
    29d8:	0002a680 	call	2a68 <___vfprintf_internal_r>
    29dc:	dfc00117 	ldw	ra,4(sp)
    29e0:	dec00404 	addi	sp,sp,16
    29e4:	f800283a 	ret

000029e8 <print_repeat>:
    29e8:	defffb04 	addi	sp,sp,-20
    29ec:	dc800315 	stw	r18,12(sp)
    29f0:	dc400215 	stw	r17,8(sp)
    29f4:	dc000115 	stw	r16,4(sp)
    29f8:	dfc00415 	stw	ra,16(sp)
    29fc:	2025883a 	mov	r18,r4
    2a00:	2823883a 	mov	r17,r5
    2a04:	3821883a 	mov	r16,r7
    2a08:	d9800005 	stb	r6,0(sp)
    2a0c:	9009883a 	mov	r4,r18
    2a10:	880b883a 	mov	r5,r17
    2a14:	d80d883a 	mov	r6,sp
    2a18:	01c00044 	movi	r7,1
    2a1c:	04000b0e 	bge	zero,r16,2a4c <print_repeat+0x64>
    2a20:	88c00117 	ldw	r3,4(r17)
    2a24:	843fffc4 	addi	r16,r16,-1
    2a28:	183ee83a 	callr	r3
    2a2c:	103ff726 	beq	r2,zero,2a0c <print_repeat+0x24>
    2a30:	00bfffc4 	movi	r2,-1
    2a34:	dfc00417 	ldw	ra,16(sp)
    2a38:	dc800317 	ldw	r18,12(sp)
    2a3c:	dc400217 	ldw	r17,8(sp)
    2a40:	dc000117 	ldw	r16,4(sp)
    2a44:	dec00504 	addi	sp,sp,20
    2a48:	f800283a 	ret
    2a4c:	0005883a 	mov	r2,zero
    2a50:	dfc00417 	ldw	ra,16(sp)
    2a54:	dc800317 	ldw	r18,12(sp)
    2a58:	dc400217 	ldw	r17,8(sp)
    2a5c:	dc000117 	ldw	r16,4(sp)
    2a60:	dec00504 	addi	sp,sp,20
    2a64:	f800283a 	ret

00002a68 <___vfprintf_internal_r>:
    2a68:	deffe304 	addi	sp,sp,-116
    2a6c:	df001b15 	stw	fp,108(sp)
    2a70:	ddc01a15 	stw	r23,104(sp)
    2a74:	dd001715 	stw	r20,92(sp)
    2a78:	dc801515 	stw	r18,84(sp)
    2a7c:	dc001315 	stw	r16,76(sp)
    2a80:	dfc01c15 	stw	ra,112(sp)
    2a84:	dd801915 	stw	r22,100(sp)
    2a88:	dd401815 	stw	r21,96(sp)
    2a8c:	dcc01615 	stw	r19,88(sp)
    2a90:	dc401415 	stw	r17,80(sp)
    2a94:	d9001015 	stw	r4,64(sp)
    2a98:	2829883a 	mov	r20,r5
    2a9c:	d9c01115 	stw	r7,68(sp)
    2aa0:	3025883a 	mov	r18,r6
    2aa4:	0021883a 	mov	r16,zero
    2aa8:	d8000f15 	stw	zero,60(sp)
    2aac:	d8000e15 	stw	zero,56(sp)
    2ab0:	0039883a 	mov	fp,zero
    2ab4:	d8000915 	stw	zero,36(sp)
    2ab8:	d8000d15 	stw	zero,52(sp)
    2abc:	d8000c15 	stw	zero,48(sp)
    2ac0:	d8000b15 	stw	zero,44(sp)
    2ac4:	002f883a 	mov	r23,zero
    2ac8:	91400003 	ldbu	r5,0(r18)
    2acc:	01c00044 	movi	r7,1
    2ad0:	94800044 	addi	r18,r18,1
    2ad4:	29003fcc 	andi	r4,r5,255
    2ad8:	2100201c 	xori	r4,r4,128
    2adc:	213fe004 	addi	r4,r4,-128
    2ae0:	20001526 	beq	r4,zero,2b38 <___vfprintf_internal_r+0xd0>
    2ae4:	81c03526 	beq	r16,r7,2bbc <___vfprintf_internal_r+0x154>
    2ae8:	3c002016 	blt	r7,r16,2b6c <___vfprintf_internal_r+0x104>
    2aec:	803ff61e 	bne	r16,zero,2ac8 <___vfprintf_internal_r+0x60>
    2af0:	00800944 	movi	r2,37
    2af4:	2081501e 	bne	r4,r2,3038 <___vfprintf_internal_r+0x5d0>
    2af8:	073fffc4 	movi	fp,-1
    2afc:	00800284 	movi	r2,10
    2b00:	d9c00c15 	stw	r7,48(sp)
    2b04:	d8000f15 	stw	zero,60(sp)
    2b08:	d8000e15 	stw	zero,56(sp)
    2b0c:	df000915 	stw	fp,36(sp)
    2b10:	d8800d15 	stw	r2,52(sp)
    2b14:	d8000b15 	stw	zero,44(sp)
    2b18:	91400003 	ldbu	r5,0(r18)
    2b1c:	3821883a 	mov	r16,r7
    2b20:	94800044 	addi	r18,r18,1
    2b24:	29003fcc 	andi	r4,r5,255
    2b28:	2100201c 	xori	r4,r4,128
    2b2c:	213fe004 	addi	r4,r4,-128
    2b30:	01c00044 	movi	r7,1
    2b34:	203feb1e 	bne	r4,zero,2ae4 <___vfprintf_internal_r+0x7c>
    2b38:	b805883a 	mov	r2,r23
    2b3c:	dfc01c17 	ldw	ra,112(sp)
    2b40:	df001b17 	ldw	fp,108(sp)
    2b44:	ddc01a17 	ldw	r23,104(sp)
    2b48:	dd801917 	ldw	r22,100(sp)
    2b4c:	dd401817 	ldw	r21,96(sp)
    2b50:	dd001717 	ldw	r20,92(sp)
    2b54:	dcc01617 	ldw	r19,88(sp)
    2b58:	dc801517 	ldw	r18,84(sp)
    2b5c:	dc401417 	ldw	r17,80(sp)
    2b60:	dc001317 	ldw	r16,76(sp)
    2b64:	dec01d04 	addi	sp,sp,116
    2b68:	f800283a 	ret
    2b6c:	00800084 	movi	r2,2
    2b70:	80801726 	beq	r16,r2,2bd0 <___vfprintf_internal_r+0x168>
    2b74:	008000c4 	movi	r2,3
    2b78:	80bfd31e 	bne	r16,r2,2ac8 <___vfprintf_internal_r+0x60>
    2b7c:	2c7ff404 	addi	r17,r5,-48
    2b80:	88c03fcc 	andi	r3,r17,255
    2b84:	00800244 	movi	r2,9
    2b88:	10c02136 	bltu	r2,r3,2c10 <___vfprintf_internal_r+0x1a8>
    2b8c:	d8c00917 	ldw	r3,36(sp)
    2b90:	18012716 	blt	r3,zero,3030 <___vfprintf_internal_r+0x5c8>
    2b94:	d9000917 	ldw	r4,36(sp)
    2b98:	01400284 	movi	r5,10
    2b9c:	00029180 	call	2918 <__mulsi3>
    2ba0:	1007883a 	mov	r3,r2
    2ba4:	88803fcc 	andi	r2,r17,255
    2ba8:	1080201c 	xori	r2,r2,128
    2bac:	10bfe004 	addi	r2,r2,-128
    2bb0:	1887883a 	add	r3,r3,r2
    2bb4:	d8c00915 	stw	r3,36(sp)
    2bb8:	003fc306 	br	2ac8 <___vfprintf_internal_r+0x60>
    2bbc:	00800c04 	movi	r2,48
    2bc0:	2080b326 	beq	r4,r2,2e90 <___vfprintf_internal_r+0x428>
    2bc4:	00800944 	movi	r2,37
    2bc8:	20812726 	beq	r4,r2,3068 <___vfprintf_internal_r+0x600>
    2bcc:	04000084 	movi	r16,2
    2bd0:	2c7ff404 	addi	r17,r5,-48
    2bd4:	88c03fcc 	andi	r3,r17,255
    2bd8:	00800244 	movi	r2,9
    2bdc:	10c00a36 	bltu	r2,r3,2c08 <___vfprintf_internal_r+0x1a0>
    2be0:	e000b416 	blt	fp,zero,2eb4 <___vfprintf_internal_r+0x44c>
    2be4:	e009883a 	mov	r4,fp
    2be8:	01400284 	movi	r5,10
    2bec:	00029180 	call	2918 <__mulsi3>
    2bf0:	1007883a 	mov	r3,r2
    2bf4:	88803fcc 	andi	r2,r17,255
    2bf8:	1080201c 	xori	r2,r2,128
    2bfc:	10bfe004 	addi	r2,r2,-128
    2c00:	18b9883a 	add	fp,r3,r2
    2c04:	003fb006 	br	2ac8 <___vfprintf_internal_r+0x60>
    2c08:	00800b84 	movi	r2,46
    2c0c:	2080a326 	beq	r4,r2,2e9c <___vfprintf_internal_r+0x434>
    2c10:	00801b04 	movi	r2,108
    2c14:	2080a326 	beq	r4,r2,2ea4 <___vfprintf_internal_r+0x43c>
    2c18:	d8c00917 	ldw	r3,36(sp)
    2c1c:	1800a716 	blt	r3,zero,2ebc <___vfprintf_internal_r+0x454>
    2c20:	d8000f15 	stw	zero,60(sp)
    2c24:	28bfea04 	addi	r2,r5,-88
    2c28:	10803fcc 	andi	r2,r2,255
    2c2c:	00c00804 	movi	r3,32
    2c30:	18802836 	bltu	r3,r2,2cd4 <___vfprintf_internal_r+0x26c>
    2c34:	1085883a 	add	r2,r2,r2
    2c38:	1085883a 	add	r2,r2,r2
    2c3c:	00c00034 	movhi	r3,0
    2c40:	18cb1404 	addi	r3,r3,11344
    2c44:	10c5883a 	add	r2,r2,r3
    2c48:	11000017 	ldw	r4,0(r2)
    2c4c:	2000683a 	jmp	r4
    2c50:	00002cdc 	xori	zero,zero,179
    2c54:	00002cd4 	movui	zero,179
    2c58:	00002cd4 	movui	zero,179
    2c5c:	00002cd4 	movui	zero,179
    2c60:	00002cd4 	movui	zero,179
    2c64:	00002cd4 	movui	zero,179
    2c68:	00002cd4 	movui	zero,179
    2c6c:	00002cd4 	movui	zero,179
    2c70:	00002cd4 	movui	zero,179
    2c74:	00002cd4 	movui	zero,179
    2c78:	00002cd4 	movui	zero,179
    2c7c:	00002f08 	cmpgei	zero,zero,188
    2c80:	00002cf0 	cmpltui	zero,zero,179
    2c84:	00002cd4 	movui	zero,179
    2c88:	00002cd4 	movui	zero,179
    2c8c:	00002cd4 	movui	zero,179
    2c90:	00002cd4 	movui	zero,179
    2c94:	00002cf0 	cmpltui	zero,zero,179
    2c98:	00002cd4 	movui	zero,179
    2c9c:	00002cd4 	movui	zero,179
    2ca0:	00002cd4 	movui	zero,179
    2ca4:	00002cd4 	movui	zero,179
    2ca8:	00002cd4 	movui	zero,179
    2cac:	00002f70 	cmpltui	zero,zero,189
    2cb0:	00002cd4 	movui	zero,179
    2cb4:	00002cd4 	movui	zero,179
    2cb8:	00002cd4 	movui	zero,179
    2cbc:	00002f80 	call	2f8 <main+0x94>
    2cc0:	00002cd4 	movui	zero,179
    2cc4:	00002e54 	movui	zero,185
    2cc8:	00002cd4 	movui	zero,179
    2ccc:	00002cd4 	movui	zero,179
    2cd0:	00002e4c 	andi	zero,zero,185
    2cd4:	0021883a 	mov	r16,zero
    2cd8:	003f7b06 	br	2ac8 <___vfprintf_internal_r+0x60>
    2cdc:	00c00404 	movi	r3,16
    2ce0:	00800044 	movi	r2,1
    2ce4:	d8c00d15 	stw	r3,52(sp)
    2ce8:	d8000c15 	stw	zero,48(sp)
    2cec:	d8800b15 	stw	r2,44(sp)
    2cf0:	d8c00e17 	ldw	r3,56(sp)
    2cf4:	1805003a 	cmpeq	r2,r3,zero
    2cf8:	10005a1e 	bne	r2,zero,2e64 <___vfprintf_internal_r+0x3fc>
    2cfc:	d8800c17 	ldw	r2,48(sp)
    2d00:	1000781e 	bne	r2,zero,2ee4 <___vfprintf_internal_r+0x47c>
    2d04:	d8801117 	ldw	r2,68(sp)
    2d08:	d8000a15 	stw	zero,40(sp)
    2d0c:	14400017 	ldw	r17,0(r2)
    2d10:	11c00104 	addi	r7,r2,4
    2d14:	d9c01115 	stw	r7,68(sp)
    2d18:	88005a26 	beq	r17,zero,2e84 <___vfprintf_internal_r+0x41c>
    2d1c:	d8c00b17 	ldw	r3,44(sp)
    2d20:	dcc00044 	addi	r19,sp,1
    2d24:	05800244 	movi	r22,9
    2d28:	182b003a 	cmpeq	r21,r3,zero
    2d2c:	dcc01215 	stw	r19,72(sp)
    2d30:	00000506 	br	2d48 <___vfprintf_internal_r+0x2e0>
    2d34:	21000c04 	addi	r4,r4,48
    2d38:	99000005 	stb	r4,0(r19)
    2d3c:	9cc00044 	addi	r19,r19,1
    2d40:	80000f26 	beq	r16,zero,2d80 <___vfprintf_internal_r+0x318>
    2d44:	8023883a 	mov	r17,r16
    2d48:	d9400d17 	ldw	r5,52(sp)
    2d4c:	8809883a 	mov	r4,r17
    2d50:	00029080 	call	2908 <__udivsi3>
    2d54:	d9000d17 	ldw	r4,52(sp)
    2d58:	100b883a 	mov	r5,r2
    2d5c:	1021883a 	mov	r16,r2
    2d60:	00029180 	call	2918 <__mulsi3>
    2d64:	8889c83a 	sub	r4,r17,r2
    2d68:	b13ff20e 	bge	r22,r4,2d34 <___vfprintf_internal_r+0x2cc>
    2d6c:	a8009f1e 	bne	r21,zero,2fec <___vfprintf_internal_r+0x584>
    2d70:	21000dc4 	addi	r4,r4,55
    2d74:	99000005 	stb	r4,0(r19)
    2d78:	9cc00044 	addi	r19,r19,1
    2d7c:	803ff11e 	bne	r16,zero,2d44 <___vfprintf_internal_r+0x2dc>
    2d80:	d8801217 	ldw	r2,72(sp)
    2d84:	98a3c83a 	sub	r17,r19,r2
    2d88:	d8c00917 	ldw	r3,36(sp)
    2d8c:	1c4bc83a 	sub	r5,r3,r17
    2d90:	0140130e 	bge	zero,r5,2de0 <___vfprintf_internal_r+0x378>
    2d94:	d8c00044 	addi	r3,sp,1
    2d98:	18800804 	addi	r2,r3,32
    2d9c:	9880102e 	bgeu	r19,r2,2de0 <___vfprintf_internal_r+0x378>
    2da0:	00800c04 	movi	r2,48
    2da4:	28ffffc4 	addi	r3,r5,-1
    2da8:	98800005 	stb	r2,0(r19)
    2dac:	99000044 	addi	r4,r19,1
    2db0:	00c0080e 	bge	zero,r3,2dd4 <___vfprintf_internal_r+0x36c>
    2db4:	d8c00044 	addi	r3,sp,1
    2db8:	18800804 	addi	r2,r3,32
    2dbc:	2080052e 	bgeu	r4,r2,2dd4 <___vfprintf_internal_r+0x36c>
    2dc0:	00800c04 	movi	r2,48
    2dc4:	20800005 	stb	r2,0(r4)
    2dc8:	21000044 	addi	r4,r4,1
    2dcc:	9945883a 	add	r2,r19,r5
    2dd0:	20bff81e 	bne	r4,r2,2db4 <___vfprintf_internal_r+0x34c>
    2dd4:	d8801217 	ldw	r2,72(sp)
    2dd8:	2027883a 	mov	r19,r4
    2ddc:	20a3c83a 	sub	r17,r4,r2
    2de0:	d8c00a17 	ldw	r3,40(sp)
    2de4:	1c45883a 	add	r2,r3,r17
    2de8:	e0a1c83a 	sub	r16,fp,r2
    2dec:	d8800f17 	ldw	r2,60(sp)
    2df0:	10008026 	beq	r2,zero,2ff4 <___vfprintf_internal_r+0x58c>
    2df4:	1805003a 	cmpeq	r2,r3,zero
    2df8:	1000ae26 	beq	r2,zero,30b4 <___vfprintf_internal_r+0x64c>
    2dfc:	0400a516 	blt	zero,r16,3094 <___vfprintf_internal_r+0x62c>
    2e00:	b805883a 	mov	r2,r23
    2e04:	0440950e 	bge	zero,r17,305c <___vfprintf_internal_r+0x5f4>
    2e08:	102f883a 	mov	r23,r2
    2e0c:	1461883a 	add	r16,r2,r17
    2e10:	00000206 	br	2e1c <___vfprintf_internal_r+0x3b4>
    2e14:	bdc00044 	addi	r23,r23,1
    2e18:	85ffae26 	beq	r16,r23,2cd4 <___vfprintf_internal_r+0x26c>
    2e1c:	9cffffc4 	addi	r19,r19,-1
    2e20:	98800003 	ldbu	r2,0(r19)
    2e24:	a0c00117 	ldw	r3,4(r20)
    2e28:	d9001017 	ldw	r4,64(sp)
    2e2c:	d8800005 	stb	r2,0(sp)
    2e30:	a00b883a 	mov	r5,r20
    2e34:	d80d883a 	mov	r6,sp
    2e38:	01c00044 	movi	r7,1
    2e3c:	183ee83a 	callr	r3
    2e40:	103ff426 	beq	r2,zero,2e14 <___vfprintf_internal_r+0x3ac>
    2e44:	05ffffc4 	movi	r23,-1
    2e48:	003f3b06 	br	2b38 <___vfprintf_internal_r+0xd0>
    2e4c:	00c00404 	movi	r3,16
    2e50:	d8c00d15 	stw	r3,52(sp)
    2e54:	d8000c15 	stw	zero,48(sp)
    2e58:	d8c00e17 	ldw	r3,56(sp)
    2e5c:	1805003a 	cmpeq	r2,r3,zero
    2e60:	103fa626 	beq	r2,zero,2cfc <___vfprintf_internal_r+0x294>
    2e64:	d8c00c17 	ldw	r3,48(sp)
    2e68:	1800171e 	bne	r3,zero,2ec8 <___vfprintf_internal_r+0x460>
    2e6c:	d8c01117 	ldw	r3,68(sp)
    2e70:	d8000a15 	stw	zero,40(sp)
    2e74:	1c400017 	ldw	r17,0(r3)
    2e78:	19c00104 	addi	r7,r3,4
    2e7c:	d9c01115 	stw	r7,68(sp)
    2e80:	883fa61e 	bne	r17,zero,2d1c <___vfprintf_internal_r+0x2b4>
    2e84:	dcc00044 	addi	r19,sp,1
    2e88:	dcc01215 	stw	r19,72(sp)
    2e8c:	003fbe06 	br	2d88 <___vfprintf_internal_r+0x320>
    2e90:	04000084 	movi	r16,2
    2e94:	d9c00f15 	stw	r7,60(sp)
    2e98:	003f0b06 	br	2ac8 <___vfprintf_internal_r+0x60>
    2e9c:	040000c4 	movi	r16,3
    2ea0:	003f0906 	br	2ac8 <___vfprintf_internal_r+0x60>
    2ea4:	00800044 	movi	r2,1
    2ea8:	040000c4 	movi	r16,3
    2eac:	d8800e15 	stw	r2,56(sp)
    2eb0:	003f0506 	br	2ac8 <___vfprintf_internal_r+0x60>
    2eb4:	0007883a 	mov	r3,zero
    2eb8:	003f4e06 	br	2bf4 <___vfprintf_internal_r+0x18c>
    2ebc:	00800044 	movi	r2,1
    2ec0:	d8800915 	stw	r2,36(sp)
    2ec4:	003f5706 	br	2c24 <___vfprintf_internal_r+0x1bc>
    2ec8:	d8801117 	ldw	r2,68(sp)
    2ecc:	14400017 	ldw	r17,0(r2)
    2ed0:	10800104 	addi	r2,r2,4
    2ed4:	d8801115 	stw	r2,68(sp)
    2ed8:	88000716 	blt	r17,zero,2ef8 <___vfprintf_internal_r+0x490>
    2edc:	d8000a15 	stw	zero,40(sp)
    2ee0:	003f8d06 	br	2d18 <___vfprintf_internal_r+0x2b0>
    2ee4:	d8c01117 	ldw	r3,68(sp)
    2ee8:	1c400017 	ldw	r17,0(r3)
    2eec:	18c00104 	addi	r3,r3,4
    2ef0:	d8c01115 	stw	r3,68(sp)
    2ef4:	883ff90e 	bge	r17,zero,2edc <___vfprintf_internal_r+0x474>
    2ef8:	00800044 	movi	r2,1
    2efc:	0463c83a 	sub	r17,zero,r17
    2f00:	d8800a15 	stw	r2,40(sp)
    2f04:	003f8406 	br	2d18 <___vfprintf_internal_r+0x2b0>
    2f08:	04000044 	movi	r16,1
    2f0c:	8700080e 	bge	r16,fp,2f30 <___vfprintf_internal_r+0x4c8>
    2f10:	d9001017 	ldw	r4,64(sp)
    2f14:	a00b883a 	mov	r5,r20
    2f18:	01800804 	movi	r6,32
    2f1c:	e1ffffc4 	addi	r7,fp,-1
    2f20:	00029e80 	call	29e8 <print_repeat>
    2f24:	103fc71e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    2f28:	e5c5883a 	add	r2,fp,r23
    2f2c:	15ffffc4 	addi	r23,r2,-1
    2f30:	d8c01117 	ldw	r3,68(sp)
    2f34:	d9001017 	ldw	r4,64(sp)
    2f38:	800f883a 	mov	r7,r16
    2f3c:	18800017 	ldw	r2,0(r3)
    2f40:	a0c00117 	ldw	r3,4(r20)
    2f44:	a00b883a 	mov	r5,r20
    2f48:	d8800005 	stb	r2,0(sp)
    2f4c:	d80d883a 	mov	r6,sp
    2f50:	183ee83a 	callr	r3
    2f54:	103fbb1e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    2f58:	d8801117 	ldw	r2,68(sp)
    2f5c:	bdc00044 	addi	r23,r23,1
    2f60:	0021883a 	mov	r16,zero
    2f64:	10800104 	addi	r2,r2,4
    2f68:	d8801115 	stw	r2,68(sp)
    2f6c:	003ed606 	br	2ac8 <___vfprintf_internal_r+0x60>
    2f70:	00800204 	movi	r2,8
    2f74:	d8800d15 	stw	r2,52(sp)
    2f78:	d8000c15 	stw	zero,48(sp)
    2f7c:	003fb606 	br	2e58 <___vfprintf_internal_r+0x3f0>
    2f80:	d8c01117 	ldw	r3,68(sp)
    2f84:	1cc00017 	ldw	r19,0(r3)
    2f88:	9809883a 	mov	r4,r19
    2f8c:	00031e40 	call	31e4 <strlen>
    2f90:	e0a1c83a 	sub	r16,fp,r2
    2f94:	1023883a 	mov	r17,r2
    2f98:	0400070e 	bge	zero,r16,2fb8 <___vfprintf_internal_r+0x550>
    2f9c:	d9001017 	ldw	r4,64(sp)
    2fa0:	a00b883a 	mov	r5,r20
    2fa4:	01800804 	movi	r6,32
    2fa8:	800f883a 	mov	r7,r16
    2fac:	00029e80 	call	29e8 <print_repeat>
    2fb0:	103fa41e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    2fb4:	bc2f883a 	add	r23,r23,r16
    2fb8:	a0c00117 	ldw	r3,4(r20)
    2fbc:	d9001017 	ldw	r4,64(sp)
    2fc0:	980d883a 	mov	r6,r19
    2fc4:	a00b883a 	mov	r5,r20
    2fc8:	880f883a 	mov	r7,r17
    2fcc:	183ee83a 	callr	r3
    2fd0:	103f9c1e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    2fd4:	d8801117 	ldw	r2,68(sp)
    2fd8:	bc6f883a 	add	r23,r23,r17
    2fdc:	0021883a 	mov	r16,zero
    2fe0:	10800104 	addi	r2,r2,4
    2fe4:	d8801115 	stw	r2,68(sp)
    2fe8:	003eb706 	br	2ac8 <___vfprintf_internal_r+0x60>
    2fec:	210015c4 	addi	r4,r4,87
    2ff0:	003f5106 	br	2d38 <___vfprintf_internal_r+0x2d0>
    2ff4:	04003b16 	blt	zero,r16,30e4 <___vfprintf_internal_r+0x67c>
    2ff8:	d8c00a17 	ldw	r3,40(sp)
    2ffc:	1805003a 	cmpeq	r2,r3,zero
    3000:	103f7f1e 	bne	r2,zero,2e00 <___vfprintf_internal_r+0x398>
    3004:	a0c00117 	ldw	r3,4(r20)
    3008:	d9001017 	ldw	r4,64(sp)
    300c:	00800b44 	movi	r2,45
    3010:	d8800005 	stb	r2,0(sp)
    3014:	a00b883a 	mov	r5,r20
    3018:	d80d883a 	mov	r6,sp
    301c:	01c00044 	movi	r7,1
    3020:	183ee83a 	callr	r3
    3024:	103f871e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    3028:	b8800044 	addi	r2,r23,1
    302c:	003f7506 	br	2e04 <___vfprintf_internal_r+0x39c>
    3030:	0007883a 	mov	r3,zero
    3034:	003edb06 	br	2ba4 <___vfprintf_internal_r+0x13c>
    3038:	a0c00117 	ldw	r3,4(r20)
    303c:	d9001017 	ldw	r4,64(sp)
    3040:	d9400005 	stb	r5,0(sp)
    3044:	d80d883a 	mov	r6,sp
    3048:	a00b883a 	mov	r5,r20
    304c:	183ee83a 	callr	r3
    3050:	103f7c1e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    3054:	bdc00044 	addi	r23,r23,1
    3058:	003e9b06 	br	2ac8 <___vfprintf_internal_r+0x60>
    305c:	102f883a 	mov	r23,r2
    3060:	0021883a 	mov	r16,zero
    3064:	003e9806 	br	2ac8 <___vfprintf_internal_r+0x60>
    3068:	a0c00117 	ldw	r3,4(r20)
    306c:	d9000005 	stb	r4,0(sp)
    3070:	d9001017 	ldw	r4,64(sp)
    3074:	a00b883a 	mov	r5,r20
    3078:	d80d883a 	mov	r6,sp
    307c:	800f883a 	mov	r7,r16
    3080:	183ee83a 	callr	r3
    3084:	103f6f1e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    3088:	bc2f883a 	add	r23,r23,r16
    308c:	0021883a 	mov	r16,zero
    3090:	003e8d06 	br	2ac8 <___vfprintf_internal_r+0x60>
    3094:	d9001017 	ldw	r4,64(sp)
    3098:	a00b883a 	mov	r5,r20
    309c:	01800c04 	movi	r6,48
    30a0:	800f883a 	mov	r7,r16
    30a4:	00029e80 	call	29e8 <print_repeat>
    30a8:	103f661e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    30ac:	bc05883a 	add	r2,r23,r16
    30b0:	003f5406 	br	2e04 <___vfprintf_internal_r+0x39c>
    30b4:	a0c00117 	ldw	r3,4(r20)
    30b8:	d9001017 	ldw	r4,64(sp)
    30bc:	00800b44 	movi	r2,45
    30c0:	d8800005 	stb	r2,0(sp)
    30c4:	a00b883a 	mov	r5,r20
    30c8:	d80d883a 	mov	r6,sp
    30cc:	01c00044 	movi	r7,1
    30d0:	183ee83a 	callr	r3
    30d4:	103f5b1e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    30d8:	bdc00044 	addi	r23,r23,1
    30dc:	043f480e 	bge	zero,r16,2e00 <___vfprintf_internal_r+0x398>
    30e0:	003fec06 	br	3094 <___vfprintf_internal_r+0x62c>
    30e4:	d9001017 	ldw	r4,64(sp)
    30e8:	a00b883a 	mov	r5,r20
    30ec:	01800804 	movi	r6,32
    30f0:	800f883a 	mov	r7,r16
    30f4:	00029e80 	call	29e8 <print_repeat>
    30f8:	103f521e 	bne	r2,zero,2e44 <___vfprintf_internal_r+0x3dc>
    30fc:	bc2f883a 	add	r23,r23,r16
    3100:	003fbd06 	br	2ff8 <___vfprintf_internal_r+0x590>

00003104 <__vfprintf_internal>:
    3104:	00800034 	movhi	r2,0
    3108:	108ed004 	addi	r2,r2,15168
    310c:	2013883a 	mov	r9,r4
    3110:	11000017 	ldw	r4,0(r2)
    3114:	2805883a 	mov	r2,r5
    3118:	300f883a 	mov	r7,r6
    311c:	480b883a 	mov	r5,r9
    3120:	100d883a 	mov	r6,r2
    3124:	0002a681 	jmpi	2a68 <___vfprintf_internal_r>

00003128 <__sfvwrite_small_dev>:
    3128:	2880000b 	ldhu	r2,0(r5)
    312c:	defffa04 	addi	sp,sp,-24
    3130:	dcc00315 	stw	r19,12(sp)
    3134:	1080020c 	andi	r2,r2,8
    3138:	dc800215 	stw	r18,8(sp)
    313c:	dc400115 	stw	r17,4(sp)
    3140:	dfc00515 	stw	ra,20(sp)
    3144:	dd000415 	stw	r20,16(sp)
    3148:	dc000015 	stw	r16,0(sp)
    314c:	2825883a 	mov	r18,r5
    3150:	2027883a 	mov	r19,r4
    3154:	3023883a 	mov	r17,r6
    3158:	10002026 	beq	r2,zero,31dc <__sfvwrite_small_dev+0xb4>
    315c:	2940008f 	ldh	r5,2(r5)
    3160:	28000f16 	blt	r5,zero,31a0 <__sfvwrite_small_dev+0x78>
    3164:	01c01b0e 	bge	zero,r7,31d4 <__sfvwrite_small_dev+0xac>
    3168:	3821883a 	mov	r16,r7
    316c:	05010004 	movi	r20,1024
    3170:	00000206 	br	317c <__sfvwrite_small_dev+0x54>
    3174:	0400170e 	bge	zero,r16,31d4 <__sfvwrite_small_dev+0xac>
    3178:	9140008f 	ldh	r5,2(r18)
    317c:	880d883a 	mov	r6,r17
    3180:	9809883a 	mov	r4,r19
    3184:	800f883a 	mov	r7,r16
    3188:	a400010e 	bge	r20,r16,3190 <__sfvwrite_small_dev+0x68>
    318c:	01c10004 	movi	r7,1024
    3190:	00032040 	call	3204 <_write_r>
    3194:	88a3883a 	add	r17,r17,r2
    3198:	80a1c83a 	sub	r16,r16,r2
    319c:	00bff516 	blt	zero,r2,3174 <__sfvwrite_small_dev+0x4c>
    31a0:	9080000b 	ldhu	r2,0(r18)
    31a4:	00ffffc4 	movi	r3,-1
    31a8:	10801014 	ori	r2,r2,64
    31ac:	9080000d 	sth	r2,0(r18)
    31b0:	1805883a 	mov	r2,r3
    31b4:	dfc00517 	ldw	ra,20(sp)
    31b8:	dd000417 	ldw	r20,16(sp)
    31bc:	dcc00317 	ldw	r19,12(sp)
    31c0:	dc800217 	ldw	r18,8(sp)
    31c4:	dc400117 	ldw	r17,4(sp)
    31c8:	dc000017 	ldw	r16,0(sp)
    31cc:	dec00604 	addi	sp,sp,24
    31d0:	f800283a 	ret
    31d4:	0007883a 	mov	r3,zero
    31d8:	003ff506 	br	31b0 <__sfvwrite_small_dev+0x88>
    31dc:	00ffffc4 	movi	r3,-1
    31e0:	003ff306 	br	31b0 <__sfvwrite_small_dev+0x88>

000031e4 <strlen>:
    31e4:	20800007 	ldb	r2,0(r4)
    31e8:	10000526 	beq	r2,zero,3200 <strlen+0x1c>
    31ec:	2007883a 	mov	r3,r4
    31f0:	18c00044 	addi	r3,r3,1
    31f4:	18800007 	ldb	r2,0(r3)
    31f8:	103ffd1e 	bne	r2,zero,31f0 <strlen+0xc>
    31fc:	1905c83a 	sub	r2,r3,r4
    3200:	f800283a 	ret

00003204 <_write_r>:
    3204:	defffd04 	addi	sp,sp,-12
    3208:	dc000015 	stw	r16,0(sp)
    320c:	04000034 	movhi	r16,0
    3210:	840f1204 	addi	r16,r16,15432
    3214:	dc400115 	stw	r17,4(sp)
    3218:	80000015 	stw	zero,0(r16)
    321c:	2023883a 	mov	r17,r4
    3220:	2809883a 	mov	r4,r5
    3224:	300b883a 	mov	r5,r6
    3228:	380d883a 	mov	r6,r7
    322c:	dfc00215 	stw	ra,8(sp)
    3230:	00035000 	call	3500 <write>
    3234:	1007883a 	mov	r3,r2
    3238:	00bfffc4 	movi	r2,-1
    323c:	18800626 	beq	r3,r2,3258 <_write_r+0x54>
    3240:	1805883a 	mov	r2,r3
    3244:	dfc00217 	ldw	ra,8(sp)
    3248:	dc400117 	ldw	r17,4(sp)
    324c:	dc000017 	ldw	r16,0(sp)
    3250:	dec00304 	addi	sp,sp,12
    3254:	f800283a 	ret
    3258:	80800017 	ldw	r2,0(r16)
    325c:	103ff826 	beq	r2,zero,3240 <_write_r+0x3c>
    3260:	88800015 	stw	r2,0(r17)
    3264:	1805883a 	mov	r2,r3
    3268:	dfc00217 	ldw	ra,8(sp)
    326c:	dc400117 	ldw	r17,4(sp)
    3270:	dc000017 	ldw	r16,0(sp)
    3274:	dec00304 	addi	sp,sp,12
    3278:	f800283a 	ret

0000327c <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    327c:	2900051e 	bne	r5,r4,3294 <alt_load_section+0x18>
    3280:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    3284:	20800017 	ldw	r2,0(r4)
    3288:	21000104 	addi	r4,r4,4
    328c:	28800015 	stw	r2,0(r5)
    3290:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3294:	29bffb1e 	bne	r5,r6,3284 <alt_load_section+0x8>
    3298:	f800283a 	ret

0000329c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    329c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    32a0:	01000034 	movhi	r4,0
    32a4:	210ed504 	addi	r4,r4,15188
    32a8:	01400034 	movhi	r5,0
    32ac:	294e9804 	addi	r5,r5,14944
    32b0:	01800034 	movhi	r6,0
    32b4:	318ed504 	addi	r6,r6,15188
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    32b8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    32bc:	000327c0 	call	327c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    32c0:	01000034 	movhi	r4,0
    32c4:	21000804 	addi	r4,r4,32
    32c8:	01400034 	movhi	r5,0
    32cc:	29400804 	addi	r5,r5,32
    32d0:	01800034 	movhi	r6,0
    32d4:	31800804 	addi	r6,r6,32
    32d8:	000327c0 	call	327c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    32dc:	01000034 	movhi	r4,0
    32e0:	210db104 	addi	r4,r4,14020
    32e4:	01400034 	movhi	r5,0
    32e8:	294db104 	addi	r5,r5,14020
    32ec:	01800034 	movhi	r6,0
    32f0:	318e9804 	addi	r6,r6,14944
    32f4:	000327c0 	call	327c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    32f8:	00036b40 	call	36b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    32fc:	dfc00017 	ldw	ra,0(sp)
    3300:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    3304:	00036b81 	jmpi	36b8 <alt_icache_flush_all>

00003308 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3308:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    330c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3310:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3314:	000357c0 	call	357c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    3318:	00035780 	call	3578 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    331c:	d1204317 	ldw	r4,-32500(gp)
    3320:	d1604417 	ldw	r5,-32496(gp)
    3324:	d1a04517 	ldw	r6,-32492(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    3328:	dfc00017 	ldw	ra,0(sp)
    332c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    3330:	00002641 	jmpi	264 <main>

00003334 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    3334:	defff804 	addi	sp,sp,-32
    3338:	dfc00415 	stw	ra,16(sp)
    333c:	dc800315 	stw	r18,12(sp)
    3340:	dc400215 	stw	r17,8(sp)
    3344:	dc000115 	stw	r16,4(sp)
    3348:	d9400515 	stw	r5,20(sp)
    334c:	d9800615 	stw	r6,24(sp)
    3350:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    3354:	d8800504 	addi	r2,sp,20
    3358:	2025883a 	mov	r18,r4
    335c:	d8800015 	stw	r2,0(sp)
    3360:	00003d06 	br	3458 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    3364:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    3368:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    336c:	18800226 	beq	r3,r2,3378 <alt_printf+0x44>
        {
            alt_putchar(c);
    3370:	1809883a 	mov	r4,r3
    3374:	00000a06 	br	33a0 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    3378:	91000007 	ldb	r4,0(r18)
    337c:	94800044 	addi	r18,r18,1
    3380:	20003726 	beq	r4,zero,3460 <alt_printf+0x12c>
            {
                if (c == '%')
    3384:	20c00626 	beq	r4,r3,33a0 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    3388:	008018c4 	movi	r2,99
    338c:	2080061e 	bne	r4,r2,33a8 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    3390:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    3394:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    3398:	10800104 	addi	r2,r2,4
    339c:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    33a0:	00034780 	call	3478 <alt_putchar>
    33a4:	00002c06 	br	3458 <alt_printf+0x124>
                }
                else if (c == 'x')
    33a8:	00801e04 	movi	r2,120
    33ac:	20801e1e 	bne	r4,r2,3428 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    33b0:	d8800017 	ldw	r2,0(sp)
    33b4:	14400017 	ldw	r17,0(r2)
    33b8:	10800104 	addi	r2,r2,4
    33bc:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    33c0:	88000226 	beq	r17,zero,33cc <alt_printf+0x98>
    33c4:	04000704 	movi	r16,28
    33c8:	00000306 	br	33d8 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    33cc:	01000c04 	movi	r4,48
    33d0:	003ff306 	br	33a0 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    33d4:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    33d8:	008003c4 	movi	r2,15
    33dc:	1404983a 	sll	r2,r2,r16
    33e0:	8884703a 	and	r2,r17,r2
    33e4:	103ffb26 	beq	r2,zero,33d4 <alt_printf+0xa0>
    33e8:	00000b06 	br	3418 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    33ec:	8884703a 	and	r2,r17,r2
    33f0:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    33f4:	00800244 	movi	r2,9
                            c = '0' + digit;
    33f8:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    33fc:	10c0012e 	bgeu	r2,r3,3404 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    3400:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    3404:	21003fcc 	andi	r4,r4,255
    3408:	2100201c 	xori	r4,r4,128
    340c:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    3410:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    3414:	00034780 	call	3478 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    3418:	008003c4 	movi	r2,15
    341c:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    3420:	803ff20e 	bge	r16,zero,33ec <alt_printf+0xb8>
    3424:	00000c06 	br	3458 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    3428:	00801cc4 	movi	r2,115
    342c:	20800a1e 	bne	r4,r2,3458 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    3430:	d8800017 	ldw	r2,0(sp)
    3434:	14000017 	ldw	r16,0(r2)
    3438:	10800104 	addi	r2,r2,4
    343c:	d8800015 	stw	r2,0(sp)
    3440:	00000106 	br	3448 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    3444:	00034780 	call	3478 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    3448:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    344c:	84000044 	addi	r16,r16,1
    3450:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    3454:	103ffb1e 	bne	r2,zero,3444 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    3458:	90c00007 	ldb	r3,0(r18)
    345c:	183fc11e 	bne	r3,zero,3364 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    3460:	dfc00417 	ldw	ra,16(sp)
    3464:	dc800317 	ldw	r18,12(sp)
    3468:	dc400217 	ldw	r17,8(sp)
    346c:	dc000117 	ldw	r16,4(sp)
    3470:	dec00804 	addi	sp,sp,32
    3474:	f800283a 	ret

00003478 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    3478:	defffd04 	addi	sp,sp,-12
    347c:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    3480:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    3484:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    3488:	01800044 	movi	r6,1
    348c:	01000034 	movhi	r4,0
    3490:	210ed204 	addi	r4,r4,15176
    3494:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    3498:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    349c:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    34a0:	000359c0 	call	359c <altera_avalon_jtag_uart_write>
    34a4:	1009883a 	mov	r4,r2
    34a8:	00bfffc4 	movi	r2,-1
    34ac:	2080011e 	bne	r4,r2,34b4 <alt_putchar+0x3c>
    34b0:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    34b4:	8005883a 	mov	r2,r16
    34b8:	dfc00217 	ldw	ra,8(sp)
    34bc:	dc000117 	ldw	r16,4(sp)
    34c0:	dec00304 	addi	sp,sp,12
    34c4:	f800283a 	ret

000034c8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    34c8:	defffe04 	addi	sp,sp,-8
    34cc:	dc000015 	stw	r16,0(sp)
    34d0:	dfc00115 	stw	ra,4(sp)
    34d4:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    34d8:	00031e40 	call	31e4 <strlen>
    34dc:	800b883a 	mov	r5,r16
    34e0:	100d883a 	mov	r6,r2
    34e4:	01000034 	movhi	r4,0
    34e8:	210ed204 	addi	r4,r4,15176
    34ec:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    34f0:	dfc00117 	ldw	ra,4(sp)
    34f4:	dc000017 	ldw	r16,0(sp)
    34f8:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    34fc:	000359c1 	jmpi	359c <altera_avalon_jtag_uart_write>

00003500 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    3500:	deffff04 	addi	sp,sp,-4
    3504:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    3508:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    350c:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    3510:	000f883a 	mov	r7,zero
    3514:	01000034 	movhi	r4,0
    3518:	210ed204 	addi	r4,r4,15176
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    351c:	18800526 	beq	r3,r2,3534 <write+0x34>
    3520:	00800084 	movi	r2,2
    3524:	1880061e 	bne	r3,r2,3540 <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    3528:	01000034 	movhi	r4,0
    352c:	210ed204 	addi	r4,r4,15176
    3530:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    3534:	dfc00017 	ldw	ra,0(sp)
    3538:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    353c:	000359c1 	jmpi	359c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    3540:	00800034 	movhi	r2,0
    3544:	108ed404 	addi	r2,r2,15184
    3548:	10800017 	ldw	r2,0(r2)
    354c:	00c00034 	movhi	r3,0
    3550:	18cf1204 	addi	r3,r3,15432
    3554:	10000226 	beq	r2,zero,3560 <write+0x60>
    3558:	103ee83a 	callr	r2
    355c:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    3560:	00801444 	movi	r2,81
    3564:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
    3568:	00bfffc4 	movi	r2,-1
    356c:	dfc00017 	ldw	ra,0(sp)
    3570:	dec00104 	addi	sp,sp,4
    3574:	f800283a 	ret

00003578 <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
    3578:	f800283a 	ret

0000357c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    357c:	deffff04 	addi	sp,sp,-4
    3580:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    3584:	00036bc0 	call	36bc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3588:	00800044 	movi	r2,1
    358c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3590:	dfc00017 	ldw	ra,0(sp)
    3594:	dec00104 	addi	sp,sp,4
    3598:	f800283a 	ret

0000359c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    359c:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    35a0:	298f883a 	add	r7,r5,r6
    35a4:	20c00104 	addi	r3,r4,4
    35a8:	00000606 	br	35c4 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    35ac:	18800037 	ldwio	r2,0(r3)
    35b0:	10bfffec 	andhi	r2,r2,65535
    35b4:	10000326 	beq	r2,zero,35c4 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    35b8:	28800007 	ldb	r2,0(r5)
    35bc:	29400044 	addi	r5,r5,1
    35c0:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    35c4:	29fff936 	bltu	r5,r7,35ac <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    35c8:	3005883a 	mov	r2,r6
    35cc:	f800283a 	ret

000035d0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    35d0:	db000017 	ldw	r12,0(sp)
    35d4:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    35d8:	00c00044 	movi	r3,1
    35dc:	194a983a 	sll	r5,r3,r5

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    35e0:	dbc00217 	ldw	r15,8(sp)
  const alt_u8 * write_end = write_data + write_length;
    35e4:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
    35e8:	431b883a 	add	r13,r8,r12
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    35ec:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    35f0:	7880008c 	andi	r2,r15,2
    35f4:	1000021e 	bne	r2,zero,3600 <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    35f8:	00810004 	movi	r2,1024
    35fc:	20800335 	stwio	r2,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    3600:	20800037 	ldwio	r2,0(r4)
    3604:	180b883a 	mov	r5,r3
    3608:	6013883a 	mov	r9,r12
    360c:	22c00204 	addi	r11,r4,8
    3610:	00000106 	br	3618 <alt_avalon_spi_command+0x48>
    3614:	000d883a 	mov	r6,zero
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    3618:	5a800037 	ldwio	r10,0(r11)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    361c:	5080100c 	andi	r2,r10,64
    3620:	1007003a 	cmpeq	r3,r2,zero
    3624:	1800011e 	bne	r3,zero,362c <alt_avalon_spi_command+0x5c>
    3628:	2800031e 	bne	r5,zero,3638 <alt_avalon_spi_command+0x68>
    362c:	5080200c 	andi	r2,r10,128
    3630:	103ff926 	beq	r2,zero,3618 <alt_avalon_spi_command+0x48>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    3634:	18000e1e 	bne	r3,zero,3670 <alt_avalon_spi_command+0xa0>
    3638:	01400b0e 	bge	zero,r5,3668 <alt_avalon_spi_command+0x98>
    {
      credits--;
    363c:	297fffc4 	addi	r5,r5,-1

      if (write_data < write_end)
    3640:	3b80042e 	bgeu	r7,r14,3654 <alt_avalon_spi_command+0x84>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    3644:	38800003 	ldbu	r2,0(r7)
    3648:	39c00044 	addi	r7,r7,1
    364c:	20800135 	stwio	r2,4(r4)
    3650:	00000506 	br	3668 <alt_avalon_spi_command+0x98>
      else if (write_zeros > 0)
    3654:	4800021e 	bne	r9,zero,3660 <alt_avalon_spi_command+0x90>
    3658:	017f0004 	movi	r5,-1024
    365c:	00000206 	br	3668 <alt_avalon_spi_command+0x98>
      {
        write_zeros--;
    3660:	4a7fffc4 	addi	r9,r9,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    3664:	20000135 	stwio	zero,4(r4)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    3668:	5080200c 	andi	r2,r10,128
    366c:	103fea26 	beq	r2,zero,3618 <alt_avalon_spi_command+0x48>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    3670:	20800037 	ldwio	r2,0(r4)
    3674:	29400044 	addi	r5,r5,1

      if (read_ignore > 0)
    3678:	30000326 	beq	r6,zero,3688 <alt_avalon_spi_command+0xb8>
        read_ignore--;
    367c:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;

      if (read_ignore == 0 && read_data == read_end)
    3680:	30000326 	beq	r6,zero,3690 <alt_avalon_spi_command+0xc0>
    3684:	003fe406 	br	3618 <alt_avalon_spi_command+0x48>
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
    3688:	40800005 	stb	r2,0(r8)
    368c:	42000044 	addi	r8,r8,1
      credits++;

      if (read_ignore == 0 && read_data == read_end)
    3690:	437fe01e 	bne	r8,r13,3614 <alt_avalon_spi_command+0x44>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    3694:	58800037 	ldwio	r2,0(r11)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    3698:	1080080c 	andi	r2,r2,32
    369c:	103ffd26 	beq	r2,zero,3694 <alt_avalon_spi_command+0xc4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    36a0:	7880004c 	andi	r2,r15,1
    36a4:	1000011e 	bne	r2,zero,36ac <alt_avalon_spi_command+0xdc>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    36a8:	20000335 	stwio	zero,12(r4)

  return read_length;
}
    36ac:	6005883a 	mov	r2,r12
    36b0:	f800283a 	ret

000036b4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    36b4:	f800283a 	ret

000036b8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    36b8:	f800283a 	ret

000036bc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    36bc:	000170fa 	wrctl	ienable,zero
}
    36c0:	f800283a 	ret
