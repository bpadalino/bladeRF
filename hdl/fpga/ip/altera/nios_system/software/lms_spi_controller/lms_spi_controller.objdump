
lms_spi_controller.elf:     file format elf32-littlenios2
lms_spi_controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003450 memsz 0x00003450 flags r-x
    LOAD off    0x00004470 vaddr 0x00003470 paddr 0x00003564 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00004658 vaddr 0x00003658 paddr 0x00003658 align 2**12
         filesz 0x00000000 memsz 0x00000024 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002fe8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  00003008  00003008  00004008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f4  00003470  00003564  00004470  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000024  00003658  00003658  00004658  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000049  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  000045b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000081f  00000000  00000000  000048b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005536  00000000  00000000  000050d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000018a7  00000000  00000000  0000a60d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005792  00000000  00000000  0000beb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008cc  00000000  00000000  00011648  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001596  00000000  00000000  00011f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002a88  00000000  00000000  000134aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00015f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000338  00000000  00000000  00015f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00017a5e  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00017a61  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00017a6d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00017a6e  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  00017a6f  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00017a7a  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00017a85  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  00017a90  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000004a  00000000  00000000  00017a9b  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0003fac4  00000000  00000000  00017ae5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
00003008 l    d  .rodata	00000000 .rodata
00003470 l    d  .rwdata	00000000 .rwdata
00003658 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lms_spi_config.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000206c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000234c l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00003470 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00002bc0 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00002c4c g     F .text	0000002c alt_main
00002288 g     F .text	00000090 _puts_r
00003564 g       *ABS*	00000000 __flash_rwdata_start
000021f0 g     F .text	00000054 printf
000007e0 g     F .text	00000018 lms_lpf_disable
00000410 g     F .text	00000074 lms_spi_write
00002e0c g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
000007a0 g     F .text	0000000c lms_rxvga1_disable
000004f8 g     F .text	00000260 lms_calibrate_dc
00000020 g       *ABS*	00000000 __flash_exceptions_start
00003658 g     O .bss	00000004 errno
00003660 g     O .bss	00000004 alt_argv
0000b550 g       *ABS*	00000000 _gp
00000e40 g     F .text	00000044 lms_tx_enable
00000758 g     F .text	0000003c lms_rxvga2_set_gain
000003c4 g     F .text	0000004c lms_print_frequency
00002318 g     F .text	00000014 puts
00000f10 g     F .text	00000054 lms_pll_disable
000031fc g     O .rodata	000000c0 bands
00002244 g     F .text	00000044 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000021a8 g     F .text	00000008 __udivsi3
00000794 g     F .text	0000000c lms_rxvga1_enable
00001350 g     F .text	00000058 lms_rxvga2_enable
00003554 g     O .rwdata	00000004 _global_impure_ptr
0000367c g       *ABS*	00000000 __bss_end
00001a00 g     F .text	0000066c __udivdi3
000008c0 g     F .text	00000050 lms_dump_registers
0000009c g     F .text	0000009c si5338_write
00002ff8 g     F .text	00000004 alt_dcache_flush_all
00000d10 g     F .text	000000e8 lms_get_frequency
000007ac g     F .text	00000034 lms_soft_reset
00003564 g       *ABS*	00000000 __ram_rwdata_end
00002e44 g     F .text	00000078 write
00003470 g       *ABS*	00000000 __ram_rodata_end
00003558 g     O .rwdata	00000004 jtag_uart_0
00000e84 g     F .text	00000048 lms_rx_disable
000021b0 g     F .text	00000008 __umodsi3
0000367c g       *ABS*	00000000 end
00014000 g       *ABS*	00000000 __alt_stack_pointer
0000108c g     F .text	00000044 lms_peakdetect_disable
00002ee0 g     F .text	00000034 altera_avalon_jtag_uart_write
0000005c g     F .text	00000040 si5338_complete_transfer
000023cc g     F .text	0000069c ___vfprintf_internal_r
00002c78 g     F .text	00000144 alt_printf
00000020 g     F .text	0000003c _start
00003668 g     O .bss	00000014 xcvr_config
00002f14 g     F .text	000000e4 alt_avalon_spi_command
00001220 g     F .text	00000080 lms_pa_enable
00002ebc g     F .text	00000004 alt_sys_init
000013f0 g     F .text	00000060 lms_lna_select
00000ffc g     F .text	00000090 lms_get_loopback_mode
000021b8 g     F .text	00000038 __mulsi3
00003470 g       *ABS*	00000000 __ram_rwdata_start
00003008 g       *ABS*	00000000 __ram_rodata_start
00001118 g     F .text	0000007c lms_pa_disable
0000367c g       *ABS*	00000000 __alt_stack_base
000012a0 g     F .text	000000b0 lms_tx_loopback_enable
000007f8 g     F .text	000000c8 lms_spi_read
00001194 g     F .text	0000008c lms_tx_loopback_disable
00002a8c g     F .text	000000bc __sfvwrite_small_dev
00003658 g       *ABS*	00000000 __bss_start
000001f4 g     F .text	000001d0 main
00003664 g     O .bss	00000004 alt_envp
0000355c g     O .rwdata	00000004 uart_0
00001778 g     F .text	000000b8 lms_lpf_enable
00000fb4 g     F .text	00000048 lms_power_down
00000138 g     F .text	000000bc si5338_read
00003560 g     O .rwdata	00000004 alt_errno
000016f0 g     F .text	00000038 lms_get_bandwidth
00001728 g     F .text	00000050 lms_lpf_bypass
000015d0 g     F .text	0000005c lms_lna_set_gain
000020e8 g     F .text	00000060 __divsi3
00000910 g     F .text	00000400 lms_set_frequency
00003008 g       *ABS*	00000000 __flash_rodata_start
00001550 g     F .text	00000080 lms_config_init
00002ec0 g     F .text	00000020 alt_irq_init
00003370 g     O .rodata	00000100 __clz_tab
00002b48 g     F .text	00000078 _write_r
00003550 g     O .rwdata	00000004 _impure_ptr
000032bc g     O .rodata	000000b2 lms_reg_dumpset
0000365c g     O .bss	00000004 alt_argc
0000167c g     F .text	00000074 lms_dither_enable
00000ecc g     F .text	00000044 lms_rx_enable
00000484 g     F .text	00000074 lms_lpf_init
00000df8 g     F .text	00000048 lms_tx_disable
00000f64 g     F .text	00000050 lms_pll_enable
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001944 g     F .text	000000bc dac_write
00003564 g       *ABS*	00000000 _edata
0000367c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001830 g     F .text	00000114 lms_loopback_disable
000013a8 g     F .text	00000048 lms_rxvga2_disable
00003000 g     F .text	00000008 altera_nios2_qsys_irq_init
0000000c g       .entry	00000000 exit
00002148 g     F .text	00000060 __modsi3
00014000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
0000232c g     F .text	00000020 strlen
00002dbc g     F .text	00000050 alt_putchar
00002ffc g     F .text	00000004 alt_icache_flush_all
00002a68 g     F .text	00000024 __vfprintf_internal
00001450 g     F .text	00000100 lms_loopback_enable
0000162c g     F .text	00000050 lms_dither_disable
00002be0 g     F .text	0000006c alt_load
000010d0 g     F .text	00000048 lms_peakdetect_enable



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6ad5414 	ori	gp,gp,46416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	108d9614 	ori	r2,r2,13912

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18cd9f14 	ori	r3,r3,13948

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0002be00 	call	2be0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	0002c4c0 	call	2c4c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <si5338_complete_transfer>:
#define OC_I2C_TIP 			(1<<1)
#define OC_I2C_RXACK 		(1<<7)
#define OC_I2C_NACK 		(1<<3)

void si5338_complete_transfer( uint8_t check_rxack ) {
	if( (IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP) == 0 ) {
      5c:	00c000b4 	movhi	r3,2
      60:	18d80104 	addi	r3,r3,24580
      64:	18800023 	ldbuio	r2,0(r3)
      68:	1080008c 	andi	r2,r2,2
      6c:	103ffd26 	beq	r2,zero,64 <si5338_complete_transfer+0x8>
		while( (IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP) == 0 ) { } ;
	}
	while( IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP ) { } ;
      70:	00c000b4 	movhi	r3,2
      74:	18d80104 	addi	r3,r3,24580
      78:	18800023 	ldbuio	r2,0(r3)
      7c:	1080008c 	andi	r2,r2,2
      80:	103ffb1e 	bne	r2,zero,70 <si5338_complete_transfer+0x14>
	while( check_rxack && IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_RXACK ) { } ;
      84:	20803fcc 	andi	r2,r4,255
      88:	10000326 	beq	r2,zero,98 <si5338_complete_transfer+0x3c>
      8c:	18800023 	ldbuio	r2,0(r3)
      90:	1080200c 	andi	r2,r2,128
      94:	003ffc06 	br	88 <si5338_complete_transfer+0x2c>
      98:	f800283a 	ret

0000009c <si5338_write>:

	*data = IORD_8DIRECT(I2C, OC_I2C_DATA) ;
	return ;
}

void si5338_write( uint8_t addr, uint8_t data ) {
      9c:	defffa04 	addi	sp,sp,-24
      a0:	dcc00315 	stw	r19,12(sp)
      a4:	dc800215 	stw	r18,8(sp)
      a8:	dc000015 	stw	r16,0(sp)
      ac:	2827883a 	mov	r19,r5
      b0:	2021883a 	mov	r16,r4

	// Set the address to the Si5338
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C) ;
      b4:	048000b4 	movhi	r18,2
      b8:	949800c4 	addi	r18,r18,24579
      bc:	00803804 	movi	r2,224

	*data = IORD_8DIRECT(I2C, OC_I2C_DATA) ;
	return ;
}

void si5338_write( uint8_t addr, uint8_t data ) {
      c0:	dfc00515 	stw	ra,20(sp)
      c4:	dd000415 	stw	r20,16(sp)
      c8:	dc400115 	stw	r17,4(sp)

	// Set the address to the Si5338
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C) ;
      cc:	90800025 	stbio	r2,0(r18)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_STA | OC_I2C_WR ) ;
      d0:	044000b4 	movhi	r17,2
      d4:	8c580104 	addi	r17,r17,24580
      d8:	00802404 	movi	r2,144
      dc:	88800025 	stbio	r2,0(r17)
	si5338_complete_transfer( 1 ) ;
      e0:	05000044 	movi	r20,1
      e4:	a009883a 	mov	r4,r20
      e8:	000005c0 	call	5c <si5338_complete_transfer>

	IOWR_8DIRECT(I2C, OC_I2C_DATA, addr) ;
      ec:	84003fcc 	andi	r16,r16,255
      f0:	94000025 	stbio	r16,0(r18)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_CMD_STATUS | OC_I2C_WR ) ;
      f4:	00800504 	movi	r2,20
      f8:	88800025 	stbio	r2,0(r17)
	si5338_complete_transfer( 1 ) ;
      fc:	a009883a 	mov	r4,r20
     100:	000005c0 	call	5c <si5338_complete_transfer>

	IOWR_8DIRECT(I2C, OC_I2C_DATA, data ) ;
     104:	9cc03fcc 	andi	r19,r19,255
     108:	94c00025 	stbio	r19,0(r18)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_WR | OC_I2C_STO ) ;
     10c:	00801404 	movi	r2,80
     110:	88800025 	stbio	r2,0(r17)
	si5338_complete_transfer( 0 ) ;
     114:	0009883a 	mov	r4,zero

	return ;
}
     118:	dfc00517 	ldw	ra,20(sp)
     11c:	dd000417 	ldw	r20,16(sp)
     120:	dcc00317 	ldw	r19,12(sp)
     124:	dc800217 	ldw	r18,8(sp)
     128:	dc400117 	ldw	r17,4(sp)
     12c:	dc000017 	ldw	r16,0(sp)
     130:	dec00604 	addi	sp,sp,24
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_CMD_STATUS | OC_I2C_WR ) ;
	si5338_complete_transfer( 1 ) ;

	IOWR_8DIRECT(I2C, OC_I2C_DATA, data ) ;
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_WR | OC_I2C_STO ) ;
	si5338_complete_transfer( 0 ) ;
     134:	000005c1 	jmpi	5c <si5338_complete_transfer>

00000138 <si5338_read>:
	}
	while( IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP ) { } ;
	while( check_rxack && IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_RXACK ) { } ;
}

void si5338_read( uint8_t addr, uint8_t *data ) {
     138:	defff904 	addi	sp,sp,-28
     13c:	dd400515 	stw	r21,20(sp)
     140:	dcc00315 	stw	r19,12(sp)
     144:	dc000015 	stw	r16,0(sp)
     148:	282b883a 	mov	r21,r5
     14c:	2021883a 	mov	r16,r4

	// Set the address to the Si5338
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C ) ;
     150:	04c000b4 	movhi	r19,2
     154:	9cd800c4 	addi	r19,r19,24579
     158:	00803804 	movi	r2,224
	}
	while( IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_TIP ) { } ;
	while( check_rxack && IORD_8DIRECT(I2C, OC_I2C_CMD_STATUS)&OC_I2C_RXACK ) { } ;
}

void si5338_read( uint8_t addr, uint8_t *data ) {
     15c:	dfc00615 	stw	ra,24(sp)
     160:	dd000415 	stw	r20,16(sp)
     164:	dc800215 	stw	r18,8(sp)
     168:	dc400115 	stw	r17,4(sp)

	// Set the address to the Si5338
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C ) ;
     16c:	98800025 	stbio	r2,0(r19)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_STA | OC_I2C_WR ) ;
     170:	048000b4 	movhi	r18,2
     174:	94980104 	addi	r18,r18,24580
     178:	05002404 	movi	r20,144
     17c:	95000025 	stbio	r20,0(r18)
	si5338_complete_transfer( 1 ) ;
     180:	04400044 	movi	r17,1
     184:	8809883a 	mov	r4,r17
     188:	000005c0 	call	5c <si5338_complete_transfer>

	IOWR_8DIRECT(I2C, OC_I2C_DATA, addr ) ;
     18c:	84003fcc 	andi	r16,r16,255
     190:	9c000025 	stbio	r16,0(r19)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_WR | OC_I2C_STO ) ;
     194:	00801404 	movi	r2,80
     198:	90800025 	stbio	r2,0(r18)
	si5338_complete_transfer( 1 ) ;
     19c:	8809883a 	mov	r4,r17
     1a0:	000005c0 	call	5c <si5338_complete_transfer>

	// Next transfer is a read operation, so '1' in the read/write bit
	IOWR_8DIRECT(I2C, OC_I2C_DATA, SI5338_I2C | 1 ) ;
     1a4:	00803844 	movi	r2,225
     1a8:	98800025 	stbio	r2,0(r19)
	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_STA | OC_I2C_WR ) ;
     1ac:	95000025 	stbio	r20,0(r18)
	si5338_complete_transfer( 1 ) ;
     1b0:	8809883a 	mov	r4,r17
     1b4:	000005c0 	call	5c <si5338_complete_transfer>

	IOWR_8DIRECT(I2C, OC_I2C_CMD_STATUS, OC_I2C_RD | OC_I2C_NACK | OC_I2C_STO ) ;
     1b8:	00801a04 	movi	r2,104
     1bc:	90800025 	stbio	r2,0(r18)
	si5338_complete_transfer( 0 ) ;
     1c0:	0009883a 	mov	r4,zero
     1c4:	000005c0 	call	5c <si5338_complete_transfer>

	*data = IORD_8DIRECT(I2C, OC_I2C_DATA) ;
     1c8:	98800023 	ldbuio	r2,0(r19)
     1cc:	a8800005 	stb	r2,0(r21)
	return ;
}
     1d0:	dfc00617 	ldw	ra,24(sp)
     1d4:	dd400517 	ldw	r21,20(sp)
     1d8:	dd000417 	ldw	r20,16(sp)
     1dc:	dcc00317 	ldw	r19,12(sp)
     1e0:	dc800217 	ldw	r18,8(sp)
     1e4:	dc400117 	ldw	r17,4(sp)
     1e8:	dc000017 	ldw	r16,0(sp)
     1ec:	dec00704 	addi	sp,sp,28
     1f0:	f800283a 	ret

000001f4 <main>:
	return ;
}

// Entry point
int main()
{
     1f4:	defffc04 	addi	sp,sp,-16
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
     1f8:	01000034 	movhi	r4,0
     1fc:	210c0204 	addi	r4,r4,12296
	return ;
}

// Entry point
int main()
{
     200:	dfc00315 	stw	ra,12(sp)
     204:	dc400215 	stw	r17,8(sp)
     208:	dc000115 	stw	r16,4(sp)
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
     20c:	0002e0c0 	call	2e0c <alt_putstr>
  alt_putstr("---------------------------------------\n");
     210:	01000034 	movhi	r4,0
     214:	210c0d04 	addi	r4,r4,12340
     218:	0002e0c0 	call	2e0c <alt_putstr>

  xcvr_config.tx_freq_hz = 500000000;
     21c:	00c00034 	movhi	r3,0
     220:	18cd9a04 	addi	r3,r3,13928
  xcvr_config.rx_freq_hz = 500000000;

  xcvr_config.loopback_mode = LB_RF_LNA_START;
     224:	008000c4 	movi	r2,3
     228:	18800215 	stw	r2,8(r3)
  xcvr_config.lna = LNA_1;
     22c:	00800044 	movi	r2,1
{
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
  alt_putstr("---------------------------------------\n");

  xcvr_config.tx_freq_hz = 500000000;
     230:	01477374 	movhi	r5,7629
     234:	29594004 	addi	r5,r5,25856
  xcvr_config.rx_freq_hz = 500000000;

  xcvr_config.loopback_mode = LB_RF_LNA_START;
  xcvr_config.lna = LNA_1;
     238:	18800315 	stw	r2,12(r3)
  xcvr_config.pa = PA_2;
     23c:	00800084 	movi	r2,2

  lms_config_init(&xcvr_config);
     240:	1809883a 	mov	r4,r3
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
  alt_putstr("---------------------------------------\n");

  xcvr_config.tx_freq_hz = 500000000;
  xcvr_config.rx_freq_hz = 500000000;
     244:	19400115 	stw	r5,4(r3)
{
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
  alt_putstr("---------------------------------------\n");

  xcvr_config.tx_freq_hz = 500000000;
     248:	19400015 	stw	r5,0(r3)
  xcvr_config.rx_freq_hz = 500000000;

  xcvr_config.loopback_mode = LB_RF_LNA_START;
  xcvr_config.lna = LNA_1;
  xcvr_config.pa = PA_2;
     24c:	18800415 	stw	r2,16(r3)

  lms_config_init(&xcvr_config);
     250:	00015500 	call	1550 <lms_config_init>

  // Set the prescaler for 384kHz with a 38.4MHz clock
  IOWR_16DIRECT(I2C, OC_I2C_PRESCALER, 0x20 ) ;
     254:	00c00804 	movi	r3,32
     258:	008000b4 	movhi	r2,2
     25c:	10980004 	addi	r2,r2,24576
     260:	10c0002d 	sthio	r3,0(r2)
  IOWR_8DIRECT(I2C, OC_I2C_CTRL, OC_I2C_ENABLE ) ;
     264:	00c02004 	movi	r3,128
     268:	10800084 	addi	r2,r2,2
     26c:	10c00025 	stbio	r3,0(r2)

  {
	  printf( "Si5338 Register Table\n" ) ;
     270:	01000034 	movhi	r4,0
     274:	210c1804 	addi	r4,r4,12384
     278:	00023180 	call	2318 <puts>
	  printf( "---------------------\n" ) ;
     27c:	01000034 	movhi	r4,0
     280:	210c1e04 	addi	r4,r4,12408
     284:	00023180 	call	2318 <puts>
	  uint8_t i ;
	  for( i = 0 ; ; i++ ) {
		  si5338_read( i, &data ) ;
     288:	d80b883a 	mov	r5,sp
     28c:	0009883a 	mov	r4,zero
     290:	00001380 	call	138 <si5338_read>
		  printf( "addr: %d  data: %x\n", i, data ) ;
     294:	d9800003 	ldbu	r6,0(sp)
     298:	01000034 	movhi	r4,0
     29c:	210c2404 	addi	r4,r4,12432
     2a0:	000b883a 	mov	r5,zero
     2a4:	00021f00 	call	21f0 <printf>
     2a8:	0023883a 	mov	r17,zero

  {
	  printf( "Si5338 Register Table\n" ) ;
	  printf( "---------------------\n" ) ;
	  uint8_t i ;
	  for( i = 0 ; ; i++ ) {
     2ac:	8c400044 	addi	r17,r17,1
		  si5338_read( i, &data ) ;
     2b0:	8c003fcc 	andi	r16,r17,255
     2b4:	8009883a 	mov	r4,r16
     2b8:	d80b883a 	mov	r5,sp
     2bc:	00001380 	call	138 <si5338_read>
		  printf( "addr: %d  data: %x\n", i, data ) ;
     2c0:	d9800003 	ldbu	r6,0(sp)
     2c4:	01000034 	movhi	r4,0
     2c8:	210c2404 	addi	r4,r4,12432
     2cc:	800b883a 	mov	r5,r16
     2d0:	00021f00 	call	21f0 <printf>
		  if( i == 255 ) break ;
     2d4:	00803fc4 	movi	r2,255
     2d8:	80bff41e 	bne	r16,r2,2ac <main+0xb8>
  }

  /* Write test for si5338 */
  {
	  uint8_t i ;
	  si5338_read( 30 ,&data ) ;
     2dc:	01000784 	movi	r4,30
     2e0:	d80b883a 	mov	r5,sp
     2e4:	00001380 	call	138 <si5338_read>
	  i = data ;
	  printf( "data1: %x\n", data ) ;
     2e8:	dc000003 	ldbu	r16,0(sp)
     2ec:	01000034 	movhi	r4,0
     2f0:	210c2904 	addi	r4,r4,12452
     2f4:	800b883a 	mov	r5,r16
     2f8:	00021f00 	call	21f0 <printf>
	  si5338_write( 30, 0xe3 ) ;
     2fc:	01000784 	movi	r4,30
     300:	014038c4 	movi	r5,227
     304:	000009c0 	call	9c <si5338_write>
	  data = 0 ;
	  si5338_read( 30, &data ) ;
     308:	01000784 	movi	r4,30
     30c:	d80b883a 	mov	r5,sp
	  uint8_t i ;
	  si5338_read( 30 ,&data ) ;
	  i = data ;
	  printf( "data1: %x\n", data ) ;
	  si5338_write( 30, 0xe3 ) ;
	  data = 0 ;
     310:	d8000005 	stb	zero,0(sp)
	  si5338_read( 30, &data ) ;
     314:	00001380 	call	138 <si5338_read>
	  printf( "data2: %x\n", data ) ;
     318:	d9400003 	ldbu	r5,0(sp)
     31c:	01000034 	movhi	r4,0
     320:	210c2c04 	addi	r4,r4,12464
     324:	00021f00 	call	21f0 <printf>
	  si5338_write( 30, i ) ;
     328:	800b883a 	mov	r5,r16
     32c:	01000784 	movi	r4,30
     330:	000009c0 	call	9c <si5338_write>
	  data = 1 ;
     334:	00800044 	movi	r2,1
	  si5338_read( 30, &data ) ;
     338:	01000784 	movi	r4,30
     33c:	d80b883a 	mov	r5,sp
	  si5338_write( 30, 0xe3 ) ;
	  data = 0 ;
	  si5338_read( 30, &data ) ;
	  printf( "data2: %x\n", data ) ;
	  si5338_write( 30, i ) ;
	  data = 1 ;
     340:	d8800005 	stb	r2,0(sp)
	  si5338_read( 30, &data ) ;
     344:	00001380 	call	138 <si5338_read>
	  printf( "data3: %x\n", data ) ;
     348:	d9400003 	ldbu	r5,0(sp)
     34c:	01000034 	movhi	r4,0
     350:	210c2f04 	addi	r4,r4,12476
     354:	00021f00 	call	21f0 <printf>
  /* Event loop never exits. */
  {
	  while(1)
	  {
		  // Check if anything is in the JTAG UART
		  uint32_t reg = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE) ;
     358:	008000b4 	movhi	r2,2
     35c:	10880004 	addi	r2,r2,8192
     360:	10c00037 	ldwio	r3,0(r2)
		  if( reg & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK )
     364:	18a0000c 	andi	r2,r3,32768
     368:	10000926 	beq	r2,zero,390 <main+0x19c>
     36c:	010000b4 	movhi	r4,2
     370:	21100204 	addi	r4,r4,16392
		  {
			  // Get value from JTAG UART
			  uint8_t letter = (uint8_t)(reg & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) ;

			  // Write it out to the FSK UART
			  while( (IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) == 0 ) { ; }
     374:	20800037 	ldwio	r2,0(r4)
     378:	1080100c 	andi	r2,r2,64
     37c:	103ffd26 	beq	r2,zero,374 <main+0x180>
			  IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, letter) ;
     380:	18c03fcc 	andi	r3,r3,255
     384:	008000b4 	movhi	r2,2
     388:	10900104 	addi	r2,r2,16388
     38c:	10c00035 	stwio	r3,0(r2)
		  }

		  // Check if anything is in the FSK UART
		  if( IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK )
     390:	008000b4 	movhi	r2,2
     394:	10900204 	addi	r2,r2,16392
     398:	10800037 	ldwio	r2,0(r2)
     39c:	1080200c 	andi	r2,r2,128
     3a0:	103fed26 	beq	r2,zero,358 <main+0x164>
		  {
			  uint8_t val ;
			  val = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE) ;
     3a4:	008000b4 	movhi	r2,2
     3a8:	10900004 	addi	r2,r2,16384
     3ac:	11400037 	ldwio	r5,0(r2)

			  // Write it out the JTAG UART
			  alt_printf( "%c", val ) ;
     3b0:	01000034 	movhi	r4,0
     3b4:	210c3204 	addi	r4,r4,12488
     3b8:	29403fcc 	andi	r5,r5,255
     3bc:	0002c780 	call	2c78 <alt_printf>
     3c0:	003fe506 	br	358 <main+0x164>

000003c4 <lms_print_frequency>:
}

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
	alt_printf( "  nint     : %x\n", f->nint ) ;
     3c4:	2140000b 	ldhu	r5,0(r4)
	return ;
}

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
     3c8:	defffe04 	addi	sp,sp,-8
     3cc:	dc000015 	stw	r16,0(sp)
     3d0:	2021883a 	mov	r16,r4
	alt_printf( "  nint     : %x\n", f->nint ) ;
     3d4:	01000034 	movhi	r4,0
     3d8:	210c3304 	addi	r4,r4,12492
	return ;
}

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
     3dc:	dfc00115 	stw	ra,4(sp)
	alt_printf( "  nint     : %x\n", f->nint ) ;
     3e0:	0002c780 	call	2c78 <alt_printf>
	alt_printf( "  nfrac    : %x\n", f->nfrac ) ;
     3e4:	81400117 	ldw	r5,4(r16)
     3e8:	01000034 	movhi	r4,0
     3ec:	210c3804 	addi	r4,r4,12512
     3f0:	0002c780 	call	2c78 <alt_printf>
	alt_printf( "  freqsel  : %x\n", f->freqsel ) ;
     3f4:	81400203 	ldbu	r5,8(r16)
     3f8:	01000034 	movhi	r4,0
     3fc:	210c3d04 	addi	r4,r4,12532

    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}
     400:	dfc00117 	ldw	ra,4(sp)
     404:	dc000017 	ldw	r16,0(sp)
     408:	dec00204 	addi	sp,sp,8
// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
	alt_printf( "  nint     : %x\n", f->nint ) ;
	alt_printf( "  nfrac    : %x\n", f->nfrac ) ;
	alt_printf( "  freqsel  : %x\n", f->freqsel ) ;
     40c:	0002c781 	jmpi	2c78 <alt_printf>

00000410 <lms_spi_write>:
	return ;
}

// SPI Write
void lms_spi_write( uint8_t address, uint8_t val )
{
     410:	defff904 	addi	sp,sp,-28
     414:	dc400515 	stw	r17,20(sp)
     418:	dc000415 	stw	r16,16(sp)
     41c:	2823883a 	mov	r17,r5
     420:	2021883a 	mov	r16,r4
	if( LMS_VERBOSE )
	{
		alt_printf( "w-addr: %x data: %x\n", address, val ) ;
     424:	81403fcc 	andi	r5,r16,255
     428:	89803fcc 	andi	r6,r17,255
     42c:	01000034 	movhi	r4,0
     430:	210c4204 	addi	r4,r4,12552
	return ;
}

// SPI Write
void lms_spi_write( uint8_t address, uint8_t val )
{
     434:	dfc00615 	stw	ra,24(sp)
	if( LMS_VERBOSE )
	{
		alt_printf( "w-addr: %x data: %x\n", address, val ) ;
     438:	0002c780 	call	2c78 <alt_printf>
	/*if( address > 0x7f )
	{
		alt_printf( "Invalid write address: %x\n", address ) ;
	} else*/ 
    {
		uint8_t data[2] = { address |= LMS_WRITE, val } ;
     43c:	00bfe004 	movi	r2,-128
     440:	80a0b03a 	or	r16,r16,r2
		alt_avalon_spi_command( SPI_0_BASE, 0, 2, data, 0, 0, 0 ) ;
     444:	010000b4 	movhi	r4,2
     448:	21040004 	addi	r4,r4,4096
     44c:	000b883a 	mov	r5,zero
     450:	01800084 	movi	r6,2
     454:	d9c00304 	addi	r7,sp,12
	/*if( address > 0x7f )
	{
		alt_printf( "Invalid write address: %x\n", address ) ;
	} else*/ 
    {
		uint8_t data[2] = { address |= LMS_WRITE, val } ;
     458:	dc000305 	stb	r16,12(sp)
     45c:	dc400345 	stb	r17,13(sp)
		alt_avalon_spi_command( SPI_0_BASE, 0, 2, data, 0, 0, 0 ) ;
     460:	d8000015 	stw	zero,0(sp)
     464:	d8000115 	stw	zero,4(sp)
     468:	d8000215 	stw	zero,8(sp)
     46c:	0002f140 	call	2f14 <alt_avalon_spi_command>
	}
	return ;
}
     470:	dfc00617 	ldw	ra,24(sp)
     474:	dc400517 	ldw	r17,20(sp)
     478:	dc000417 	ldw	r16,16(sp)
     47c:	dec00704 	addi	sp,sp,28
     480:	f800283a 	ret

00000484 <lms_lpf_init>:

	return ;
}

void lms_lpf_init(void)
{
     484:	defffe04 	addi	sp,sp,-8
     488:	dc000015 	stw	r16,0(sp)
	lms_spi_write( 0x06, 0x0d ) ;
     48c:	01000184 	movi	r4,6
	lms_spi_write( 0x17, 0x43 ) ;
     490:	040010c4 	movi	r16,67
	return ;
}

void lms_lpf_init(void)
{
	lms_spi_write( 0x06, 0x0d ) ;
     494:	01400344 	movi	r5,13

	return ;
}

void lms_lpf_init(void)
{
     498:	dfc00115 	stw	ra,4(sp)
	lms_spi_write( 0x06, 0x0d ) ;
     49c:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x17, 0x43 ) ;
     4a0:	800b883a 	mov	r5,r16
     4a4:	010005c4 	movi	r4,23
     4a8:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x27, 0x43 ) ;
     4ac:	800b883a 	mov	r5,r16
     4b0:	010009c4 	movi	r4,39
     4b4:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x41, 0x1f ) ;
     4b8:	01001044 	movi	r4,65
     4bc:	014007c4 	movi	r5,31
     4c0:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x44, 1<<3 ) ;
	//lms_spi_write( 0x45, 0x1f<<3 ) ;
	lms_spi_write( 0x48, 0xc  ) ;
     4c4:	04000304 	movi	r16,12
{
	lms_spi_write( 0x06, 0x0d ) ;
	lms_spi_write( 0x17, 0x43 ) ;
	lms_spi_write( 0x27, 0x43 ) ;
	lms_spi_write( 0x41, 0x1f ) ;
	lms_spi_write( 0x44, 1<<3 ) ;
     4c8:	01001104 	movi	r4,68
     4cc:	01400204 	movi	r5,8
     4d0:	00004100 	call	410 <lms_spi_write>
	//lms_spi_write( 0x45, 0x1f<<3 ) ;
	lms_spi_write( 0x48, 0xc  ) ;
     4d4:	800b883a 	mov	r5,r16
     4d8:	01001204 	movi	r4,72
     4dc:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x49, 0xc ) ;
     4e0:	800b883a 	mov	r5,r16
     4e4:	01001244 	movi	r4,73
	return ;
}
     4e8:	dfc00117 	ldw	ra,4(sp)
     4ec:	dc000017 	ldw	r16,0(sp)
     4f0:	dec00204 	addi	sp,sp,8
	lms_spi_write( 0x27, 0x43 ) ;
	lms_spi_write( 0x41, 0x1f ) ;
	lms_spi_write( 0x44, 1<<3 ) ;
	//lms_spi_write( 0x45, 0x1f<<3 ) ;
	lms_spi_write( 0x48, 0xc  ) ;
	lms_spi_write( 0x49, 0xc ) ;
     4f4:	00004101 	jmpi	410 <lms_spi_write>

000004f8 <lms_calibrate_dc>:
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}

void lms_calibrate_dc(void)
{
     4f8:	defff604 	addi	sp,sp,-40
     4fc:	dc800215 	stw	r18,8(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     500:	04800244 	movi	r18,9
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}

void lms_calibrate_dc(void)
{
     504:	dd400515 	stw	r21,20(sp)
     508:	dd000415 	stw	r20,16(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
	lms_spi_write( 0x43, 0x08 ) ; // I filter
     50c:	05400204 	movi	r21,8
     510:	050010c4 	movi	r20,67
}

void lms_calibrate_dc(void)
{
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     514:	9009883a 	mov	r4,r18
     518:	01402304 	movi	r5,140
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}

void lms_calibrate_dc(void)
{
     51c:	dfc00915 	stw	ra,36(sp)
     520:	df000815 	stw	fp,32(sp)
     524:	ddc00715 	stw	r23,28(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
	lms_spi_write( 0x43, 0x08 ) ; // I filter
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
     528:	07000a04 	movi	fp,40
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}

void lms_calibrate_dc(void)
{
     52c:	dd800615 	stw	r22,24(sp)
     530:	dcc00315 	stw	r19,12(sp)
     534:	dc400115 	stw	r17,4(sp)
     538:	dc000015 	stw	r16,0(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     53c:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x43, 0x08 ) ; // I filter
     540:	a009883a 	mov	r4,r20
     544:	a80b883a 	mov	r5,r21
     548:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
     54c:	a009883a 	mov	r4,r20
     550:	e00b883a 	mov	r5,fp
     554:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x43, 0x08 ) ; // Stop calibration
     558:	a009883a 	mov	r4,r20
     55c:	a80b883a 	mov	r5,r21
     560:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x43, 0x09 ) ; // Q Filter
     564:	a009883a 	mov	r4,r20
     568:	900b883a 	mov	r5,r18
     56c:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x43, 0x29 ) ;
     570:	a009883a 	mov	r4,r20
     574:	01400a44 	movi	r5,41
     578:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;
     57c:	05802104 	movi	r22,132
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
	lms_spi_write( 0x43, 0x08 ) ; // Stop calibration

	lms_spi_write( 0x43, 0x09 ) ; // Q Filter
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;
     580:	a009883a 	mov	r4,r20
     584:	900b883a 	mov	r5,r18
     588:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x09, 0x84 ) ;
     58c:	b00b883a 	mov	r5,r22
     590:	9009883a 	mov	r4,r18
     594:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators
     598:	05c01984 	movi	r23,102
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
     59c:	9009883a 	mov	r4,r18
     5a0:	01402504 	movi	r5,148
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators

	lms_spi_write( 0x63, 0x08 ) ; // DC reference module
     5a4:	040018c4 	movi	r16,99
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
     5a8:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators
     5ac:	b809883a 	mov	r4,r23
     5b0:	000b883a 	mov	r5,zero
     5b4:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x63, 0x08 ) ; // DC reference module
     5b8:	8009883a 	mov	r4,r16
     5bc:	a80b883a 	mov	r5,r21
     5c0:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x28 ) ;
     5c4:	8009883a 	mov	r4,r16
     5c8:	e00b883a 	mov	r5,fp
     5cc:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x08 ) ;
     5d0:	8009883a 	mov	r4,r16
     5d4:	a80b883a 	mov	r5,r21
     5d8:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x63, 0x09 ) ;
     5dc:	8009883a 	mov	r4,r16
     5e0:	900b883a 	mov	r5,r18
     5e4:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x29 ) ;
     5e8:	8009883a 	mov	r4,r16
     5ec:	01400a44 	movi	r5,41
     5f0:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x09 ) ;

	lms_spi_write( 0x63, 0x0a ) ;
     5f4:	04c00284 	movi	r19,10
	lms_spi_write( 0x63, 0x28 ) ;
	lms_spi_write( 0x63, 0x08 ) ;

	lms_spi_write( 0x63, 0x09 ) ;
	lms_spi_write( 0x63, 0x29 ) ;
	lms_spi_write( 0x63, 0x09 ) ;
     5f8:	8009883a 	mov	r4,r16
     5fc:	900b883a 	mov	r5,r18
     600:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x63, 0x0a ) ;
     604:	980b883a 	mov	r5,r19
     608:	8009883a 	mov	r4,r16
     60c:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x2a ) ;
     610:	8009883a 	mov	r4,r16
     614:	01400a84 	movi	r5,42
     618:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x0a ) ;

	lms_spi_write( 0x63, 0x0b ) ;
     61c:	044002c4 	movi	r17,11
	lms_spi_write( 0x63, 0x29 ) ;
	lms_spi_write( 0x63, 0x09 ) ;

	lms_spi_write( 0x63, 0x0a ) ;
	lms_spi_write( 0x63, 0x2a ) ;
	lms_spi_write( 0x63, 0x0a ) ;
     620:	8009883a 	mov	r4,r16
     624:	980b883a 	mov	r5,r19
     628:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x63, 0x0b ) ;
     62c:	880b883a 	mov	r5,r17
     630:	8009883a 	mov	r4,r16
     634:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x2b ) ;
     638:	8009883a 	mov	r4,r16
     63c:	01400ac4 	movi	r5,43
     640:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x0b ) ;
     644:	8009883a 	mov	r4,r16
     648:	880b883a 	mov	r5,r17

	lms_spi_write( 0x63, 0x0c ) ;
     64c:	04400304 	movi	r17,12
	lms_spi_write( 0x63, 0x2a ) ;
	lms_spi_write( 0x63, 0x0a ) ;

	lms_spi_write( 0x63, 0x0b ) ;
	lms_spi_write( 0x63, 0x2b ) ;
	lms_spi_write( 0x63, 0x0b ) ;
     650:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x63, 0x0c ) ;
     654:	880b883a 	mov	r5,r17
     658:	8009883a 	mov	r4,r16
     65c:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x2c ) ;
     660:	8009883a 	mov	r4,r16
     664:	01400b04 	movi	r5,44
     668:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x63, 0x0c ) ;
     66c:	8009883a 	mov	r4,r16
     670:	880b883a 	mov	r5,r17
     674:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x66, 0x0a ) ;
     678:	b809883a 	mov	r4,r23
     67c:	980b883a 	mov	r5,r19
     680:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     684:	044015c4 	movi	r17,87
	lms_spi_write( 0x63, 0x0c ) ;
	lms_spi_write( 0x63, 0x2c ) ;
	lms_spi_write( 0x63, 0x0c ) ;

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;
     688:	9009883a 	mov	r4,r18
     68c:	b00b883a 	mov	r5,r22
     690:	00004100 	call	410 <lms_spi_write>

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
	lms_spi_write( 0x09, 0x42 ) ;
     694:	04c01084 	movi	r19,66

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     698:	8809883a 	mov	r4,r17
     69c:	01400104 	movi	r5,4
	lms_spi_write( 0x09, 0x42 ) ;

	lms_spi_write( 0x33, 0x08 ) ;
     6a0:	04000cc4 	movi	r16,51

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     6a4:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x09, 0x42 ) ;
     6a8:	9009883a 	mov	r4,r18
     6ac:	980b883a 	mov	r5,r19
     6b0:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x33, 0x08 ) ;
     6b4:	8009883a 	mov	r4,r16
     6b8:	a80b883a 	mov	r5,r21
     6bc:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x33, 0x28 ) ;
     6c0:	8009883a 	mov	r4,r16
     6c4:	e00b883a 	mov	r5,fp
     6c8:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x33, 0x08 ) ;
     6cc:	8009883a 	mov	r4,r16
     6d0:	a80b883a 	mov	r5,r21
     6d4:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x33, 0x09 ) ;
     6d8:	8009883a 	mov	r4,r16
     6dc:	900b883a 	mov	r5,r18
     6e0:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x33, 0x29 ) ;
     6e4:	8009883a 	mov	r4,r16
     6e8:	01400a44 	movi	r5,41
     6ec:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x33, 0x09 ) ;
     6f0:	8009883a 	mov	r4,r16
     6f4:	900b883a 	mov	r5,r18
     6f8:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x57, 0x84 ) ;
     6fc:	8809883a 	mov	r4,r17
     700:	b00b883a 	mov	r5,r22
     704:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x09, 0x81 ) ;
     708:	9009883a 	mov	r4,r18
     70c:	01402044 	movi	r5,129
     710:	00004100 	call	410 <lms_spi_write>

	lms_spi_write( 0x42, 0x77 ) ;
     714:	9809883a 	mov	r4,r19
     718:	01401dc4 	movi	r5,119
     71c:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x43, 0x7f ) ;
     720:	a009883a 	mov	r4,r20
     724:	01401fc4 	movi	r5,127

	return ;
}
     728:	dfc00917 	ldw	ra,36(sp)
     72c:	df000817 	ldw	fp,32(sp)
     730:	ddc00717 	ldw	r23,28(sp)
     734:	dd800617 	ldw	r22,24(sp)
     738:	dd400517 	ldw	r21,20(sp)
     73c:	dd000417 	ldw	r20,16(sp)
     740:	dcc00317 	ldw	r19,12(sp)
     744:	dc800217 	ldw	r18,8(sp)
     748:	dc400117 	ldw	r17,4(sp)
     74c:	dc000017 	ldw	r16,0(sp)
     750:	dec00a04 	addi	sp,sp,40

	lms_spi_write( 0x57, 0x84 ) ;
	lms_spi_write( 0x09, 0x81 ) ;

	lms_spi_write( 0x42, 0x77 ) ;
	lms_spi_write( 0x43, 0x7f ) ;
     754:	00004101 	jmpi	410 <lms_spi_write>

00000758 <lms_rxvga2_set_gain>:
	return ;
}

// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
     758:	defffe04 	addi	sp,sp,-8
     75c:	dc000015 	stw	r16,0(sp)
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
     760:	00800284 	movi	r2,10
     764:	240007cc 	andi	r16,r4,31
	return ;
}

// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
     768:	dfc00115 	stw	ra,4(sp)
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
     76c:	01000034 	movhi	r4,0
     770:	210c4804 	addi	r4,r4,12576
// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
     774:	1400010e 	bge	r2,r16,77c <lms_rxvga2_set_gain+0x24>
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
     778:	0002e0c0 	call	2e0c <alt_putstr>
	}
	lms_spi_write( 0x65, (0x1f)&gain ) ;
     77c:	800b883a 	mov	r5,r16
     780:	01001944 	movi	r4,101
	return ;
}
     784:	dfc00117 	ldw	ra,4(sp)
     788:	dc000017 	ldw	r16,0(sp)
     78c:	dec00204 	addi	sp,sp,8
	// go above 30dB
	if( (gain&0x1f) > 10 )
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
	}
	lms_spi_write( 0x65, (0x1f)&gain ) ;
     790:	00004101 	jmpi	410 <lms_spi_write>

00000794 <lms_rxvga1_enable>:

// Enable RXVGA1
void lms_rxvga1_enable()
{
	// Set bias current to nominal
	lms_spi_write( 0x7b, 0x33 ) ;
     794:	01001ec4 	movi	r4,123
     798:	01400cc4 	movi	r5,51
     79c:	00004101 	jmpi	410 <lms_spi_write>

000007a0 <lms_rxvga1_disable>:

// Disable RXVGA1
void lms_rxvga1_disable()
{
	// Set bias current to 0
	lms_spi_write( 0x7b, 0x03 ) ;
     7a0:	01001ec4 	movi	r4,123
     7a4:	014000c4 	movi	r5,3
     7a8:	00004101 	jmpi	410 <lms_spi_write>

000007ac <lms_soft_reset>:
	return ;
}

// Soft reset of the LMS
void lms_soft_reset( )
{
     7ac:	defffe04 	addi	sp,sp,-8
     7b0:	dc000015 	stw	r16,0(sp)
	lms_spi_write( 0x05, 0x12 ) ;
     7b4:	04000144 	movi	r16,5
     7b8:	8009883a 	mov	r4,r16
     7bc:	01400484 	movi	r5,18
	return ;
}

// Soft reset of the LMS
void lms_soft_reset( )
{
     7c0:	dfc00115 	stw	ra,4(sp)
	lms_spi_write( 0x05, 0x12 ) ;
     7c4:	00004100 	call	410 <lms_spi_write>
	lms_spi_write( 0x05, 0x32 ) ;
     7c8:	8009883a 	mov	r4,r16
     7cc:	01400c84 	movi	r5,50
	return ;
}
     7d0:	dfc00117 	ldw	ra,4(sp)
     7d4:	dc000017 	ldw	r16,0(sp)
     7d8:	dec00204 	addi	sp,sp,8

// Soft reset of the LMS
void lms_soft_reset( )
{
	lms_spi_write( 0x05, 0x12 ) ;
	lms_spi_write( 0x05, 0x32 ) ;
     7dc:	00004101 	jmpi	410 <lms_spi_write>

000007e0 <lms_lpf_disable>:
}

// Disable the LPF for a specific module
void lms_lpf_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
     7e0:	00801504 	movi	r2,84
     7e4:	20000126 	beq	r4,zero,7ec <lms_lpf_disable+0xc>
     7e8:	00800d04 	movi	r2,52
	lms_spi_write( reg, 0x00 ) ;
     7ec:	11003fcc 	andi	r4,r2,255
     7f0:	000b883a 	mov	r5,zero
     7f4:	00004101 	jmpi	410 <lms_spi_write>

000007f8 <lms_spi_read>:

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
	uint8_t rv ;
	if( address > 0x7f )
     7f8:	20c03fcc 	andi	r3,r4,255
     7fc:	18803fcc 	andi	r2,r3,255
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     800:	defff904 	addi	sp,sp,-28
	uint8_t rv ;
	if( address > 0x7f )
     804:	1080201c 	xori	r2,r2,128
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     808:	dc000415 	stw	r16,16(sp)
	uint8_t rv ;
	if( address > 0x7f )
     80c:	10bfe004 	addi	r2,r2,-128
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     810:	04000044 	movi	r16,1
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     814:	dc400515 	stw	r17,20(sp)
     818:	d9000305 	stb	r4,12(sp)
     81c:	2823883a 	mov	r17,r5
     820:	dfc00615 	stw	ra,24(sp)
	uint8_t rv ;
	if( address > 0x7f )
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     824:	010000b4 	movhi	r4,2
     828:	21040004 	addi	r4,r4,4096
     82c:	800d883a 	mov	r6,r16
     830:	d9c00304 	addi	r7,sp,12
     834:	000b883a 	mov	r5,zero

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
	uint8_t rv ;
	if( address > 0x7f )
     838:	1000050e 	bge	r2,zero,850 <lms_spi_read+0x58>
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
     83c:	19403fcc 	andi	r5,r3,255
     840:	01000034 	movhi	r4,0
     844:	210c5204 	addi	r4,r4,12616
     848:	0002c780 	call	2c78 <alt_printf>
     84c:	00001206 	br	898 <lms_spi_read+0xa0>
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     850:	d8000015 	stw	zero,0(sp)
     854:	d8000115 	stw	zero,4(sp)
     858:	dc000215 	stw	r16,8(sp)
     85c:	0002f140 	call	2f14 <alt_avalon_spi_command>
		rv = alt_avalon_spi_command( SPI_0_BASE, 0, 0, 0, 1, val, 0 ) ;
     860:	010000b4 	movhi	r4,2
     864:	21040004 	addi	r4,r4,4096
     868:	000b883a 	mov	r5,zero
     86c:	000d883a 	mov	r6,zero
     870:	000f883a 	mov	r7,zero
     874:	dc000015 	stw	r16,0(sp)
     878:	dc400115 	stw	r17,4(sp)
     87c:	d8000215 	stw	zero,8(sp)
     880:	0002f140 	call	2f14 <alt_avalon_spi_command>
		if( rv != 1 )
     884:	10803fcc 	andi	r2,r2,255
		{
			alt_putstr( "SPI data read did not work :(\n") ;
     888:	01000034 	movhi	r4,0
     88c:	210c5904 	addi	r4,r4,12644
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
		rv = alt_avalon_spi_command( SPI_0_BASE, 0, 0, 0, 1, val, 0 ) ;
		if( rv != 1 )
     890:	14000126 	beq	r2,r16,898 <lms_spi_read+0xa0>
		{
			alt_putstr( "SPI data read did not work :(\n") ;
     894:	0002e0c0 	call	2e0c <alt_putstr>
		}
	}
	if( LMS_VERBOSE )
	{
		alt_printf( "r-addr: %x data: %x\n", address, *val ) ;
     898:	89800003 	ldbu	r6,0(r17)
     89c:	d9400303 	ldbu	r5,12(sp)
     8a0:	01000034 	movhi	r4,0
     8a4:	210c6104 	addi	r4,r4,12676
     8a8:	0002c780 	call	2c78 <alt_printf>
	}
	return ;
}
     8ac:	dfc00617 	ldw	ra,24(sp)
     8b0:	dc400517 	ldw	r17,20(sp)
     8b4:	dc000417 	ldw	r16,16(sp)
     8b8:	dec00704 	addi	sp,sp,28
     8bc:	f800283a 	ret

000008c0 <lms_dump_registers>:

	return ;
}

void lms_dump_registers(void)
{
     8c0:	defffd04 	addi	sp,sp,-12
     8c4:	dc000115 	stw	r16,4(sp)
     8c8:	dfc00215 	stw	ra,8(sp)
     8cc:	0021883a 	mov	r16,zero
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
     8d0:	80803fcc 	andi	r2,r16,255
     8d4:	00c00034 	movhi	r3,0
     8d8:	18ccaf04 	addi	r3,r3,12988
     8dc:	1085883a 	add	r2,r2,r2
     8e0:	10c5883a 	add	r2,r2,r3
     8e4:	11000003 	ldbu	r4,0(r2)
     8e8:	d80b883a 	mov	r5,sp

void lms_dump_registers(void)
{
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
     8ec:	84000044 	addi	r16,r16,1
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
     8f0:	00007f80 	call	7f8 <lms_spi_read>

void lms_dump_registers(void)
{
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
     8f4:	80c03fcc 	andi	r3,r16,255
     8f8:	00802c84 	movi	r2,178
     8fc:	18bff41e 	bne	r3,r2,8d0 <lms_dump_registers+0x10>
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}
     900:	dfc00217 	ldw	ra,8(sp)
     904:	dc000117 	ldw	r16,4(sp)
     908:	dec00304 	addi	sp,sp,12
     90c:	f800283a 	ret

00000910 <lms_set_frequency>:
	return ;
}

// Set the frequency of a module
void lms_set_frequency( lms_module_t mod, uint32_t freq )
{
     910:	defff304 	addi	sp,sp,-52
     914:	dd800b15 	stw	r22,44(sp)
     918:	dc400615 	stw	r17,24(sp)
     91c:	dfc00c15 	stw	ra,48(sp)
     920:	dd400a15 	stw	r21,40(sp)
     924:	dd000915 	stw	r20,36(sp)
     928:	dcc00815 	stw	r19,32(sp)
     92c:	dc800715 	stw	r18,28(sp)
     930:	dc000515 	stw	r16,20(sp)
     934:	202d883a 	mov	r22,r4
     938:	2823883a 	mov	r17,r5
	// Select the base address based on which PLL we are configuring
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     93c:	20000926 	beq	r4,zero,964 <lms_set_frequency+0x54>
     940:	05000404 	movi	r20,16
     944:	00000806 	br	968 <lms_set_frequency+0x58>
		uint8_t i = 0 ;
		while( i < 16 )
		{
			if( (lfreq > bands[i].low) && (lfreq <= bands[i].high) )
			{
				freqsel = bands[i].value ;
     948:	01400304 	movi	r5,12
     94c:	00021b80 	call	21b8 <__mulsi3>
     950:	00c00034 	movhi	r3,0
     954:	18cc7f04 	addi	r3,r3,12796
     958:	10c5883a 	add	r2,r2,r3
     95c:	14c00203 	ldbu	r19,8(r2)
     960:	00001c06 	br	9d4 <lms_set_frequency+0xc4>

// Set the frequency of a module
void lms_set_frequency( lms_module_t mod, uint32_t freq )
{
	// Select the base address based on which PLL we are configuring
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     964:	05000804 	movi	r20,32
    uint32_t x;
	uint32_t reference = 38400000 ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
     968:	01000244 	movi	r4,9
     96c:	d80b883a 	mov	r5,sp
     970:	00007f80 	call	7f8 <lms_spi_read>
	data |= 0x05 ;
     974:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
     978:	01000244 	movi	r4,9
	uint32_t reference = 38400000 ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
	data |= 0x05 ;
     97c:	10800154 	ori	r2,r2,5
	lms_spi_write( 0x09, data ) ;
     980:	11403fcc 	andi	r5,r2,255
	uint32_t reference = 38400000 ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
	data |= 0x05 ;
     984:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
     988:	00004100 	call	410 <lms_spi_write>

	// Figure out freqsel
	if( lfreq < bands[0].low )
     98c:	00837734 	movhi	r2,3548
     990:	10aac7c4 	addi	r2,r2,-21729
     994:	14400e2e 	bgeu	r2,r17,9d0 <lms_set_frequency+0xc0>
	{
		// Too low
	} else if( lfreq > bands[15].high )
     998:	00b76ef4 	movhi	r2,56763
     99c:	10ac8004 	addi	r2,r2,-19968
     9a0:	14400b36 	bltu	r2,r17,9d0 <lms_set_frequency+0xc0>
     9a4:	0009883a 	mov	r4,zero
     9a8:	00c00034 	movhi	r3,0
     9ac:	18cc7f04 	addi	r3,r3,12796
     9b0:	01400404 	movi	r5,16
	} else
	{
		uint8_t i = 0 ;
		while( i < 16 )
		{
			if( (lfreq > bands[i].low) && (lfreq <= bands[i].high) )
     9b4:	18800017 	ldw	r2,0(r3)
     9b8:	1440022e 	bgeu	r2,r17,9c4 <lms_set_frequency+0xb4>
     9bc:	18800117 	ldw	r2,4(r3)
     9c0:	147fe12e 	bgeu	r2,r17,948 <lms_set_frequency+0x38>
			{
				freqsel = bands[i].value ;
				break ;
     9c4:	21000044 	addi	r4,r4,1
     9c8:	18c00304 	addi	r3,r3,12
	{
		// Too high!
	} else
	{
		uint8_t i = 0 ;
		while( i < 16 )
     9cc:	217ff91e 	bne	r4,r5,9b4 <lms_set_frequency+0xa4>
     9d0:	04c009c4 	movi	r19,39
			}
			i++ ;
		}
	}

    x = 1 << ((freqsel&7)-3);
     9d4:	9c803fcc 	andi	r18,r19,255
     9d8:	940001cc 	andi	r16,r18,7
     9dc:	843fff44 	addi	r16,r16,-3
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
     9e0:	05400044 	movi	r21,1
     9e4:	ac08983a 	sll	r4,r21,r16
     9e8:	880b883a 	mov	r5,r17
     9ec:	00021b80 	call	21b8 <__mulsi3>
     9f0:	100495fa 	slli	r2,r2,23
        temp  = temp + reference/2;
     9f4:	01804974 	movhi	r6,293
     9f8:	31be0004 	addi	r6,r6,-2048

    x = 1 << ((freqsel&7)-3);
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
     9fc:	000b883a 	mov	r5,zero
     a00:	1009883a 	mov	r4,r2
        temp  = temp + reference/2;
     a04:	1185883a 	add	r2,r2,r6
     a08:	1111803a 	cmpltu	r8,r2,r4
     a0c:	4151883a 	add	r8,r8,r5
     a10:	000f883a 	mov	r7,zero
     a14:	1009883a 	mov	r4,r2
        temp = temp/reference;
        nint = temp >> 23;
     a18:	018092b4 	movhi	r6,586
     a1c:	31bc0004 	addi	r6,r6,-4096
    x = 1 << ((freqsel&7)-3);
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
     a20:	400b883a 	mov	r5,r8
        temp = temp/reference;
        nint = temp >> 23;
     a24:	0001a000 	call	1a00 <__udivdi3>
        nfrac = temp - (nint << 23);

    }
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
     a28:	8810d17a 	srli	r8,r17,5
     a2c:	880cd0ba 	srli	r6,r17,2
     a30:	880ed33a 	srli	r7,r17,12
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
        temp = temp/reference;
        nint = temp >> 23;
     a34:	1812927a 	slli	r9,r3,9
        nfrac = temp - (nint << 23);

    }
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
     a38:	320dc83a 	sub	r6,r6,r8
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
        temp = temp/reference;
        nint = temp >> 23;
     a3c:	1004d5fa 	srli	r2,r2,23
        nfrac = temp - (nint << 23);

    }
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
     a40:	31cdc83a 	sub	r6,r6,r7
	nfrac <<= ((freqsel&7)-3) ;
     a44:	3420983a 	sll	r16,r6,r16
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
        temp = temp/reference;
        nint = temp >> 23;
     a48:	4884b03a 	or	r2,r9,r2
	nfrac <<= ((freqsel&7)-3) ;

	f.nint = nint ;
	f.nfrac = nfrac ;
	f.freqsel = freqsel ;
	lms_print_frequency( &f ) ;
     a4c:	d9000104 	addi	r4,sp,4
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
	nfrac <<= ((freqsel&7)-3) ;

	f.nint = nint ;
	f.nfrac = nfrac ;
	f.freqsel = freqsel ;
     a50:	dcc00305 	stb	r19,12(sp)

    }
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
	nfrac <<= ((freqsel&7)-3) ;

	f.nint = nint ;
     a54:	d880010d 	sth	r2,4(sp)
	f.nfrac = nfrac ;
     a58:	dc000215 	stw	r16,8(sp)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
        temp = temp/reference;
        nint = temp >> 23;
     a5c:	1027883a 	mov	r19,r2
	nfrac <<= ((freqsel&7)-3) ;

	f.nint = nint ;
	f.nfrac = nfrac ;
	f.freqsel = freqsel ;
	lms_print_frequency( &f ) ;
     a60:	00003c40 	call	3c4 <lms_print_frequency>

	// Program freqsel, selout (rx only), nint and nfrac
	if( mod == RX )
     a64:	b000081e 	bne	r22,zero,a88 <lms_set_frequency+0x178>
	{
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
     a68:	00965a34 	movhi	r2,22888
     a6c:	108bbfc4 	addi	r2,r2,12031
     a70:	1445803a 	cmpltu	r2,r2,r17
     a74:	948b883a 	add	r5,r18,r18
     a78:	1545883a 	add	r2,r2,r21
     a7c:	294b883a 	add	r5,r5,r5
     a80:	288ab03a 	or	r5,r5,r2
     a84:	00000906 	br	aac <lms_set_frequency+0x19c>
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
     a88:	00965a34 	movhi	r2,22888
     a8c:	108bbfc4 	addi	r2,r2,12031
     a90:	14400236 	bltu	r2,r17,a9c <lms_set_frequency+0x18c>
     a94:	a809883a 	mov	r4,r21
     a98:	00000106 	br	aa0 <lms_set_frequency+0x190>
     a9c:	01000084 	movi	r4,2
     aa0:	948b883a 	add	r5,r18,r18
     aa4:	294b883a 	add	r5,r5,r5
     aa8:	290ab03a 	or	r5,r5,r4
     aac:	a1000144 	addi	r4,r20,5
     ab0:	21003fcc 	andi	r4,r4,255
     ab4:	29403fcc 	andi	r5,r5,255
     ab8:	00004100 	call	410 <lms_spi_write>
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
     abc:	98bfffcc 	andi	r2,r19,65535
     ac0:	1004d07a 	srli	r2,r2,1
	lms_spi_write( base+0, data ) ;
     ac4:	a1003fcc 	andi	r4,r20,255
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
     ac8:	047ff804 	movi	r17,-32
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
     acc:	11403fcc 	andi	r5,r2,255
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
     ad0:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+0, data ) ;
     ad4:	00004100 	call	410 <lms_spi_write>
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
     ad8:	98c0004c 	andi	r3,r19,1
     adc:	8004d43a 	srli	r2,r16,16
     ae0:	180691fa 	slli	r3,r3,7
	lms_spi_write( base+1, data ) ;
     ae4:	a1000044 	addi	r4,r20,1
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
     ae8:	10801fcc 	andi	r2,r2,127
     aec:	1886b03a 	or	r3,r3,r2
	lms_spi_write( base+1, data ) ;
     af0:	180b883a 	mov	r5,r3
     af4:	21003fcc 	andi	r4,r4,255
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
     af8:	d8c00005 	stb	r3,0(sp)
	lms_spi_write( base+1, data ) ;
     afc:	00004100 	call	410 <lms_spi_write>
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
     b00:	8004d23a 	srli	r2,r16,8
	lms_spi_write( base+2, data ) ;
     b04:	a1000084 	addi	r4,r20,2
     b08:	21003fcc 	andi	r4,r4,255
     b0c:	11403fcc 	andi	r5,r2,255
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
     b10:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+2, data ) ;
     b14:	00004100 	call	410 <lms_spi_write>
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+3, data ) ;
     b18:	81403fcc 	andi	r5,r16,255
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+2, data ) ;
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
     b1c:	dc000005 	stb	r16,0(sp)
	lms_spi_write( base+3, data ) ;
     b20:	a10000c4 	addi	r4,r20,3

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
     b24:	a4000184 	addi	r16,r20,6
     b28:	84003fcc 	andi	r16,r16,255
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+2, data ) ;
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+3, data ) ;
     b2c:	21003fcc 	andi	r4,r4,255
     b30:	00004100 	call	410 <lms_spi_write>

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
     b34:	8009883a 	mov	r4,r16
     b38:	d80b883a 	mov	r5,sp
     b3c:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(0x1f) ;
	data |= 0x0c ;
     b40:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( base+6, data ) ;
     b44:	8009883a 	mov	r4,r16
	lms_spi_read( base+7, &data ) ;
     b48:	a40001c4 	addi	r16,r20,7
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
     b4c:	1444703a 	and	r2,r2,r17
     b50:	10800314 	ori	r2,r2,12
	lms_spi_write( base+6, data ) ;
     b54:	11403b0c 	andi	r5,r2,236
	lms_spi_read( base+7, &data ) ;
     b58:	84003fcc 	andi	r16,r16,255
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
     b5c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+6, data ) ;
     b60:	00004100 	call	410 <lms_spi_write>
	lms_spi_read( base+7, &data ) ;
     b64:	8009883a 	mov	r4,r16
     b68:	d80b883a 	mov	r5,sp
     b6c:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
     b70:	8009883a 	mov	r4,r16
	lms_spi_read( base+8, &data ) ;
     b74:	a4000204 	addi	r16,r20,8
	data |= 0x0c ;
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
     b78:	00bff8c4 	movi	r2,-29
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
     b7c:	84003fcc 	andi	r16,r16,255
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
     b80:	014038c4 	movi	r5,227
	data |= 0x0c ;
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
     b84:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+7, data ) ;
     b88:	00004100 	call	410 <lms_spi_write>
	lms_spi_read( base+8, &data ) ;
     b8c:	8009883a 	mov	r4,r16
     b90:	d80b883a 	mov	r5,sp
     b94:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(0x1f) ;
     b98:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( base+8, data ) ;
     b9c:	8009883a 	mov	r4,r16

	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
	data &= ~(0x3f) ;
     ba0:	0027883a 	mov	r19,zero
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
	data &= ~(0x1f) ;
     ba4:	1444703a 	and	r2,r2,r17
	lms_spi_write( base+8, data ) ;
     ba8:	1140380c 	andi	r5,r2,224
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
	data &= ~(0x1f) ;
     bac:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+8, data ) ;
     bb0:	00004100 	call	410 <lms_spi_write>

	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
     bb4:	a0800244 	addi	r2,r20,9
     bb8:	14403fcc 	andi	r17,r2,255
     bbc:	8809883a 	mov	r4,r17
     bc0:	d80b883a 	mov	r5,sp
     bc4:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(0x3f) ;
     bc8:	d8800003 	ldbu	r2,0(sp)
     bcc:	0021883a 	mov	r16,zero
     bd0:	1080300c 	andi	r2,r2,192
     bd4:	d8800005 	stb	r2,0(sp)
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
     bd8:	d8800003 	ldbu	r2,0(sp)
     bdc:	00fff004 	movi	r3,-64
			lms_spi_write( base+9, data ) ;
     be0:	8809883a 	mov	r4,r17
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
     be4:	10c4703a 	and	r2,r2,r3
     be8:	8084b03a 	or	r2,r16,r2
			lms_spi_write( base+9, data ) ;
     bec:	11403fcc 	andi	r5,r2,255
			lms_spi_read( base+10, &vtune ) ;
     bf0:	a4800284 	addi	r18,r20,10
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
     bf4:	d8800005 	stb	r2,0(sp)
			lms_spi_write( base+9, data ) ;
     bf8:	00004100 	call	410 <lms_spi_write>
			lms_spi_read( base+10, &vtune ) ;
     bfc:	91003fcc 	andi	r4,r18,255
     c00:	d9400044 	addi	r5,sp,1
     c04:	00007f80 	call	7f8 <lms_spi_read>
			if( (vtune&0xc0) == 0xc0 )
     c08:	d8800043 	ldbu	r2,1(sp)
     c0c:	00c03004 	movi	r3,192
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
     c10:	01000034 	movhi	r4,0
     c14:	210c6704 	addi	r4,r4,12700
		{
			data &= ~(0x3f) ;
			data |= i ;
			lms_spi_write( base+9, data ) ;
			lms_spi_read( base+10, &vtune ) ;
			if( (vtune&0xc0) == 0xc0 )
     c18:	1080300c 	andi	r2,r2,192
     c1c:	10c0011e 	bne	r2,r3,c24 <lms_set_frequency+0x314>
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
     c20:	0002e0c0 	call	2e0c <alt_putstr>
			}
			if( vtune&0x80 )
     c24:	d8800047 	ldb	r2,1(sp)
			{
				alt_putstr( "Setting HIGH\n" ) ;
     c28:	01000034 	movhi	r4,0
     c2c:	210c6b04 	addi	r4,r4,12716
			lms_spi_read( base+10, &vtune ) ;
			if( (vtune&0xc0) == 0xc0 )
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
			}
			if( vtune&0x80 )
     c30:	1000020e 	bge	r2,zero,c3c <lms_set_frequency+0x32c>
			{
				alt_putstr( "Setting HIGH\n" ) ;
     c34:	0002e0c0 	call	2e0c <alt_putstr>
     c38:	8027883a 	mov	r19,r16
				high = i ;
			}
			if( (vtune&0x40) && low == 64 )
     c3c:	d8800043 	ldbu	r2,1(sp)
     c40:	1080100c 	andi	r2,r2,64
     c44:	1000031e 	bne	r2,zero,c54 <lms_set_frequency+0x344>
     c48:	84000044 	addi	r16,r16,1
	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
	data &= ~(0x3f) ;
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
     c4c:	00801004 	movi	r2,64
     c50:	80bfe11e 	bne	r16,r2,bd8 <lms_set_frequency+0x2c8>
			{
				low = i ;
				break ;
			}
		}
		alt_printf( "LOW: %x HIGH: %x VCOCAP: %x\n", low, high, (low+high)>>1 ) ;
     c54:	99803fcc 	andi	r6,r19,255
     c58:	81403fcc 	andi	r5,r16,255
     c5c:	29a1883a 	add	r16,r5,r6
     c60:	8021d07a 	srai	r16,r16,1
     c64:	01000034 	movhi	r4,0
     c68:	210c6f04 	addi	r4,r4,12732
     c6c:	800f883a 	mov	r7,r16
     c70:	0002c780 	call	2c78 <alt_printf>
		data &= ~(0x3f) ;
		data |= ((low+high)>>1) ;
     c74:	d8800003 	ldbu	r2,0(sp)
     c78:	00fff004 	movi	r3,-64
		lms_spi_write( base+9, data ) ;
     c7c:	8809883a 	mov	r4,r17
				break ;
			}
		}
		alt_printf( "LOW: %x HIGH: %x VCOCAP: %x\n", low, high, (low+high)>>1 ) ;
		data &= ~(0x3f) ;
		data |= ((low+high)>>1) ;
     c80:	10c4703a 	and	r2,r2,r3
     c84:	1404b03a 	or	r2,r2,r16
		lms_spi_write( base+9, data ) ;
     c88:	11403fcc 	andi	r5,r2,255
				break ;
			}
		}
		alt_printf( "LOW: %x HIGH: %x VCOCAP: %x\n", low, high, (low+high)>>1 ) ;
		data &= ~(0x3f) ;
		data |= ((low+high)>>1) ;
     c8c:	d8800005 	stb	r2,0(sp)
		lms_spi_write( base+9, data ) ;
     c90:	00004100 	call	410 <lms_spi_write>
		lms_spi_write( base+9, data ) ;
     c94:	d9400003 	ldbu	r5,0(sp)
     c98:	8809883a 	mov	r4,r17
     c9c:	00004100 	call	410 <lms_spi_write>
		lms_spi_read( base+10, &vtune ) ;
     ca0:	91003fcc 	andi	r4,r18,255
     ca4:	d9400044 	addi	r5,sp,1
     ca8:	00007f80 	call	7f8 <lms_spi_read>
		alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
     cac:	d9400043 	ldbu	r5,1(sp)
     cb0:	01000034 	movhi	r4,0
     cb4:	210c7704 	addi	r4,r4,12764
     cb8:	2940300c 	andi	r5,r5,192
     cbc:	0002c780 	call	2c78 <alt_printf>
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
     cc0:	d80b883a 	mov	r5,sp
     cc4:	01000244 	movi	r4,9
     cc8:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(0x05) ;
     ccc:	d8800003 	ldbu	r2,0(sp)
     cd0:	00fffe84 	movi	r3,-6
	lms_spi_write( 0x09, data ) ;
     cd4:	01000244 	movi	r4,9
		alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
	data &= ~(0x05) ;
     cd8:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x09, data ) ;
     cdc:	11403e8c 	andi	r5,r2,250
		alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
	data &= ~(0x05) ;
     ce0:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
     ce4:	00004100 	call	410 <lms_spi_write>

	return ;
}
     ce8:	dfc00c17 	ldw	ra,48(sp)
     cec:	dd800b17 	ldw	r22,44(sp)
     cf0:	dd400a17 	ldw	r21,40(sp)
     cf4:	dd000917 	ldw	r20,36(sp)
     cf8:	dcc00817 	ldw	r19,32(sp)
     cfc:	dc800717 	ldw	r18,28(sp)
     d00:	dc400617 	ldw	r17,24(sp)
     d04:	dc000517 	ldw	r16,20(sp)
     d08:	dec00d04 	addi	sp,sp,52
     d0c:	f800283a 	ret

00000d10 <lms_get_frequency>:
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}

// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
     d10:	defffc04 	addi	sp,sp,-16
     d14:	dc400215 	stw	r17,8(sp)
     d18:	dc000115 	stw	r16,4(sp)
     d1c:	dfc00315 	stw	ra,12(sp)
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     d20:	04400804 	movi	r17,32
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}

// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
     d24:	2821883a 	mov	r16,r5
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     d28:	20000126 	beq	r4,zero,d30 <lms_get_frequency+0x20>
     d2c:	04400404 	movi	r17,16
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
     d30:	89003fcc 	andi	r4,r17,255
     d34:	d80b883a 	mov	r5,sp
     d38:	00007f80 	call	7f8 <lms_spi_read>
	f->nint = ((uint16_t)data) << 1 ;
     d3c:	d8800003 	ldbu	r2,0(sp)
	lms_spi_read( base+1, &data ) ;
     d40:	89000044 	addi	r4,r17,1
     d44:	d80b883a 	mov	r5,sp
// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
     d48:	1085883a 	add	r2,r2,r2
     d4c:	8080000d 	sth	r2,0(r16)
	lms_spi_read( base+1, &data ) ;
     d50:	21003fcc 	andi	r4,r4,255
     d54:	00007f80 	call	7f8 <lms_spi_read>
	f->nint |= (data&0x80)>>7 ;
     d58:	d8800003 	ldbu	r2,0(sp)
     d5c:	8140000b 	ldhu	r5,0(r16)
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
     d60:	89000084 	addi	r4,r17,2
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
     d64:	10c01fcc 	andi	r3,r2,127
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
     d68:	1004d1fa 	srli	r2,r2,7
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
     d6c:	1806943a 	slli	r3,r3,16
	lms_spi_read( base+2, &data ) ;
     d70:	21003fcc 	andi	r4,r4,255
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
     d74:	1144b03a 	or	r2,r2,r5
     d78:	8080000d 	sth	r2,0(r16)
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
     d7c:	80c00115 	stw	r3,4(r16)
	lms_spi_read( base+2, &data ) ;
     d80:	d80b883a 	mov	r5,sp
     d84:	00007f80 	call	7f8 <lms_spi_read>
	f->nfrac |= ((uint32_t)data)<<8 ;
     d88:	d8800003 	ldbu	r2,0(sp)
     d8c:	80c00117 	ldw	r3,4(r16)
	lms_spi_read( base+3, &data) ;
     d90:	890000c4 	addi	r4,r17,3
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
     d94:	1004923a 	slli	r2,r2,8
	lms_spi_read( base+3, &data) ;
     d98:	d80b883a 	mov	r5,sp
     d9c:	21003fcc 	andi	r4,r4,255
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
     da0:	1886b03a 	or	r3,r3,r2
     da4:	80c00115 	stw	r3,4(r16)
	lms_spi_read( base+3, &data) ;
     da8:	00007f80 	call	7f8 <lms_spi_read>
	f->nfrac |= data ;
     dac:	d8c00003 	ldbu	r3,0(sp)
     db0:	80800117 	ldw	r2,4(r16)
	lms_spi_read( base+5, &data ) ;
     db4:	89000144 	addi	r4,r17,5
     db8:	21003fcc 	andi	r4,r4,255
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
	lms_spi_read( base+3, &data) ;
	f->nfrac |= data ;
     dbc:	10c4b03a 	or	r2,r2,r3
     dc0:	80800115 	stw	r2,4(r16)
	lms_spi_read( base+5, &data ) ;
     dc4:	d80b883a 	mov	r5,sp
     dc8:	00007f80 	call	7f8 <lms_spi_read>
	f->freqsel = (data>>2) ;
     dcc:	d8800003 	ldbu	r2,0(sp)
	f->reference = 38400000 ;
     dd0:	00c092b4 	movhi	r3,586
     dd4:	18fc0004 	addi	r3,r3,-4096
     dd8:	80c00315 	stw	r3,12(r16)
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
	lms_spi_read( base+3, &data) ;
	f->nfrac |= data ;
	lms_spi_read( base+5, &data ) ;
	f->freqsel = (data>>2) ;
     ddc:	1004d0ba 	srli	r2,r2,2
     de0:	80800205 	stb	r2,8(r16)
	f->reference = 38400000 ;
	return ;
}
     de4:	dfc00317 	ldw	ra,12(sp)
     de8:	dc400217 	ldw	r17,8(sp)
     dec:	dc000117 	ldw	r16,4(sp)
     df0:	dec00404 	addi	sp,sp,16
     df4:	f800283a 	ret

00000df8 <lms_tx_disable>:
	return ;
}

// Disable the TX subsystem
void lms_tx_disable( )
{
     df8:	defffd04 	addi	sp,sp,-12
     dfc:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     e00:	04000144 	movi	r16,5
     e04:	8009883a 	mov	r4,r16
     e08:	d80b883a 	mov	r5,sp
	return ;
}

// Disable the TX subsystem
void lms_tx_disable( )
{
     e0c:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     e10:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(1<<3) ;
     e14:	d8800003 	ldbu	r2,0(sp)
     e18:	00fffdc4 	movi	r3,-9
	lms_spi_write( 0x05, data ) ;
     e1c:	8009883a 	mov	r4,r16
// Disable the TX subsystem
void lms_tx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<3) ;
     e20:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
     e24:	11403dcc 	andi	r5,r2,247
// Disable the TX subsystem
void lms_tx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<3) ;
     e28:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     e2c:	00004100 	call	410 <lms_spi_write>
	return ;
}
     e30:	dfc00217 	ldw	ra,8(sp)
     e34:	dc000117 	ldw	r16,4(sp)
     e38:	dec00304 	addi	sp,sp,12
     e3c:	f800283a 	ret

00000e40 <lms_tx_enable>:
	return ;
}

// Enable the TX subsystem
void lms_tx_enable( )
{
     e40:	defffd04 	addi	sp,sp,-12
     e44:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     e48:	04000144 	movi	r16,5
     e4c:	8009883a 	mov	r4,r16
     e50:	d80b883a 	mov	r5,sp
	return ;
}

// Enable the TX subsystem
void lms_tx_enable( )
{
     e54:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     e58:	00007f80 	call	7f8 <lms_spi_read>
	data |= (1<<3) ;
     e5c:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     e60:	8009883a 	mov	r4,r16
// Enable the TX subsystem
void lms_tx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<3) ;
     e64:	10800214 	ori	r2,r2,8
	lms_spi_write( 0x05, data ) ;
     e68:	11403fcc 	andi	r5,r2,255
// Enable the TX subsystem
void lms_tx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<3) ;
     e6c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     e70:	00004100 	call	410 <lms_spi_write>
	return ;
}
     e74:	dfc00217 	ldw	ra,8(sp)
     e78:	dc000117 	ldw	r16,4(sp)
     e7c:	dec00304 	addi	sp,sp,12
     e80:	f800283a 	ret

00000e84 <lms_rx_disable>:
	return ;
}

// Disable the RX subsystem
void lms_rx_disable( )
{
     e84:	defffd04 	addi	sp,sp,-12
     e88:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     e8c:	04000144 	movi	r16,5
     e90:	8009883a 	mov	r4,r16
     e94:	d80b883a 	mov	r5,sp
	return ;
}

// Disable the RX subsystem
void lms_rx_disable( )
{
     e98:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     e9c:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(1<<2) ;
     ea0:	d8800003 	ldbu	r2,0(sp)
     ea4:	00fffec4 	movi	r3,-5
	lms_spi_write( 0x05, data ) ;
     ea8:	8009883a 	mov	r4,r16
// Disable the RX subsystem
void lms_rx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<2) ;
     eac:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
     eb0:	11403ecc 	andi	r5,r2,251
// Disable the RX subsystem
void lms_rx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<2) ;
     eb4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     eb8:	00004100 	call	410 <lms_spi_write>
	return ;
}
     ebc:	dfc00217 	ldw	ra,8(sp)
     ec0:	dc000117 	ldw	r16,4(sp)
     ec4:	dec00304 	addi	sp,sp,12
     ec8:	f800283a 	ret

00000ecc <lms_rx_enable>:
	return ;
}

// Enable the RX subsystem
void lms_rx_enable( )
{
     ecc:	defffd04 	addi	sp,sp,-12
     ed0:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     ed4:	04000144 	movi	r16,5
     ed8:	8009883a 	mov	r4,r16
     edc:	d80b883a 	mov	r5,sp
	return ;
}

// Enable the RX subsystem
void lms_rx_enable( )
{
     ee0:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     ee4:	00007f80 	call	7f8 <lms_spi_read>
	data |= (1<<2) ;
     ee8:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     eec:	8009883a 	mov	r4,r16
// Enable the RX subsystem
void lms_rx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<2) ;
     ef0:	10800114 	ori	r2,r2,4
	lms_spi_write( 0x05, data ) ;
     ef4:	11403fcc 	andi	r5,r2,255
// Enable the RX subsystem
void lms_rx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<2) ;
     ef8:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     efc:	00004100 	call	410 <lms_spi_write>
	return ;
}
     f00:	dfc00217 	ldw	ra,8(sp)
     f04:	dc000117 	ldw	r16,4(sp)
     f08:	dec00304 	addi	sp,sp,12
     f0c:	f800283a 	ret

00000f10 <lms_pll_disable>:
	return ;
}

// Disable the PLL of a module
void lms_pll_disable( lms_module_t mod )
{
     f10:	defffd04 	addi	sp,sp,-12
     f14:	dc000115 	stw	r16,4(sp)
     f18:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
     f1c:	04000904 	movi	r16,36
     f20:	20000126 	beq	r4,zero,f28 <lms_pll_disable+0x18>
     f24:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
     f28:	84003fcc 	andi	r16,r16,255
     f2c:	d80b883a 	mov	r5,sp
     f30:	8009883a 	mov	r4,r16
     f34:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(1<<3) ;
     f38:	d8800003 	ldbu	r2,0(sp)
     f3c:	00fffdc4 	movi	r3,-9
	lms_spi_write( reg, data ) ;
     f40:	8009883a 	mov	r4,r16
void lms_pll_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<3) ;
     f44:	10c4703a 	and	r2,r2,r3
	lms_spi_write( reg, data ) ;
     f48:	11403dcc 	andi	r5,r2,247
void lms_pll_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<3) ;
     f4c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
     f50:	00004100 	call	410 <lms_spi_write>
	return ;
}
     f54:	dfc00217 	ldw	ra,8(sp)
     f58:	dc000117 	ldw	r16,4(sp)
     f5c:	dec00304 	addi	sp,sp,12
     f60:	f800283a 	ret

00000f64 <lms_pll_enable>:
	return ;
}

// Enable the PLL of a module
void lms_pll_enable( lms_module_t mod )
{
     f64:	defffd04 	addi	sp,sp,-12
     f68:	dc000115 	stw	r16,4(sp)
     f6c:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
     f70:	04000904 	movi	r16,36
     f74:	20000126 	beq	r4,zero,f7c <lms_pll_enable+0x18>
     f78:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
     f7c:	84003fcc 	andi	r16,r16,255
     f80:	d80b883a 	mov	r5,sp
     f84:	8009883a 	mov	r4,r16
     f88:	00007f80 	call	7f8 <lms_spi_read>
	data |= (1<<3) ;
     f8c:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
     f90:	8009883a 	mov	r4,r16
void lms_pll_enable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<3) ;
     f94:	10800214 	ori	r2,r2,8
	lms_spi_write( reg, data ) ;
     f98:	11403fcc 	andi	r5,r2,255
void lms_pll_enable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<3) ;
     f9c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
     fa0:	00004100 	call	410 <lms_spi_write>
	return ;
}
     fa4:	dfc00217 	ldw	ra,8(sp)
     fa8:	dc000117 	ldw	r16,4(sp)
     fac:	dec00304 	addi	sp,sp,12
     fb0:	f800283a 	ret

00000fb4 <lms_power_down>:
	return ;
}

// Top level power down of the LMS
void lms_power_down( )
{
     fb4:	defffd04 	addi	sp,sp,-12
     fb8:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     fbc:	04000144 	movi	r16,5
     fc0:	8009883a 	mov	r4,r16
     fc4:	d80b883a 	mov	r5,sp
	return ;
}

// Top level power down of the LMS
void lms_power_down( )
{
     fc8:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     fcc:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(1<<4) ;
     fd0:	d8800003 	ldbu	r2,0(sp)
     fd4:	00fffbc4 	movi	r3,-17
	lms_spi_write( 0x05, data ) ;
     fd8:	8009883a 	mov	r4,r16
// Top level power down of the LMS
void lms_power_down( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<4) ;
     fdc:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
     fe0:	11403bcc 	andi	r5,r2,239
// Top level power down of the LMS
void lms_power_down( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<4) ;
     fe4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     fe8:	00004100 	call	410 <lms_spi_write>
	return ;
}
     fec:	dfc00217 	ldw	ra,8(sp)
     ff0:	dc000117 	ldw	r16,4(sp)
     ff4:	dec00304 	addi	sp,sp,12
     ff8:	f800283a 	ret

00000ffc <lms_get_loopback_mode>:
	return ;
}

// Figure out what loopback mode we're in (if any at all!)
lms_loopback_mode_t lms_get_loopback_mode( )
{
     ffc:	defffe04 	addi	sp,sp,-8
	uint8_t data ;
	lms_loopback_mode_t mode = LB_NONE ;
	lms_spi_read( 0x08, &data ) ;
    1000:	01000204 	movi	r4,8
    1004:	d80b883a 	mov	r5,sp
	return ;
}

// Figure out what loopback mode we're in (if any at all!)
lms_loopback_mode_t lms_get_loopback_mode( )
{
    1008:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	lms_loopback_mode_t mode = LB_NONE ;
	lms_spi_read( 0x08, &data ) ;
    100c:	00007f80 	call	7f8 <lms_spi_read>
	if( data == 0 )
    1010:	d8c00003 	ldbu	r3,0(sp)
    1014:	18001926 	beq	r3,zero,107c <lms_get_loopback_mode+0x80>
	{
		mode = LB_NONE ;
	} else if( data&(1<<6) )
    1018:	1880100c 	andi	r2,r3,64
    101c:	10000226 	beq	r2,zero,1028 <lms_get_loopback_mode+0x2c>
    1020:	0005883a 	mov	r2,zero
    1024:	00001606 	br	1080 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_LPF ;
	} else if( data&(1<<5) )
    1028:	1880080c 	andi	r2,r3,32
    102c:	10000226 	beq	r2,zero,1038 <lms_get_loopback_mode+0x3c>
    1030:	00800044 	movi	r2,1
    1034:	00001206 	br	1080 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_VGA2 ;
	} else if( data&(1<<4) )
    1038:	1880040c 	andi	r2,r3,16
    103c:	10000226 	beq	r2,zero,1048 <lms_get_loopback_mode+0x4c>
    1040:	00800084 	movi	r2,2
    1044:	00000e06 	br	1080 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_OP ;
	} else if( (data&0xf) == 1 )
    1048:	18c003cc 	andi	r3,r3,15
    104c:	00800044 	movi	r2,1
    1050:	1880021e 	bne	r3,r2,105c <lms_get_loopback_mode+0x60>
    1054:	00800104 	movi	r2,4
    1058:	00000906 	br	1080 <lms_get_loopback_mode+0x84>
	{
		mode = LB_RF_LNA1 ;
	} else if( (data&0xf) == 2 )
    105c:	00800084 	movi	r2,2
    1060:	1880021e 	bne	r3,r2,106c <lms_get_loopback_mode+0x70>
    1064:	00800144 	movi	r2,5
    1068:	00000506 	br	1080 <lms_get_loopback_mode+0x84>
	{
		mode = LB_RF_LNA2 ;
	} else if( (data&0xf) == 3 )
    106c:	008000c4 	movi	r2,3
    1070:	1880021e 	bne	r3,r2,107c <lms_get_loopback_mode+0x80>
    1074:	00800184 	movi	r2,6
    1078:	00000106 	br	1080 <lms_get_loopback_mode+0x84>
    107c:	008001c4 	movi	r2,7
	{
		mode = LB_RF_LNA3 ;
	}
	return mode ;
}
    1080:	dfc00117 	ldw	ra,4(sp)
    1084:	dec00204 	addi	sp,sp,8
    1088:	f800283a 	ret

0000108c <lms_peakdetect_disable>:
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_disable( )
{
    108c:	defffd04 	addi	sp,sp,-12
    1090:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1094:	04001104 	movi	r16,68
    1098:	8009883a 	mov	r4,r16
    109c:	d80b883a 	mov	r5,sp
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_disable( )
{
    10a0:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    10a4:	00007f80 	call	7f8 <lms_spi_read>
	data |= (1<<0) ;
    10a8:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
    10ac:	8009883a 	mov	r4,r16

void lms_peakdetect_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data |= (1<<0) ;
    10b0:	10800054 	ori	r2,r2,1
	lms_spi_write( 0x44, data ) ;
    10b4:	11403fcc 	andi	r5,r2,255

void lms_peakdetect_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data |= (1<<0) ;
    10b8:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
    10bc:	00004100 	call	410 <lms_spi_write>
	return ;
}
    10c0:	dfc00217 	ldw	ra,8(sp)
    10c4:	dc000117 	ldw	r16,4(sp)
    10c8:	dec00304 	addi	sp,sp,12
    10cc:	f800283a 	ret

000010d0 <lms_peakdetect_enable>:
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_enable( )
{
    10d0:	defffd04 	addi	sp,sp,-12
    10d4:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    10d8:	04001104 	movi	r16,68
    10dc:	8009883a 	mov	r4,r16
    10e0:	d80b883a 	mov	r5,sp
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_enable( )
{
    10e4:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    10e8:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(1<<0) ;
    10ec:	d8800003 	ldbu	r2,0(sp)
    10f0:	00ffff84 	movi	r3,-2
	lms_spi_write( 0x44, data ) ;
    10f4:	8009883a 	mov	r4,r16

void lms_peakdetect_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data &= ~(1<<0) ;
    10f8:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x44, data ) ;
    10fc:	11403f8c 	andi	r5,r2,254

void lms_peakdetect_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data &= ~(1<<0) ;
    1100:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
    1104:	00004100 	call	410 <lms_spi_write>
	return ;
}
    1108:	dfc00217 	ldw	ra,8(sp)
    110c:	dc000117 	ldw	r16,4(sp)
    1110:	dec00304 	addi	sp,sp,12
    1114:	f800283a 	ret

00001118 <lms_pa_disable>:
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
    1118:	defffd04 	addi	sp,sp,-12
    111c:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1120:	d80b883a 	mov	r5,sp
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
    1124:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1128:	01001104 	movi	r4,68
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
    112c:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1130:	00007f80 	call	7f8 <lms_spi_read>
	if( pa == PA_ALL )
    1134:	008000c4 	movi	r2,3
    1138:	8080041e 	bne	r16,r2,114c <lms_pa_disable+0x34>
	{
		data |= (1<<1) ;
		data &= ~(4<<2) ;
		data &= ~(2<<2) ;
    113c:	d8800003 	ldbu	r2,0(sp)
    1140:	10800094 	ori	r2,r2,2
    1144:	108039cc 	andi	r2,r2,231
    1148:	00000a06 	br	1174 <lms_pa_disable+0x5c>
	} else if( pa == PA_AUX )
    114c:	8000031e 	bne	r16,zero,115c <lms_pa_disable+0x44>
	{
		data |= (1<<1) ;
    1150:	d8800003 	ldbu	r2,0(sp)
    1154:	10800094 	ori	r2,r2,2
    1158:	00000606 	br	1174 <lms_pa_disable+0x5c>
	} else if( pa == PA_1 )
    115c:	00800044 	movi	r2,1
    1160:	d8c00003 	ldbu	r3,0(sp)
    1164:	8080021e 	bne	r16,r2,1170 <lms_pa_disable+0x58>
	{
		data &= ~(4<<2) ;
    1168:	18803bcc 	andi	r2,r3,239
    116c:	00000106 	br	1174 <lms_pa_disable+0x5c>
	} else { // pa == PA_2
		data &= ~(2<<2) ;
    1170:	18803dcc 	andi	r2,r3,247
    1174:	d8800005 	stb	r2,0(sp)
	}
	lms_spi_write( 0x44, data ) ;
    1178:	d9400003 	ldbu	r5,0(sp)
    117c:	01001104 	movi	r4,68
    1180:	00004100 	call	410 <lms_spi_write>
	return ;
}
    1184:	dfc00217 	ldw	ra,8(sp)
    1188:	dc000117 	ldw	r16,4(sp)
    118c:	dec00304 	addi	sp,sp,12
    1190:	f800283a 	ret

00001194 <lms_tx_loopback_disable>:
	return ;
}

// Disable TX loopback
void lms_tx_loopback_disable( lms_txlb_t mode )
{
    1194:	defffe04 	addi	sp,sp,-8
    1198:	2007883a 	mov	r3,r4
    119c:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    11a0:	d80b883a 	mov	r5,sp
    11a4:	01001184 	movi	r4,70

// Disable TX loopback
void lms_tx_loopback_disable( lms_txlb_t mode )
{
	uint8_t data ;
	switch(mode)
    11a8:	18000326 	beq	r3,zero,11b8 <lms_tx_loopback_disable+0x24>
    11ac:	00800044 	movi	r2,1
    11b0:	1880181e 	bne	r3,r2,1214 <lms_tx_loopback_disable+0x80>
    11b4:	00000806 	br	11d8 <lms_tx_loopback_disable+0x44>
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    11b8:	00007f80 	call	7f8 <lms_spi_read>
			data &= ~(3<<2) ;
    11bc:	d8800003 	ldbu	r2,0(sp)
    11c0:	00fffcc4 	movi	r3,-13
			lms_spi_write( 0x46, data ) ;
    11c4:	01001184 	movi	r4,70
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data &= ~(3<<2) ;
    11c8:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x46, data ) ;
    11cc:	11403ccc 	andi	r5,r2,243
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data &= ~(3<<2) ;
    11d0:	d8800005 	stb	r2,0(sp)
    11d4:	00000e06 	br	1210 <lms_tx_loopback_disable+0x7c>
			lms_spi_write( 0x46, data ) ;
			break ;
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
    11d8:	0009883a 	mov	r4,zero
    11dc:	00011180 	call	1118 <lms_pa_disable>
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
    11e0:	d80b883a 	mov	r5,sp
    11e4:	010002c4 	movi	r4,11
    11e8:	00007f80 	call	7f8 <lms_spi_read>
			data &= ~(1<<0) ;
    11ec:	d8800003 	ldbu	r2,0(sp)
    11f0:	00ffff84 	movi	r3,-2
			lms_spi_write( 0x0b, data ) ;
    11f4:	010002c4 	movi	r4,11
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
			data &= ~(1<<0) ;
    11f8:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x0b, data ) ;
    11fc:	11403f8c 	andi	r5,r2,254
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
			data &= ~(1<<0) ;
    1200:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    1204:	00004100 	call	410 <lms_spi_write>
            // Power up the LNA's
            lms_spi_write( 0x70, 0 ) ;
    1208:	01001c04 	movi	r4,112
    120c:	000b883a 	mov	r5,zero
    1210:	00004100 	call	410 <lms_spi_write>
			break ;
	}
	return ;
}
    1214:	dfc00117 	ldw	ra,4(sp)
    1218:	dec00204 	addi	sp,sp,8
    121c:	f800283a 	ret

00001220 <lms_pa_enable>:
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    1220:	defffd04 	addi	sp,sp,-12
    1224:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1228:	d80b883a 	mov	r5,sp
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    122c:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1230:	01001104 	movi	r4,68
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    1234:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1238:	00007f80 	call	7f8 <lms_spi_read>
	if( pa == PA_AUX )
    123c:	8000031e 	bne	r16,zero,124c <lms_pa_enable+0x2c>
	{
		data &= ~(1<<1) ;
    1240:	d8800003 	ldbu	r2,0(sp)
    1244:	10803f4c 	andi	r2,r2,253
    1248:	00000d06 	br	1280 <lms_pa_enable+0x60>
	} else if( pa == PA_1 )
    124c:	00800044 	movi	r2,1
    1250:	8080051e 	bne	r16,r2,1268 <lms_pa_enable+0x48>
	{
		data &= ~(3<<2) ;
		data |= (2<<1) ;
    1254:	d8800003 	ldbu	r2,0(sp)
    1258:	00fffcc4 	movi	r3,-13
    125c:	10c4703a 	and	r2,r2,r3
    1260:	10800114 	ori	r2,r2,4
    1264:	00000606 	br	1280 <lms_pa_enable+0x60>
	} else if( pa == PA_2 )
    1268:	00800084 	movi	r2,2
    126c:	8080051e 	bne	r16,r2,1284 <lms_pa_enable+0x64>
	{
		data &= ~(3<<2) ;
		data |= (4<<1) ;
    1270:	d8800003 	ldbu	r2,0(sp)
    1274:	00fffcc4 	movi	r3,-13
    1278:	10c4703a 	and	r2,r2,r3
    127c:	10800214 	ori	r2,r2,8
    1280:	d8800005 	stb	r2,0(sp)
	}
	lms_spi_write( 0x44, data ) ;
    1284:	d9400003 	ldbu	r5,0(sp)
    1288:	01001104 	movi	r4,68
    128c:	00004100 	call	410 <lms_spi_write>
	return ;
}
    1290:	dfc00217 	ldw	ra,8(sp)
    1294:	dc000117 	ldw	r16,4(sp)
    1298:	dec00304 	addi	sp,sp,12
    129c:	f800283a 	ret

000012a0 <lms_tx_loopback_enable>:
	return ;
}

// Enable TX loopback
void lms_tx_loopback_enable( lms_txlb_t mode )
{
    12a0:	defffd04 	addi	sp,sp,-12
    12a4:	dc000115 	stw	r16,4(sp)
    12a8:	2021883a 	mov	r16,r4
    12ac:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    12b0:	d80b883a 	mov	r5,sp
    12b4:	01001184 	movi	r4,70

// Enable TX loopback
void lms_tx_loopback_enable( lms_txlb_t mode )
{
	uint8_t data ;
	switch(mode)
    12b8:	80000326 	beq	r16,zero,12c8 <lms_tx_loopback_enable+0x28>
    12bc:	00800044 	movi	r2,1
    12c0:	80801f1e 	bne	r16,r2,1340 <lms_tx_loopback_enable+0xa0>
    12c4:	00000606 	br	12e0 <lms_tx_loopback_enable+0x40>
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    12c8:	00007f80 	call	7f8 <lms_spi_read>
			data |= (3<<2) ;
    12cc:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x46, data ) ;
    12d0:	01001184 	movi	r4,70
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data |= (3<<2) ;
    12d4:	10800314 	ori	r2,r2,12
			lms_spi_write( 0x46, data ) ;
    12d8:	11403fcc 	andi	r5,r2,255
    12dc:	00001606 	br	1338 <lms_tx_loopback_enable+0x98>
			break ;
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
    12e0:	010000c4 	movi	r4,3
    12e4:	00011180 	call	1118 <lms_pa_disable>
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
    12e8:	d80b883a 	mov	r5,sp
    12ec:	010002c4 	movi	r4,11
    12f0:	00007f80 	call	7f8 <lms_spi_read>
			data |= (1<<0) ;
    12f4:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    12f8:	010002c4 	movi	r4,11
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
			data |= (1<<0) ;
    12fc:	8084b03a 	or	r2,r16,r2
			lms_spi_write( 0x0b, data ) ;
    1300:	11403fcc 	andi	r5,r2,255
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
			data |= (1<<0) ;
    1304:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    1308:	00004100 	call	410 <lms_spi_write>
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
    130c:	0009883a 	mov	r4,zero
    1310:	00012200 	call	1220 <lms_pa_enable>
			lms_peakdetect_enable( );
    1314:	00010d00 	call	10d0 <lms_peakdetect_enable>
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
    1318:	01001144 	movi	r4,69
    131c:	d80b883a 	mov	r5,sp
    1320:	00007f80 	call	7f8 <lms_spi_read>
			data &= ~(7<<0) ;
    1324:	d8800003 	ldbu	r2,0(sp)
    1328:	00fffe04 	movi	r3,-8
			lms_spi_write( 0x45, data ) ;
    132c:	01001144 	movi	r4,69
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
			lms_peakdetect_enable( );
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
			data &= ~(7<<0) ;
    1330:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x45, data ) ;
    1334:	11403e0c 	andi	r5,r2,248
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
			lms_peakdetect_enable( );
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
			data &= ~(7<<0) ;
    1338:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x45, data ) ;
    133c:	00004100 	call	410 <lms_spi_write>
			break ;
	}
	return ;
}
    1340:	dfc00217 	ldw	ra,8(sp)
    1344:	dc000117 	ldw	r16,4(sp)
    1348:	dec00304 	addi	sp,sp,12
    134c:	f800283a 	ret

00001350 <lms_rxvga2_enable>:
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    1350:	defffc04 	addi	sp,sp,-16
    1354:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    1358:	04001904 	movi	r16,100
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    135c:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    1360:	d80b883a 	mov	r5,sp
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    1364:	2023883a 	mov	r17,r4
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    1368:	8009883a 	mov	r4,r16
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    136c:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    1370:	00007f80 	call	7f8 <lms_spi_read>
	data |= (1<<1) ;
    1374:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    1378:	8009883a 	mov	r4,r16
// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data |= (1<<1) ;
    137c:	10800094 	ori	r2,r2,2
	lms_spi_write( 0x64, data ) ;
    1380:	11403fcc 	andi	r5,r2,255
// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data |= (1<<1) ;
    1384:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    1388:	00004100 	call	410 <lms_spi_write>
	lms_rxvga2_set_gain( gain ) ;
    138c:	89003fcc 	andi	r4,r17,255
    1390:	00007580 	call	758 <lms_rxvga2_set_gain>
	return ;
}
    1394:	dfc00317 	ldw	ra,12(sp)
    1398:	dc400217 	ldw	r17,8(sp)
    139c:	dc000117 	ldw	r16,4(sp)
    13a0:	dec00404 	addi	sp,sp,16
    13a4:	f800283a 	ret

000013a8 <lms_rxvga2_disable>:
	return ;
}

// Disable RXVGA2
void lms_rxvga2_disable()
{
    13a8:	defffd04 	addi	sp,sp,-12
    13ac:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    13b0:	04001904 	movi	r16,100
    13b4:	8009883a 	mov	r4,r16
    13b8:	d80b883a 	mov	r5,sp
	return ;
}

// Disable RXVGA2
void lms_rxvga2_disable()
{
    13bc:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    13c0:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(1<<1) ;
    13c4:	d8800003 	ldbu	r2,0(sp)
    13c8:	00ffff44 	movi	r3,-3
	lms_spi_write( 0x64, data ) ;
    13cc:	8009883a 	mov	r4,r16
// Disable RXVGA2
void lms_rxvga2_disable()
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data &= ~(1<<1) ;
    13d0:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x64, data ) ;
    13d4:	11403f4c 	andi	r5,r2,253
// Disable RXVGA2
void lms_rxvga2_disable()
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data &= ~(1<<1) ;
    13d8:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    13dc:	00004100 	call	410 <lms_spi_write>
	return ;
}
    13e0:	dfc00217 	ldw	ra,8(sp)
    13e4:	dc000117 	ldw	r16,4(sp)
    13e8:	dec00304 	addi	sp,sp,12
    13ec:	f800283a 	ret

000013f0 <lms_lna_select>:
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    13f0:	defffc04 	addi	sp,sp,-16
    13f4:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    13f8:	04401d44 	movi	r17,117
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    13fc:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1400:	d80b883a 	mov	r5,sp
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    1404:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1408:	8809883a 	mov	r4,r17
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    140c:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1410:	840000cc 	andi	r16,r16,3

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1414:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1418:	d8800003 	ldbu	r2,0(sp)
    141c:	8020913a 	slli	r16,r16,4
    1420:	00fff3c4 	movi	r3,-49
    1424:	10c4703a 	and	r2,r2,r3
    1428:	1404b03a 	or	r2,r2,r16
	lms_spi_write( 0x75, data ) ;
    142c:	8809883a 	mov	r4,r17
    1430:	11403fcc 	andi	r5,r2,255
void lms_lna_select( lms_lna_t lna )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1434:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x75, data ) ;
    1438:	00004100 	call	410 <lms_spi_write>
	return ;
}
    143c:	dfc00317 	ldw	ra,12(sp)
    1440:	dc400217 	ldw	r17,8(sp)
    1444:	dc000117 	ldw	r16,4(sp)
    1448:	dec00404 	addi	sp,sp,16
    144c:	f800283a 	ret

00001450 <lms_loopback_enable>:
	return ;
}

// Loopback enable
void lms_loopback_enable( lms_loopback_mode_t mode )
{
    1450:	defffd04 	addi	sp,sp,-12
	uint8_t data ;
	switch(mode)
    1454:	00800184 	movi	r2,6
	return ;
}

// Loopback enable
void lms_loopback_enable( lms_loopback_mode_t mode )
{
    1458:	dc000115 	stw	r16,4(sp)
    145c:	dfc00215 	stw	ra,8(sp)
    1460:	2021883a 	mov	r16,r4
	uint8_t data ;
	switch(mode)
    1464:	11003636 	bltu	r2,r4,1540 <lms_loopback_enable+0xf0>
    1468:	2105883a 	add	r2,r4,r4
    146c:	1085883a 	add	r2,r2,r2
    1470:	00c00034 	movhi	r3,0
    1474:	18c52104 	addi	r3,r3,5252
    1478:	10c5883a 	add	r2,r2,r3
    147c:	10800017 	ldw	r2,0(r2)
    1480:	1000683a 	jmp	r2
    1484:	000014a0 	cmpeqi	zero,zero,82
    1488:	000014b4 	movhi	zero,82
    148c:	000014cc 	andi	zero,zero,83
    1490:	00001540 	call	154 <si5338_read+0x1c>
    1494:	000014f0 	cmpltui	zero,zero,83
    1498:	000014f0 	cmpltui	zero,zero,83
    149c:	000014f0 	cmpltui	zero,zero,83
	{
		case LB_BB_LPF:
			// Disable RXVGA1 first
			lms_rxvga1_disable() ;
    14a0:	00007a00 	call	7a0 <lms_rxvga1_disable>

			// Enable BB TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    14a4:	0009883a 	mov	r4,zero
    14a8:	00012a00 	call	12a0 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<6 ) ;
    14ac:	01401004 	movi	r5,64
    14b0:	00000d06 	br	14e8 <lms_loopback_enable+0x98>
			break ;

		case LB_BB_VGA2:
			// Disable RXLPF first
			lms_lpf_disable( RX ) ;
    14b4:	0009883a 	mov	r4,zero
    14b8:	00007e00 	call	7e0 <lms_lpf_disable>

			// Enable TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    14bc:	0009883a 	mov	r4,zero
    14c0:	00012a00 	call	12a0 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<5 ) ;
    14c4:	01400804 	movi	r5,32
    14c8:	00000706 	br	14e8 <lms_loopback_enable+0x98>
			break ;

		case LB_BB_OP:
			// Disable RXLPF, RXVGA2, and RXVGA1
			lms_rxvga1_disable() ;
    14cc:	00007a00 	call	7a0 <lms_rxvga1_disable>
			lms_rxvga2_disable() ;
    14d0:	00013a80 	call	13a8 <lms_rxvga2_disable>
			lms_lpf_disable( RX ) ;
    14d4:	0009883a 	mov	r4,zero
    14d8:	00007e00 	call	7e0 <lms_lpf_disable>

			// Enable TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    14dc:	0009883a 	mov	r4,zero
    14e0:	00012a00 	call	12a0 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<4 ) ;
    14e4:	01400404 	movi	r5,16
    14e8:	01000204 	movi	r4,8
    14ec:	00001306 	br	153c <lms_loopback_enable+0xec>

		case LB_RF_LNA1:
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable all LNAs
			lms_lna_select( LNA_NONE ) ;
    14f0:	0009883a 	mov	r4,zero
    14f4:	00013f00 	call	13f0 <lms_lna_select>

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
    14f8:	01000044 	movi	r4,1
    14fc:	00012a00 	call	12a0 <lms_tx_loopback_enable>
			lms_spi_read( 0x7d, &data ) ;
    1500:	d80b883a 	mov	r5,sp
    1504:	01001f44 	movi	r4,125
    1508:	00007f80 	call	7f8 <lms_spi_read>
			data |= 1 ;
    150c:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x7d, data ) ;
    1510:	01001f44 	movi	r4,125
			lms_lna_select( LNA_NONE ) ;

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
			lms_spi_read( 0x7d, &data ) ;
			data |= 1 ;
    1514:	10800054 	ori	r2,r2,1
			lms_spi_write( 0x7d, data ) ;
    1518:	11403fcc 	andi	r5,r2,255
			lms_lna_select( LNA_NONE ) ;

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
			lms_spi_read( 0x7d, &data ) ;
			data |= 1 ;
    151c:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x7d, data ) ;
    1520:	00004100 	call	410 <lms_spi_write>

            // Choose the LNA (1 = LNA1, 2 = LNA2, 3 = LNA3)
            lms_spi_write( 0x08, (mode - LB_RF_LNA_START) ) ;
    1524:	817fff44 	addi	r5,r16,-3
    1528:	29403fcc 	andi	r5,r5,255
    152c:	01000204 	movi	r4,8
    1530:	00004100 	call	410 <lms_spi_write>

            // Set magical decode test registers bit
            lms_spi_write( 0x70, (1<<1) ) ;
    1534:	01001c04 	movi	r4,112
    1538:	01400084 	movi	r5,2
    153c:	00004100 	call	410 <lms_spi_write>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1540:	dfc00217 	ldw	ra,8(sp)
    1544:	dc000117 	ldw	r16,4(sp)
    1548:	dec00304 	addi	sp,sp,12
    154c:	f800283a 	ret

00001550 <lms_config_init>:
	return ;
}


int lms_config_init(xcvr_config_t *config)
{
    1550:	defffd04 	addi	sp,sp,-12
    1554:	dfc00215 	stw	ra,8(sp)
    1558:	dc400115 	stw	r17,4(sp)
    155c:	dc000015 	stw	r16,0(sp)
    1560:	2023883a 	mov	r17,r4

  lms_tx_enable() ;
  lms_rx_enable() ;

  lms_spi_write( 0x48, 0xc ) ;
    1564:	04000304 	movi	r16,12


int lms_config_init(xcvr_config_t *config)
{

  lms_tx_enable() ;
    1568:	0000e400 	call	e40 <lms_tx_enable>
  lms_rx_enable() ;
    156c:	0000ecc0 	call	ecc <lms_rx_enable>

  lms_spi_write( 0x48, 0xc ) ;
    1570:	800b883a 	mov	r5,r16
    1574:	01001204 	movi	r4,72
    1578:	00004100 	call	410 <lms_spi_write>
  lms_spi_write( 0x49, 0xc ) ;
    157c:	800b883a 	mov	r5,r16
    1580:	01001244 	movi	r4,73
    1584:	00004100 	call	410 <lms_spi_write>

  lms_set_frequency( RX,  config->rx_freq_hz ) ;
    1588:	89400117 	ldw	r5,4(r17)
    158c:	0009883a 	mov	r4,zero
    1590:	00009100 	call	910 <lms_set_frequency>
  lms_set_frequency( TX,  config->tx_freq_hz ) ;
    1594:	89400017 	ldw	r5,0(r17)
    1598:	01000044 	movi	r4,1
    159c:	00009100 	call	910 <lms_set_frequency>

  lms_lna_select( config->lna  ) ;
    15a0:	89000317 	ldw	r4,12(r17)
    15a4:	00013f00 	call	13f0 <lms_lna_select>
  lms_pa_enable( config->pa ) ;
    15a8:	89000417 	ldw	r4,16(r17)
    15ac:	00012200 	call	1220 <lms_pa_enable>

  lms_loopback_enable(config->loopback_mode);
    15b0:	89000217 	ldw	r4,8(r17)
    15b4:	00014500 	call	1450 <lms_loopback_enable>

  return 0;
}
    15b8:	0005883a 	mov	r2,zero
    15bc:	dfc00217 	ldw	ra,8(sp)
    15c0:	dc400117 	ldw	r17,4(sp)
    15c4:	dc000017 	ldw	r16,0(sp)
    15c8:	dec00304 	addi	sp,sp,12
    15cc:	f800283a 	ret

000015d0 <lms_lna_set_gain>:
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    15d0:	defffc04 	addi	sp,sp,-16
    15d4:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    15d8:	04401d44 	movi	r17,117
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    15dc:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    15e0:	d80b883a 	mov	r5,sp
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    15e4:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    15e8:	8809883a 	mov	r4,r17
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    15ec:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    15f0:	840000cc 	andi	r16,r16,3

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    15f4:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    15f8:	d8800003 	ldbu	r2,0(sp)
    15fc:	802091ba 	slli	r16,r16,6
	lms_spi_write( 0x75, data ) ;
    1600:	8809883a 	mov	r4,r17
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1604:	10800fcc 	andi	r2,r2,63
    1608:	1404b03a 	or	r2,r2,r16
	lms_spi_write( 0x75, data ) ;
    160c:	100b883a 	mov	r5,r2
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1610:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x75, data ) ;
    1614:	00004100 	call	410 <lms_spi_write>
	return ;
}
    1618:	dfc00317 	ldw	ra,12(sp)
    161c:	dc400217 	ldw	r17,8(sp)
    1620:	dc000117 	ldw	r16,4(sp)
    1624:	dec00404 	addi	sp,sp,16
    1628:	f800283a 	ret

0000162c <lms_dither_disable>:
	return ;
}

// Disable dithering on the module PLL
void lms_dither_disable( lms_module_t mod )
{
    162c:	defffd04 	addi	sp,sp,-12
    1630:	dc000115 	stw	r16,4(sp)
    1634:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    1638:	04000904 	movi	r16,36
    163c:	20000126 	beq	r4,zero,1644 <lms_dither_disable+0x18>
    1640:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
    1644:	84003fcc 	andi	r16,r16,255
    1648:	d80b883a 	mov	r5,sp
    164c:	8009883a 	mov	r4,r16
    1650:	00007f80 	call	7f8 <lms_spi_read>
	data &= ~(1<<7) ;
    1654:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1658:	8009883a 	mov	r4,r16
void lms_dither_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<7) ;
    165c:	10801fcc 	andi	r2,r2,127
	lms_spi_write( reg, data ) ;
    1660:	100b883a 	mov	r5,r2
void lms_dither_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<7) ;
    1664:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1668:	00004100 	call	410 <lms_spi_write>
	return ;
}
    166c:	dfc00217 	ldw	ra,8(sp)
    1670:	dc000117 	ldw	r16,4(sp)
    1674:	dec00304 	addi	sp,sp,12
    1678:	f800283a 	ret

0000167c <lms_dither_enable>:
	return (lms_bw_t)data ;
}

// Enable dithering on the module PLL
void lms_dither_enable( lms_module_t mod, uint8_t nbits )
{
    167c:	defffc04 	addi	sp,sp,-16
    1680:	dc400215 	stw	r17,8(sp)
    1684:	dc000115 	stw	r16,4(sp)
    1688:	dfc00315 	stw	ra,12(sp)
	// Select the base address based on which PLL we are configuring
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    168c:	04000904 	movi	r16,36
	return (lms_bw_t)data ;
}

// Enable dithering on the module PLL
void lms_dither_enable( lms_module_t mod, uint8_t nbits )
{
    1690:	2823883a 	mov	r17,r5
	// Select the base address based on which PLL we are configuring
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    1694:	20000126 	beq	r4,zero,169c <lms_dither_enable+0x20>
    1698:	04000504 	movi	r16,20
	uint8_t data ;

	// Read what we currently have in there
	lms_spi_read( reg, &data ) ;
    169c:	84003fcc 	andi	r16,r16,255
    16a0:	d80b883a 	mov	r5,sp
    16a4:	8009883a 	mov	r4,r16
    16a8:	00007f80 	call	7f8 <lms_spi_read>

	// Clear out the number of bits from before
	data &= ~(7<<4) ;

	// Put in the number of bits to dither
	data |= ((nbits-1)&7) ;
    16ac:	d8800003 	ldbu	r2,0(sp)
    16b0:	00ffe004 	movi	r3,-128
    16b4:	893fffc4 	addi	r4,r17,-1
    16b8:	10c4b03a 	or	r2,r2,r3
    16bc:	00ffe3c4 	movi	r3,-113
    16c0:	10c4703a 	and	r2,r2,r3
    16c4:	210001cc 	andi	r4,r4,7
    16c8:	1104b03a 	or	r2,r2,r4

	// Write it out
	lms_spi_write( reg, data ) ;
    16cc:	114023cc 	andi	r5,r2,143
    16d0:	8009883a 	mov	r4,r16

	// Clear out the number of bits from before
	data &= ~(7<<4) ;

	// Put in the number of bits to dither
	data |= ((nbits-1)&7) ;
    16d4:	d8800005 	stb	r2,0(sp)

	// Write it out
	lms_spi_write( reg, data ) ;
    16d8:	00004100 	call	410 <lms_spi_write>
	return ;
}
    16dc:	dfc00317 	ldw	ra,12(sp)
    16e0:	dc400217 	ldw	r17,8(sp)
    16e4:	dc000117 	ldw	r16,4(sp)
    16e8:	dec00404 	addi	sp,sp,16
    16ec:	f800283a 	ret

000016f0 <lms_get_bandwidth>:
	return ;
}

// Get the bandwidth for the selected module
lms_bw_t lms_get_bandwidth( lms_module_t mod )
{
    16f0:	defffe04 	addi	sp,sp,-8
    16f4:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    16f8:	00801504 	movi	r2,84
    16fc:	20000126 	beq	r4,zero,1704 <lms_get_bandwidth+0x14>
    1700:	00800d04 	movi	r2,52
	lms_spi_read( reg, &data ) ;
    1704:	11003fcc 	andi	r4,r2,255
    1708:	d80b883a 	mov	r5,sp
    170c:	00007f80 	call	7f8 <lms_spi_read>
    1710:	d8800003 	ldbu	r2,0(sp)
    1714:	10800f0c 	andi	r2,r2,60
	data &= 0x3c ;
	data >>= 2 ;
	return (lms_bw_t)data ;
}
    1718:	1004d0ba 	srli	r2,r2,2
    171c:	dfc00117 	ldw	ra,4(sp)
    1720:	dec00204 	addi	sp,sp,8
    1724:	f800283a 	ret

00001728 <lms_lpf_bypass>:
	}
	return ;
}

void lms_lpf_bypass( lms_module_t mod )
{
    1728:	defffd04 	addi	sp,sp,-12
    172c:	dc000115 	stw	r16,4(sp)
    1730:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
    1734:	04001544 	movi	r16,85
    1738:	20000126 	beq	r4,zero,1740 <lms_lpf_bypass+0x18>
    173c:	04000d44 	movi	r16,53
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
    1740:	84003fcc 	andi	r16,r16,255
    1744:	d80b883a 	mov	r5,sp
    1748:	8009883a 	mov	r4,r16
    174c:	00007f80 	call	7f8 <lms_spi_read>
	data |= (1<<6) ;
    1750:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1754:	8009883a 	mov	r4,r16
void lms_lpf_bypass( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<6) ;
    1758:	10801014 	ori	r2,r2,64
	lms_spi_write( reg, data ) ;
    175c:	11403fcc 	andi	r5,r2,255
void lms_lpf_bypass( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<6) ;
    1760:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1764:	00004100 	call	410 <lms_spi_write>
	return ;
}
    1768:	dfc00217 	ldw	ra,8(sp)
    176c:	dc000117 	ldw	r16,4(sp)
    1770:	dec00304 	addi	sp,sp,12
    1774:	f800283a 	ret

00001778 <lms_lpf_enable>:
	return ;
}

// When enabling an LPF, we must select both the module and the filter bandwidth
void lms_lpf_enable( lms_module_t mod, lms_bw_t bw )
{
    1778:	defffb04 	addi	sp,sp,-20
    177c:	dc800315 	stw	r18,12(sp)
    1780:	dc400215 	stw	r17,8(sp)
    1784:	dfc00415 	stw	ra,16(sp)
    1788:	dc000115 	stw	r16,4(sp)
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    178c:	04801504 	movi	r18,84
	return ;
}

// When enabling an LPF, we must select both the module and the filter bandwidth
void lms_lpf_enable( lms_module_t mod, lms_bw_t bw )
{
    1790:	2823883a 	mov	r17,r5
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    1794:	20000126 	beq	r4,zero,179c <lms_lpf_enable+0x24>
    1798:	04800d04 	movi	r18,52
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
    179c:	94003fcc 	andi	r16,r18,255
    17a0:	d80b883a 	mov	r5,sp
    17a4:	8009883a 	mov	r4,r16
    17a8:	00007f80 	call	7f8 <lms_spi_read>
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    17ac:	d9800003 	ldbu	r6,0(sp)
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
    17b0:	00bff0c4 	movi	r2,-61
    17b4:	8c47883a 	add	r3,r17,r17
    17b8:	3084703a 	and	r2,r6,r2
    17bc:	18c7883a 	add	r3,r3,r3
    17c0:	10800094 	ori	r2,r2,2
    17c4:	1886b03a 	or	r3,r3,r2
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    17c8:	318003cc 	andi	r6,r6,15
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
    17cc:	8009883a 	mov	r4,r16
    17d0:	19403fcc 	andi	r5,r3,255
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    17d4:	34400226 	beq	r6,r17,17e0 <lms_lpf_enable+0x68>
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
    17d8:	d8c00005 	stb	r3,0(sp)
		lms_spi_write( reg, data ) ;
    17dc:	00004100 	call	410 <lms_spi_write>
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
    17e0:	94000044 	addi	r16,r18,1
    17e4:	84003fcc 	andi	r16,r16,255
    17e8:	d80b883a 	mov	r5,sp
    17ec:	8009883a 	mov	r4,r16
    17f0:	00007f80 	call	7f8 <lms_spi_read>
	if( data&(1<<6) )
    17f4:	d8c00003 	ldbu	r3,0(sp)
	{
		data &= ~(1<<6) ;
    17f8:	00bfefc4 	movi	r2,-65
		lms_spi_write( reg+1, data ) ;
    17fc:	8009883a 	mov	r4,r16
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
	{
		data &= ~(1<<6) ;
    1800:	1884703a 	and	r2,r3,r2
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
    1804:	18c0100c 	andi	r3,r3,64
	{
		data &= ~(1<<6) ;
		lms_spi_write( reg+1, data ) ;
    1808:	11402fcc 	andi	r5,r2,191
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
    180c:	18000226 	beq	r3,zero,1818 <lms_lpf_enable+0xa0>
	{
		data &= ~(1<<6) ;
    1810:	d8800005 	stb	r2,0(sp)
		lms_spi_write( reg+1, data ) ;
    1814:	00004100 	call	410 <lms_spi_write>
	}
	return ;
}
    1818:	dfc00417 	ldw	ra,16(sp)
    181c:	dc800317 	ldw	r18,12(sp)
    1820:	dc400217 	ldw	r17,8(sp)
    1824:	dc000117 	ldw	r16,4(sp)
    1828:	dec00504 	addi	sp,sp,20
    182c:	f800283a 	ret

00001830 <lms_loopback_disable>:
	return mode ;
}

// Disable loopback mode - must choose which LNA to hook up and what bandwidth you want
void lms_loopback_disable( lms_lna_t lna, lms_bw_t bw )
{
    1830:	defffc04 	addi	sp,sp,-16
    1834:	dfc00315 	stw	ra,12(sp)
    1838:	dc800215 	stw	r18,8(sp)
    183c:	dc400115 	stw	r17,4(sp)
    1840:	dc000015 	stw	r16,0(sp)
    1844:	2025883a 	mov	r18,r4
    1848:	2823883a 	mov	r17,r5
	// Read which type of loopback mode we were in
	lms_loopback_mode_t mode = lms_get_loopback_mode() ;
    184c:	0000ffc0 	call	ffc <lms_get_loopback_mode>

	// Disable all RX loopback modes
	lms_spi_write( 0x08, 0 ) ;
    1850:	01000204 	movi	r4,8
    1854:	000b883a 	mov	r5,zero

// Disable loopback mode - must choose which LNA to hook up and what bandwidth you want
void lms_loopback_disable( lms_lna_t lna, lms_bw_t bw )
{
	// Read which type of loopback mode we were in
	lms_loopback_mode_t mode = lms_get_loopback_mode() ;
    1858:	1021883a 	mov	r16,r2

	// Disable all RX loopback modes
	lms_spi_write( 0x08, 0 ) ;
    185c:	00004100 	call	410 <lms_spi_write>

	switch(mode)
    1860:	00800184 	movi	r2,6
    1864:	14003136 	bltu	r2,r16,192c <lms_loopback_disable+0xfc>
    1868:	8405883a 	add	r2,r16,r16
    186c:	1085883a 	add	r2,r2,r2
    1870:	00c00034 	movhi	r3,0
    1874:	18c62104 	addi	r3,r3,6276
    1878:	10c5883a 	add	r2,r2,r3
    187c:	10800017 	ldw	r2,0(r2)
    1880:	1000683a 	jmp	r2
    1884:	000018a0 	cmpeqi	zero,zero,98
    1888:	000018ac 	andhi	zero,zero,98
    188c:	000018d4 	movui	zero,99
    1890:	0000192c 	andhi	zero,zero,100
    1894:	00001908 	cmpgei	zero,zero,100
    1898:	00001908 	cmpgei	zero,zero,100
    189c:	00001908 	cmpgei	zero,zero,100
	{
		case LB_BB_LPF:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    18a0:	0009883a 	mov	r4,zero
    18a4:	00011940 	call	1194 <lms_tx_loopback_disable>
    18a8:	00001106 	br	18f0 <lms_loopback_disable+0xc0>
			// Enable RXVGA1
			lms_rxvga1_enable() ;
			break ;
		case LB_BB_VGA2:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    18ac:	0009883a 	mov	r4,zero
    18b0:	00011940 	call	1194 <lms_tx_loopback_disable>
			// Enable RXLPF
			lms_lpf_enable( RX, bw ) ;
    18b4:	880b883a 	mov	r5,r17
    18b8:	0009883a 	mov	r4,zero
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    18bc:	dfc00317 	ldw	ra,12(sp)
    18c0:	dc800217 	ldw	r18,8(sp)
    18c4:	dc400117 	ldw	r17,4(sp)
    18c8:	dc000017 	ldw	r16,0(sp)
    18cc:	dec00404 	addi	sp,sp,16
			break ;
		case LB_BB_VGA2:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
			// Enable RXLPF
			lms_lpf_enable( RX, bw ) ;
    18d0:	00017781 	jmpi	1778 <lms_lpf_enable>
			break ;
		case LB_BB_OP:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    18d4:	0009883a 	mov	r4,zero
    18d8:	00011940 	call	1194 <lms_tx_loopback_disable>
			// Enable RXLPF, RXVGA1 and RXVGA2
			lms_lpf_enable( RX, bw ) ;
    18dc:	880b883a 	mov	r5,r17
    18e0:	0009883a 	mov	r4,zero
    18e4:	00017780 	call	1778 <lms_lpf_enable>
			lms_rxvga2_enable( 30/3 ) ;
    18e8:	01000284 	movi	r4,10
    18ec:	00013500 	call	1350 <lms_rxvga2_enable>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    18f0:	dfc00317 	ldw	ra,12(sp)
    18f4:	dc800217 	ldw	r18,8(sp)
    18f8:	dc400117 	ldw	r17,4(sp)
    18fc:	dc000017 	ldw	r16,0(sp)
    1900:	dec00404 	addi	sp,sp,16
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
			// Enable RXLPF, RXVGA1 and RXVGA2
			lms_lpf_enable( RX, bw ) ;
			lms_rxvga2_enable( 30/3 ) ;
			lms_rxvga1_enable() ;
    1904:	00007941 	jmpi	794 <lms_rxvga1_enable>
			break ;
		case LB_RF_LNA1:
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable TX RF loopback
			lms_tx_loopback_disable( TXLB_RF ) ;
    1908:	01000044 	movi	r4,1
    190c:	00011940 	call	1194 <lms_tx_loopback_disable>
			// Enable selected LNA
			lms_lna_select( lna ) ;
    1910:	9009883a 	mov	r4,r18
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1914:	dfc00317 	ldw	ra,12(sp)
    1918:	dc800217 	ldw	r18,8(sp)
    191c:	dc400117 	ldw	r17,4(sp)
    1920:	dc000017 	ldw	r16,0(sp)
    1924:	dec00404 	addi	sp,sp,16
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable TX RF loopback
			lms_tx_loopback_disable( TXLB_RF ) ;
			// Enable selected LNA
			lms_lna_select( lna ) ;
    1928:	00013f01 	jmpi	13f0 <lms_lna_select>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    192c:	dfc00317 	ldw	ra,12(sp)
    1930:	dc800217 	ldw	r18,8(sp)
    1934:	dc400117 	ldw	r17,4(sp)
    1938:	dc000017 	ldw	r16,0(sp)
    193c:	dec00404 	addi	sp,sp,16
    1940:	f800283a 	ret

00001944 <dac_write>:
     0x7C,
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1944:	defff704 	addi	sp,sp,-36
    1948:	dc000415 	stw	r16,16(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
    194c:	243fffcc 	andi	r16,r4,65535
     0x7C,
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1950:	dcc00715 	stw	r19,28(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
    1954:	800b883a 	mov	r5,r16
     0x7C,
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1958:	2027883a 	mov	r19,r4
	alt_printf( "DAC Writing: %x\n", val ) ;
    195c:	01000034 	movhi	r4,0
    1960:	210c7a04 	addi	r4,r4,12776
     0x7C,
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1964:	dfc00815 	stw	ra,32(sp)
    1968:	dc800615 	stw	r18,24(sp)
    196c:	dc400515 	stw	r17,20(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    1970:	048000c4 	movi	r18,3
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
    1974:	0002c780 	call	2c78 <alt_printf>
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    1978:	044000b4 	movhi	r17,2
    197c:	8c540004 	addi	r17,r17,20480
    1980:	8809883a 	mov	r4,r17
    1984:	900d883a 	mov	r6,r18
    1988:	d9c00304 	addi	r7,sp,12
    198c:	000b883a 	mov	r5,zero

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
    1990:	00800a04 	movi	r2,40
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    1994:	8020d23a 	srli	r16,r16,8

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
    1998:	d8800305 	stb	r2,12(sp)
    199c:	d8000345 	stb	zero,13(sp)
    19a0:	d8000385 	stb	zero,14(sp)
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    19a4:	d8000015 	stw	zero,0(sp)
    19a8:	d8000115 	stw	zero,4(sp)
    19ac:	d8000215 	stw	zero,8(sp)
    19b0:	0002f140 	call	2f14 <alt_avalon_spi_command>
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    19b4:	00800204 	movi	r2,8
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0) ;
    19b8:	8809883a 	mov	r4,r17
    19bc:	900d883a 	mov	r6,r18
    19c0:	000b883a 	mov	r5,zero
    19c4:	d9c00304 	addi	r7,sp,12
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    19c8:	d8800305 	stb	r2,12(sp)
    19cc:	dc000345 	stb	r16,13(sp)
    19d0:	dcc00385 	stb	r19,14(sp)
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0) ;
    19d4:	d8000015 	stw	zero,0(sp)
    19d8:	d8000115 	stw	zero,4(sp)
    19dc:	d8000215 	stw	zero,8(sp)
    19e0:	0002f140 	call	2f14 <alt_avalon_spi_command>
	return ;
}
    19e4:	dfc00817 	ldw	ra,32(sp)
    19e8:	dcc00717 	ldw	r19,28(sp)
    19ec:	dc800617 	ldw	r18,24(sp)
    19f0:	dc400517 	ldw	r17,20(sp)
    19f4:	dc000417 	ldw	r16,16(sp)
    19f8:	dec00904 	addi	sp,sp,36
    19fc:	f800283a 	ret

00001a00 <__udivdi3>:
    1a00:	defff104 	addi	sp,sp,-60
    1a04:	0015883a 	mov	r10,zero
    1a08:	2005883a 	mov	r2,r4
    1a0c:	3011883a 	mov	r8,r6
    1a10:	df000d15 	stw	fp,52(sp)
    1a14:	dd400a15 	stw	r21,40(sp)
    1a18:	dcc00815 	stw	r19,32(sp)
    1a1c:	dfc00e15 	stw	ra,56(sp)
    1a20:	ddc00c15 	stw	r23,48(sp)
    1a24:	dd800b15 	stw	r22,44(sp)
    1a28:	dd000915 	stw	r20,36(sp)
    1a2c:	dc800715 	stw	r18,28(sp)
    1a30:	dc400615 	stw	r17,24(sp)
    1a34:	dc000515 	stw	r16,20(sp)
    1a38:	da800315 	stw	r10,12(sp)
    1a3c:	4027883a 	mov	r19,r8
    1a40:	1039883a 	mov	fp,r2
    1a44:	282b883a 	mov	r21,r5
    1a48:	da800415 	stw	r10,16(sp)
    1a4c:	3800401e 	bne	r7,zero,1b50 <__udivdi3+0x150>
    1a50:	2a006536 	bltu	r5,r8,1be8 <__udivdi3+0x1e8>
    1a54:	4000b526 	beq	r8,zero,1d2c <__udivdi3+0x32c>
    1a58:	00bfffd4 	movui	r2,65535
    1a5c:	14c0ad36 	bltu	r2,r19,1d14 <__udivdi3+0x314>
    1a60:	00803fc4 	movi	r2,255
    1a64:	14c15e36 	bltu	r2,r19,1fe0 <__udivdi3+0x5e0>
    1a68:	000b883a 	mov	r5,zero
    1a6c:	0005883a 	mov	r2,zero
    1a70:	9884d83a 	srl	r2,r19,r2
    1a74:	01000034 	movhi	r4,0
    1a78:	210cdc04 	addi	r4,r4,13168
    1a7c:	01800804 	movi	r6,32
    1a80:	1105883a 	add	r2,r2,r4
    1a84:	10c00003 	ldbu	r3,0(r2)
    1a88:	28c7883a 	add	r3,r5,r3
    1a8c:	30e9c83a 	sub	r20,r6,r3
    1a90:	a0010a1e 	bne	r20,zero,1ebc <__udivdi3+0x4bc>
    1a94:	982ed43a 	srli	r23,r19,16
    1a98:	acebc83a 	sub	r21,r21,r19
    1a9c:	9dbfffcc 	andi	r22,r19,65535
    1aa0:	05000044 	movi	r20,1
    1aa4:	a809883a 	mov	r4,r21
    1aa8:	b80b883a 	mov	r5,r23
    1aac:	00021a80 	call	21a8 <__udivsi3>
    1ab0:	100b883a 	mov	r5,r2
    1ab4:	b009883a 	mov	r4,r22
    1ab8:	1021883a 	mov	r16,r2
    1abc:	00021b80 	call	21b8 <__mulsi3>
    1ac0:	a809883a 	mov	r4,r21
    1ac4:	b80b883a 	mov	r5,r23
    1ac8:	1023883a 	mov	r17,r2
    1acc:	00021b00 	call	21b0 <__umodsi3>
    1ad0:	1004943a 	slli	r2,r2,16
    1ad4:	e006d43a 	srli	r3,fp,16
    1ad8:	10c4b03a 	or	r2,r2,r3
    1adc:	1440042e 	bgeu	r2,r17,1af0 <__udivdi3+0xf0>
    1ae0:	14c5883a 	add	r2,r2,r19
    1ae4:	843fffc4 	addi	r16,r16,-1
    1ae8:	14c00136 	bltu	r2,r19,1af0 <__udivdi3+0xf0>
    1aec:	14415c36 	bltu	r2,r17,2060 <__udivdi3+0x660>
    1af0:	1463c83a 	sub	r17,r2,r17
    1af4:	8809883a 	mov	r4,r17
    1af8:	b80b883a 	mov	r5,r23
    1afc:	00021a80 	call	21a8 <__udivsi3>
    1b00:	100b883a 	mov	r5,r2
    1b04:	b009883a 	mov	r4,r22
    1b08:	102b883a 	mov	r21,r2
    1b0c:	00021b80 	call	21b8 <__mulsi3>
    1b10:	8809883a 	mov	r4,r17
    1b14:	b80b883a 	mov	r5,r23
    1b18:	1025883a 	mov	r18,r2
    1b1c:	00021b00 	call	21b0 <__umodsi3>
    1b20:	1004943a 	slli	r2,r2,16
    1b24:	e0ffffcc 	andi	r3,fp,65535
    1b28:	10c4b03a 	or	r2,r2,r3
    1b2c:	1480042e 	bgeu	r2,r18,1b40 <__udivdi3+0x140>
    1b30:	9885883a 	add	r2,r19,r2
    1b34:	ad7fffc4 	addi	r21,r21,-1
    1b38:	14c00136 	bltu	r2,r19,1b40 <__udivdi3+0x140>
    1b3c:	14813c36 	bltu	r2,r18,2030 <__udivdi3+0x630>
    1b40:	8004943a 	slli	r2,r16,16
    1b44:	a009883a 	mov	r4,r20
    1b48:	a884b03a 	or	r2,r21,r2
    1b4c:	00001506 	br	1ba4 <__udivdi3+0x1a4>
    1b50:	380d883a 	mov	r6,r7
    1b54:	29c06c36 	bltu	r5,r7,1d08 <__udivdi3+0x308>
    1b58:	00bfffd4 	movui	r2,65535
    1b5c:	11c06436 	bltu	r2,r7,1cf0 <__udivdi3+0x2f0>
    1b60:	00803fc4 	movi	r2,255
    1b64:	11c11836 	bltu	r2,r7,1fc8 <__udivdi3+0x5c8>
    1b68:	000b883a 	mov	r5,zero
    1b6c:	0005883a 	mov	r2,zero
    1b70:	3084d83a 	srl	r2,r6,r2
    1b74:	01000034 	movhi	r4,0
    1b78:	210cdc04 	addi	r4,r4,13168
    1b7c:	01c00804 	movi	r7,32
    1b80:	1105883a 	add	r2,r2,r4
    1b84:	10c00003 	ldbu	r3,0(r2)
    1b88:	28c7883a 	add	r3,r5,r3
    1b8c:	38edc83a 	sub	r22,r7,r3
    1b90:	b000731e 	bne	r22,zero,1d60 <__udivdi3+0x360>
    1b94:	35400136 	bltu	r6,r21,1b9c <__udivdi3+0x19c>
    1b98:	e4c05b36 	bltu	fp,r19,1d08 <__udivdi3+0x308>
    1b9c:	00800044 	movi	r2,1
    1ba0:	0009883a 	mov	r4,zero
    1ba4:	d8800315 	stw	r2,12(sp)
    1ba8:	d9400317 	ldw	r5,12(sp)
    1bac:	2007883a 	mov	r3,r4
    1bb0:	d9000415 	stw	r4,16(sp)
    1bb4:	2805883a 	mov	r2,r5
    1bb8:	dfc00e17 	ldw	ra,56(sp)
    1bbc:	df000d17 	ldw	fp,52(sp)
    1bc0:	ddc00c17 	ldw	r23,48(sp)
    1bc4:	dd800b17 	ldw	r22,44(sp)
    1bc8:	dd400a17 	ldw	r21,40(sp)
    1bcc:	dd000917 	ldw	r20,36(sp)
    1bd0:	dcc00817 	ldw	r19,32(sp)
    1bd4:	dc800717 	ldw	r18,28(sp)
    1bd8:	dc400617 	ldw	r17,24(sp)
    1bdc:	dc000517 	ldw	r16,20(sp)
    1be0:	dec00f04 	addi	sp,sp,60
    1be4:	f800283a 	ret
    1be8:	00bfffd4 	movui	r2,65535
    1bec:	12005636 	bltu	r2,r8,1d48 <__udivdi3+0x348>
    1bf0:	00803fc4 	movi	r2,255
    1bf4:	12010036 	bltu	r2,r8,1ff8 <__udivdi3+0x5f8>
    1bf8:	000b883a 	mov	r5,zero
    1bfc:	0005883a 	mov	r2,zero
    1c00:	9884d83a 	srl	r2,r19,r2
    1c04:	01000034 	movhi	r4,0
    1c08:	210cdc04 	addi	r4,r4,13168
    1c0c:	01800804 	movi	r6,32
    1c10:	1105883a 	add	r2,r2,r4
    1c14:	10c00003 	ldbu	r3,0(r2)
    1c18:	28c7883a 	add	r3,r5,r3
    1c1c:	30cbc83a 	sub	r5,r6,r3
    1c20:	28000626 	beq	r5,zero,1c3c <__udivdi3+0x23c>
    1c24:	3145c83a 	sub	r2,r6,r5
    1c28:	e084d83a 	srl	r2,fp,r2
    1c2c:	a946983a 	sll	r3,r21,r5
    1c30:	e178983a 	sll	fp,fp,r5
    1c34:	9966983a 	sll	r19,r19,r5
    1c38:	18aab03a 	or	r21,r3,r2
    1c3c:	982ed43a 	srli	r23,r19,16
    1c40:	a809883a 	mov	r4,r21
    1c44:	9cbfffcc 	andi	r18,r19,65535
    1c48:	b80b883a 	mov	r5,r23
    1c4c:	00021a80 	call	21a8 <__udivsi3>
    1c50:	100b883a 	mov	r5,r2
    1c54:	9009883a 	mov	r4,r18
    1c58:	1021883a 	mov	r16,r2
    1c5c:	00021b80 	call	21b8 <__mulsi3>
    1c60:	a809883a 	mov	r4,r21
    1c64:	b80b883a 	mov	r5,r23
    1c68:	1023883a 	mov	r17,r2
    1c6c:	00021b00 	call	21b0 <__umodsi3>
    1c70:	1004943a 	slli	r2,r2,16
    1c74:	e006d43a 	srli	r3,fp,16
    1c78:	10c4b03a 	or	r2,r2,r3
    1c7c:	1440042e 	bgeu	r2,r17,1c90 <__udivdi3+0x290>
    1c80:	14c5883a 	add	r2,r2,r19
    1c84:	843fffc4 	addi	r16,r16,-1
    1c88:	14c00136 	bltu	r2,r19,1c90 <__udivdi3+0x290>
    1c8c:	1440ea36 	bltu	r2,r17,2038 <__udivdi3+0x638>
    1c90:	1463c83a 	sub	r17,r2,r17
    1c94:	8809883a 	mov	r4,r17
    1c98:	b80b883a 	mov	r5,r23
    1c9c:	00021a80 	call	21a8 <__udivsi3>
    1ca0:	100b883a 	mov	r5,r2
    1ca4:	9009883a 	mov	r4,r18
    1ca8:	102b883a 	mov	r21,r2
    1cac:	00021b80 	call	21b8 <__mulsi3>
    1cb0:	8809883a 	mov	r4,r17
    1cb4:	b80b883a 	mov	r5,r23
    1cb8:	1025883a 	mov	r18,r2
    1cbc:	00021b00 	call	21b0 <__umodsi3>
    1cc0:	1004943a 	slli	r2,r2,16
    1cc4:	e0ffffcc 	andi	r3,fp,65535
    1cc8:	10c4b03a 	or	r2,r2,r3
    1ccc:	1480042e 	bgeu	r2,r18,1ce0 <__udivdi3+0x2e0>
    1cd0:	9885883a 	add	r2,r19,r2
    1cd4:	ad7fffc4 	addi	r21,r21,-1
    1cd8:	14c00136 	bltu	r2,r19,1ce0 <__udivdi3+0x2e0>
    1cdc:	1480d936 	bltu	r2,r18,2044 <__udivdi3+0x644>
    1ce0:	8004943a 	slli	r2,r16,16
    1ce4:	0009883a 	mov	r4,zero
    1ce8:	a884b03a 	or	r2,r21,r2
    1cec:	003fad06 	br	1ba4 <__udivdi3+0x1a4>
    1cf0:	00804034 	movhi	r2,256
    1cf4:	10bfffc4 	addi	r2,r2,-1
    1cf8:	11c0b636 	bltu	r2,r7,1fd4 <__udivdi3+0x5d4>
    1cfc:	01400404 	movi	r5,16
    1d00:	2805883a 	mov	r2,r5
    1d04:	003f9a06 	br	1b70 <__udivdi3+0x170>
    1d08:	0005883a 	mov	r2,zero
    1d0c:	0009883a 	mov	r4,zero
    1d10:	003fa406 	br	1ba4 <__udivdi3+0x1a4>
    1d14:	00804034 	movhi	r2,256
    1d18:	10bfffc4 	addi	r2,r2,-1
    1d1c:	14c0b336 	bltu	r2,r19,1fec <__udivdi3+0x5ec>
    1d20:	01400404 	movi	r5,16
    1d24:	2805883a 	mov	r2,r5
    1d28:	003f5106 	br	1a70 <__udivdi3+0x70>
    1d2c:	01000044 	movi	r4,1
    1d30:	000b883a 	mov	r5,zero
    1d34:	00021a80 	call	21a8 <__udivsi3>
    1d38:	1027883a 	mov	r19,r2
    1d3c:	00bfffd4 	movui	r2,65535
    1d40:	14fff436 	bltu	r2,r19,1d14 <__udivdi3+0x314>
    1d44:	003f4606 	br	1a60 <__udivdi3+0x60>
    1d48:	00804034 	movhi	r2,256
    1d4c:	10bfffc4 	addi	r2,r2,-1
    1d50:	1200ac36 	bltu	r2,r8,2004 <__udivdi3+0x604>
    1d54:	01400404 	movi	r5,16
    1d58:	2805883a 	mov	r2,r5
    1d5c:	003fa806 	br	1c00 <__udivdi3+0x200>
    1d60:	3d85c83a 	sub	r2,r7,r22
    1d64:	3588983a 	sll	r4,r6,r22
    1d68:	9886d83a 	srl	r3,r19,r2
    1d6c:	a8a2d83a 	srl	r17,r21,r2
    1d70:	e084d83a 	srl	r2,fp,r2
    1d74:	20eeb03a 	or	r23,r4,r3
    1d78:	b824d43a 	srli	r18,r23,16
    1d7c:	ad86983a 	sll	r3,r21,r22
    1d80:	8809883a 	mov	r4,r17
    1d84:	900b883a 	mov	r5,r18
    1d88:	1886b03a 	or	r3,r3,r2
    1d8c:	d8c00115 	stw	r3,4(sp)
    1d90:	bc3fffcc 	andi	r16,r23,65535
    1d94:	00021a80 	call	21a8 <__udivsi3>
    1d98:	100b883a 	mov	r5,r2
    1d9c:	8009883a 	mov	r4,r16
    1da0:	1029883a 	mov	r20,r2
    1da4:	00021b80 	call	21b8 <__mulsi3>
    1da8:	900b883a 	mov	r5,r18
    1dac:	8809883a 	mov	r4,r17
    1db0:	102b883a 	mov	r21,r2
    1db4:	00021b00 	call	21b0 <__umodsi3>
    1db8:	d9400117 	ldw	r5,4(sp)
    1dbc:	1004943a 	slli	r2,r2,16
    1dc0:	9da6983a 	sll	r19,r19,r22
    1dc4:	2806d43a 	srli	r3,r5,16
    1dc8:	10c4b03a 	or	r2,r2,r3
    1dcc:	1540032e 	bgeu	r2,r21,1ddc <__udivdi3+0x3dc>
    1dd0:	15c5883a 	add	r2,r2,r23
    1dd4:	a53fffc4 	addi	r20,r20,-1
    1dd8:	15c0912e 	bgeu	r2,r23,2020 <__udivdi3+0x620>
    1ddc:	1563c83a 	sub	r17,r2,r21
    1de0:	8809883a 	mov	r4,r17
    1de4:	900b883a 	mov	r5,r18
    1de8:	00021a80 	call	21a8 <__udivsi3>
    1dec:	100b883a 	mov	r5,r2
    1df0:	8009883a 	mov	r4,r16
    1df4:	102b883a 	mov	r21,r2
    1df8:	00021b80 	call	21b8 <__mulsi3>
    1dfc:	8809883a 	mov	r4,r17
    1e00:	900b883a 	mov	r5,r18
    1e04:	1021883a 	mov	r16,r2
    1e08:	00021b00 	call	21b0 <__umodsi3>
    1e0c:	da800117 	ldw	r10,4(sp)
    1e10:	1004943a 	slli	r2,r2,16
    1e14:	50ffffcc 	andi	r3,r10,65535
    1e18:	10c6b03a 	or	r3,r2,r3
    1e1c:	1c00032e 	bgeu	r3,r16,1e2c <__udivdi3+0x42c>
    1e20:	1dc7883a 	add	r3,r3,r23
    1e24:	ad7fffc4 	addi	r21,r21,-1
    1e28:	1dc0792e 	bgeu	r3,r23,2010 <__udivdi3+0x610>
    1e2c:	a004943a 	slli	r2,r20,16
    1e30:	982ed43a 	srli	r23,r19,16
    1e34:	9cffffcc 	andi	r19,r19,65535
    1e38:	a8a4b03a 	or	r18,r21,r2
    1e3c:	947fffcc 	andi	r17,r18,65535
    1e40:	902ad43a 	srli	r21,r18,16
    1e44:	8809883a 	mov	r4,r17
    1e48:	980b883a 	mov	r5,r19
    1e4c:	1c21c83a 	sub	r16,r3,r16
    1e50:	00021b80 	call	21b8 <__mulsi3>
    1e54:	8809883a 	mov	r4,r17
    1e58:	b80b883a 	mov	r5,r23
    1e5c:	1029883a 	mov	r20,r2
    1e60:	00021b80 	call	21b8 <__mulsi3>
    1e64:	980b883a 	mov	r5,r19
    1e68:	a809883a 	mov	r4,r21
    1e6c:	1023883a 	mov	r17,r2
    1e70:	00021b80 	call	21b8 <__mulsi3>
    1e74:	a809883a 	mov	r4,r21
    1e78:	b80b883a 	mov	r5,r23
    1e7c:	1027883a 	mov	r19,r2
    1e80:	00021b80 	call	21b8 <__mulsi3>
    1e84:	1009883a 	mov	r4,r2
    1e88:	a004d43a 	srli	r2,r20,16
    1e8c:	8ce3883a 	add	r17,r17,r19
    1e90:	1447883a 	add	r3,r2,r17
    1e94:	1cc0022e 	bgeu	r3,r19,1ea0 <__udivdi3+0x4a0>
    1e98:	00800074 	movhi	r2,1
    1e9c:	2089883a 	add	r4,r4,r2
    1ea0:	1804d43a 	srli	r2,r3,16
    1ea4:	2085883a 	add	r2,r4,r2
    1ea8:	80804436 	bltu	r16,r2,1fbc <__udivdi3+0x5bc>
    1eac:	80803e26 	beq	r16,r2,1fa8 <__udivdi3+0x5a8>
    1eb0:	9005883a 	mov	r2,r18
    1eb4:	0009883a 	mov	r4,zero
    1eb8:	003f3a06 	br	1ba4 <__udivdi3+0x1a4>
    1ebc:	9d26983a 	sll	r19,r19,r20
    1ec0:	3505c83a 	sub	r2,r6,r20
    1ec4:	a8a2d83a 	srl	r17,r21,r2
    1ec8:	982ed43a 	srli	r23,r19,16
    1ecc:	e084d83a 	srl	r2,fp,r2
    1ed0:	ad06983a 	sll	r3,r21,r20
    1ed4:	8809883a 	mov	r4,r17
    1ed8:	b80b883a 	mov	r5,r23
    1edc:	1886b03a 	or	r3,r3,r2
    1ee0:	d8c00015 	stw	r3,0(sp)
    1ee4:	9dbfffcc 	andi	r22,r19,65535
    1ee8:	00021a80 	call	21a8 <__udivsi3>
    1eec:	100b883a 	mov	r5,r2
    1ef0:	b009883a 	mov	r4,r22
    1ef4:	d8800215 	stw	r2,8(sp)
    1ef8:	00021b80 	call	21b8 <__mulsi3>
    1efc:	8809883a 	mov	r4,r17
    1f00:	b80b883a 	mov	r5,r23
    1f04:	102b883a 	mov	r21,r2
    1f08:	00021b00 	call	21b0 <__umodsi3>
    1f0c:	d9000017 	ldw	r4,0(sp)
    1f10:	1004943a 	slli	r2,r2,16
    1f14:	2006d43a 	srli	r3,r4,16
    1f18:	10c4b03a 	or	r2,r2,r3
    1f1c:	1540052e 	bgeu	r2,r21,1f34 <__udivdi3+0x534>
    1f20:	d9400217 	ldw	r5,8(sp)
    1f24:	14c5883a 	add	r2,r2,r19
    1f28:	297fffc4 	addi	r5,r5,-1
    1f2c:	d9400215 	stw	r5,8(sp)
    1f30:	14c0462e 	bgeu	r2,r19,204c <__udivdi3+0x64c>
    1f34:	1563c83a 	sub	r17,r2,r21
    1f38:	8809883a 	mov	r4,r17
    1f3c:	b80b883a 	mov	r5,r23
    1f40:	00021a80 	call	21a8 <__udivsi3>
    1f44:	100b883a 	mov	r5,r2
    1f48:	b009883a 	mov	r4,r22
    1f4c:	1025883a 	mov	r18,r2
    1f50:	00021b80 	call	21b8 <__mulsi3>
    1f54:	8809883a 	mov	r4,r17
    1f58:	b80b883a 	mov	r5,r23
    1f5c:	1021883a 	mov	r16,r2
    1f60:	00021b00 	call	21b0 <__umodsi3>
    1f64:	da800017 	ldw	r10,0(sp)
    1f68:	1004943a 	slli	r2,r2,16
    1f6c:	50ffffcc 	andi	r3,r10,65535
    1f70:	10c6b03a 	or	r3,r2,r3
    1f74:	1c00062e 	bgeu	r3,r16,1f90 <__udivdi3+0x590>
    1f78:	1cc7883a 	add	r3,r3,r19
    1f7c:	94bfffc4 	addi	r18,r18,-1
    1f80:	1cc00336 	bltu	r3,r19,1f90 <__udivdi3+0x590>
    1f84:	1c00022e 	bgeu	r3,r16,1f90 <__udivdi3+0x590>
    1f88:	94bfffc4 	addi	r18,r18,-1
    1f8c:	1cc7883a 	add	r3,r3,r19
    1f90:	d9000217 	ldw	r4,8(sp)
    1f94:	e538983a 	sll	fp,fp,r20
    1f98:	1c2bc83a 	sub	r21,r3,r16
    1f9c:	2004943a 	slli	r2,r4,16
    1fa0:	90a8b03a 	or	r20,r18,r2
    1fa4:	003ebf06 	br	1aa4 <__udivdi3+0xa4>
    1fa8:	1804943a 	slli	r2,r3,16
    1fac:	e588983a 	sll	r4,fp,r22
    1fb0:	a0ffffcc 	andi	r3,r20,65535
    1fb4:	10c5883a 	add	r2,r2,r3
    1fb8:	20bfbd2e 	bgeu	r4,r2,1eb0 <__udivdi3+0x4b0>
    1fbc:	90bfffc4 	addi	r2,r18,-1
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	003ef706 	br	1ba4 <__udivdi3+0x1a4>
    1fc8:	01400204 	movi	r5,8
    1fcc:	2805883a 	mov	r2,r5
    1fd0:	003ee706 	br	1b70 <__udivdi3+0x170>
    1fd4:	01400604 	movi	r5,24
    1fd8:	2805883a 	mov	r2,r5
    1fdc:	003ee406 	br	1b70 <__udivdi3+0x170>
    1fe0:	01400204 	movi	r5,8
    1fe4:	2805883a 	mov	r2,r5
    1fe8:	003ea106 	br	1a70 <__udivdi3+0x70>
    1fec:	01400604 	movi	r5,24
    1ff0:	2805883a 	mov	r2,r5
    1ff4:	003e9e06 	br	1a70 <__udivdi3+0x70>
    1ff8:	01400204 	movi	r5,8
    1ffc:	2805883a 	mov	r2,r5
    2000:	003eff06 	br	1c00 <__udivdi3+0x200>
    2004:	01400604 	movi	r5,24
    2008:	2805883a 	mov	r2,r5
    200c:	003efc06 	br	1c00 <__udivdi3+0x200>
    2010:	1c3f862e 	bgeu	r3,r16,1e2c <__udivdi3+0x42c>
    2014:	1dc7883a 	add	r3,r3,r23
    2018:	ad7fffc4 	addi	r21,r21,-1
    201c:	003f8306 	br	1e2c <__udivdi3+0x42c>
    2020:	157f6e2e 	bgeu	r2,r21,1ddc <__udivdi3+0x3dc>
    2024:	a53fffc4 	addi	r20,r20,-1
    2028:	15c5883a 	add	r2,r2,r23
    202c:	003f6b06 	br	1ddc <__udivdi3+0x3dc>
    2030:	ad7fffc4 	addi	r21,r21,-1
    2034:	003ec206 	br	1b40 <__udivdi3+0x140>
    2038:	843fffc4 	addi	r16,r16,-1
    203c:	14c5883a 	add	r2,r2,r19
    2040:	003f1306 	br	1c90 <__udivdi3+0x290>
    2044:	ad7fffc4 	addi	r21,r21,-1
    2048:	003f2506 	br	1ce0 <__udivdi3+0x2e0>
    204c:	157fb92e 	bgeu	r2,r21,1f34 <__udivdi3+0x534>
    2050:	297fffc4 	addi	r5,r5,-1
    2054:	14c5883a 	add	r2,r2,r19
    2058:	d9400215 	stw	r5,8(sp)
    205c:	003fb506 	br	1f34 <__udivdi3+0x534>
    2060:	843fffc4 	addi	r16,r16,-1
    2064:	14c5883a 	add	r2,r2,r19
    2068:	003ea106 	br	1af0 <__udivdi3+0xf0>

0000206c <udivmodsi4>:
    206c:	29001b2e 	bgeu	r5,r4,20dc <udivmodsi4+0x70>
    2070:	28001a16 	blt	r5,zero,20dc <udivmodsi4+0x70>
    2074:	00800044 	movi	r2,1
    2078:	0007883a 	mov	r3,zero
    207c:	01c007c4 	movi	r7,31
    2080:	00000306 	br	2090 <udivmodsi4+0x24>
    2084:	19c01326 	beq	r3,r7,20d4 <udivmodsi4+0x68>
    2088:	18c00044 	addi	r3,r3,1
    208c:	28000416 	blt	r5,zero,20a0 <udivmodsi4+0x34>
    2090:	294b883a 	add	r5,r5,r5
    2094:	1085883a 	add	r2,r2,r2
    2098:	293ffa36 	bltu	r5,r4,2084 <udivmodsi4+0x18>
    209c:	10000d26 	beq	r2,zero,20d4 <udivmodsi4+0x68>
    20a0:	0007883a 	mov	r3,zero
    20a4:	21400236 	bltu	r4,r5,20b0 <udivmodsi4+0x44>
    20a8:	2149c83a 	sub	r4,r4,r5
    20ac:	1886b03a 	or	r3,r3,r2
    20b0:	1004d07a 	srli	r2,r2,1
    20b4:	280ad07a 	srli	r5,r5,1
    20b8:	103ffa1e 	bne	r2,zero,20a4 <udivmodsi4+0x38>
    20bc:	30000226 	beq	r6,zero,20c8 <udivmodsi4+0x5c>
    20c0:	2005883a 	mov	r2,r4
    20c4:	f800283a 	ret
    20c8:	1809883a 	mov	r4,r3
    20cc:	2005883a 	mov	r2,r4
    20d0:	f800283a 	ret
    20d4:	0007883a 	mov	r3,zero
    20d8:	003ff806 	br	20bc <udivmodsi4+0x50>
    20dc:	00800044 	movi	r2,1
    20e0:	0007883a 	mov	r3,zero
    20e4:	003fef06 	br	20a4 <udivmodsi4+0x38>

000020e8 <__divsi3>:
    20e8:	defffe04 	addi	sp,sp,-8
    20ec:	dc000015 	stw	r16,0(sp)
    20f0:	dfc00115 	stw	ra,4(sp)
    20f4:	0021883a 	mov	r16,zero
    20f8:	20000c16 	blt	r4,zero,212c <__divsi3+0x44>
    20fc:	000d883a 	mov	r6,zero
    2100:	28000e16 	blt	r5,zero,213c <__divsi3+0x54>
    2104:	000206c0 	call	206c <udivmodsi4>
    2108:	1007883a 	mov	r3,r2
    210c:	8005003a 	cmpeq	r2,r16,zero
    2110:	1000011e 	bne	r2,zero,2118 <__divsi3+0x30>
    2114:	00c7c83a 	sub	r3,zero,r3
    2118:	1805883a 	mov	r2,r3
    211c:	dfc00117 	ldw	ra,4(sp)
    2120:	dc000017 	ldw	r16,0(sp)
    2124:	dec00204 	addi	sp,sp,8
    2128:	f800283a 	ret
    212c:	0109c83a 	sub	r4,zero,r4
    2130:	04000044 	movi	r16,1
    2134:	000d883a 	mov	r6,zero
    2138:	283ff20e 	bge	r5,zero,2104 <__divsi3+0x1c>
    213c:	014bc83a 	sub	r5,zero,r5
    2140:	8021003a 	cmpeq	r16,r16,zero
    2144:	003fef06 	br	2104 <__divsi3+0x1c>

00002148 <__modsi3>:
    2148:	deffff04 	addi	sp,sp,-4
    214c:	dfc00015 	stw	ra,0(sp)
    2150:	01800044 	movi	r6,1
    2154:	2807883a 	mov	r3,r5
    2158:	20000416 	blt	r4,zero,216c <__modsi3+0x24>
    215c:	28000c16 	blt	r5,zero,2190 <__modsi3+0x48>
    2160:	dfc00017 	ldw	ra,0(sp)
    2164:	dec00104 	addi	sp,sp,4
    2168:	000206c1 	jmpi	206c <udivmodsi4>
    216c:	0109c83a 	sub	r4,zero,r4
    2170:	28000b16 	blt	r5,zero,21a0 <__modsi3+0x58>
    2174:	180b883a 	mov	r5,r3
    2178:	01800044 	movi	r6,1
    217c:	000206c0 	call	206c <udivmodsi4>
    2180:	0085c83a 	sub	r2,zero,r2
    2184:	dfc00017 	ldw	ra,0(sp)
    2188:	dec00104 	addi	sp,sp,4
    218c:	f800283a 	ret
    2190:	014bc83a 	sub	r5,zero,r5
    2194:	dfc00017 	ldw	ra,0(sp)
    2198:	dec00104 	addi	sp,sp,4
    219c:	000206c1 	jmpi	206c <udivmodsi4>
    21a0:	0147c83a 	sub	r3,zero,r5
    21a4:	003ff306 	br	2174 <__modsi3+0x2c>

000021a8 <__udivsi3>:
    21a8:	000d883a 	mov	r6,zero
    21ac:	000206c1 	jmpi	206c <udivmodsi4>

000021b0 <__umodsi3>:
    21b0:	01800044 	movi	r6,1
    21b4:	000206c1 	jmpi	206c <udivmodsi4>

000021b8 <__mulsi3>:
    21b8:	20000a26 	beq	r4,zero,21e4 <__mulsi3+0x2c>
    21bc:	0007883a 	mov	r3,zero
    21c0:	2080004c 	andi	r2,r4,1
    21c4:	1005003a 	cmpeq	r2,r2,zero
    21c8:	2008d07a 	srli	r4,r4,1
    21cc:	1000011e 	bne	r2,zero,21d4 <__mulsi3+0x1c>
    21d0:	1947883a 	add	r3,r3,r5
    21d4:	294b883a 	add	r5,r5,r5
    21d8:	203ff91e 	bne	r4,zero,21c0 <__mulsi3+0x8>
    21dc:	1805883a 	mov	r2,r3
    21e0:	f800283a 	ret
    21e4:	0007883a 	mov	r3,zero
    21e8:	1805883a 	mov	r2,r3
    21ec:	f800283a 	ret

000021f0 <printf>:
    21f0:	defffb04 	addi	sp,sp,-20
    21f4:	dfc00115 	stw	ra,4(sp)
    21f8:	d9400215 	stw	r5,8(sp)
    21fc:	d9800315 	stw	r6,12(sp)
    2200:	d9c00415 	stw	r7,16(sp)
    2204:	00800034 	movhi	r2,0
    2208:	108d5404 	addi	r2,r2,13648
    220c:	11400017 	ldw	r5,0(r2)
    2210:	d8800204 	addi	r2,sp,8
    2214:	d8800015 	stw	r2,0(sp)
    2218:	29c00217 	ldw	r7,8(r5)
    221c:	100d883a 	mov	r6,r2
    2220:	00800034 	movhi	r2,0
    2224:	108aa304 	addi	r2,r2,10892
    2228:	200b883a 	mov	r5,r4
    222c:	38800115 	stw	r2,4(r7)
    2230:	3809883a 	mov	r4,r7
    2234:	0002a680 	call	2a68 <__vfprintf_internal>
    2238:	dfc00117 	ldw	ra,4(sp)
    223c:	dec00504 	addi	sp,sp,20
    2240:	f800283a 	ret

00002244 <_printf_r>:
    2244:	defffc04 	addi	sp,sp,-16
    2248:	dfc00115 	stw	ra,4(sp)
    224c:	d9800215 	stw	r6,8(sp)
    2250:	d9c00315 	stw	r7,12(sp)
    2254:	22000217 	ldw	r8,8(r4)
    2258:	d8800204 	addi	r2,sp,8
    225c:	d8800015 	stw	r2,0(sp)
    2260:	100f883a 	mov	r7,r2
    2264:	00800034 	movhi	r2,0
    2268:	108aa304 	addi	r2,r2,10892
    226c:	280d883a 	mov	r6,r5
    2270:	40800115 	stw	r2,4(r8)
    2274:	400b883a 	mov	r5,r8
    2278:	00023cc0 	call	23cc <___vfprintf_internal_r>
    227c:	dfc00117 	ldw	ra,4(sp)
    2280:	dec00404 	addi	sp,sp,16
    2284:	f800283a 	ret

00002288 <_puts_r>:
    2288:	defffd04 	addi	sp,sp,-12
    228c:	dc000015 	stw	r16,0(sp)
    2290:	2021883a 	mov	r16,r4
    2294:	2809883a 	mov	r4,r5
    2298:	dfc00215 	stw	ra,8(sp)
    229c:	dc400115 	stw	r17,4(sp)
    22a0:	2823883a 	mov	r17,r5
    22a4:	000232c0 	call	232c <strlen>
    22a8:	80c00217 	ldw	r3,8(r16)
    22ac:	02000034 	movhi	r8,0
    22b0:	420aa304 	addi	r8,r8,10892
    22b4:	880d883a 	mov	r6,r17
    22b8:	100f883a 	mov	r7,r2
    22bc:	8009883a 	mov	r4,r16
    22c0:	180b883a 	mov	r5,r3
    22c4:	1a000115 	stw	r8,4(r3)
    22c8:	403ee83a 	callr	r8
    22cc:	047fffc4 	movi	r17,-1
    22d0:	8009883a 	mov	r4,r16
    22d4:	01800034 	movhi	r6,0
    22d8:	318c5104 	addi	r6,r6,12612
    22dc:	01c00044 	movi	r7,1
    22e0:	1440071e 	bne	r2,r17,2300 <_puts_r+0x78>
    22e4:	00ffffc4 	movi	r3,-1
    22e8:	1805883a 	mov	r2,r3
    22ec:	dfc00217 	ldw	ra,8(sp)
    22f0:	dc400117 	ldw	r17,4(sp)
    22f4:	dc000017 	ldw	r16,0(sp)
    22f8:	dec00304 	addi	sp,sp,12
    22fc:	f800283a 	ret
    2300:	81400217 	ldw	r5,8(r16)
    2304:	28c00117 	ldw	r3,4(r5)
    2308:	183ee83a 	callr	r3
    230c:	0007883a 	mov	r3,zero
    2310:	147ff51e 	bne	r2,r17,22e8 <_puts_r+0x60>
    2314:	003ff306 	br	22e4 <_puts_r+0x5c>

00002318 <puts>:
    2318:	00800034 	movhi	r2,0
    231c:	108d5404 	addi	r2,r2,13648
    2320:	200b883a 	mov	r5,r4
    2324:	11000017 	ldw	r4,0(r2)
    2328:	00022881 	jmpi	2288 <_puts_r>

0000232c <strlen>:
    232c:	20800007 	ldb	r2,0(r4)
    2330:	10000526 	beq	r2,zero,2348 <strlen+0x1c>
    2334:	2007883a 	mov	r3,r4
    2338:	18c00044 	addi	r3,r3,1
    233c:	18800007 	ldb	r2,0(r3)
    2340:	103ffd1e 	bne	r2,zero,2338 <strlen+0xc>
    2344:	1905c83a 	sub	r2,r3,r4
    2348:	f800283a 	ret

0000234c <print_repeat>:
    234c:	defffb04 	addi	sp,sp,-20
    2350:	dc800315 	stw	r18,12(sp)
    2354:	dc400215 	stw	r17,8(sp)
    2358:	dc000115 	stw	r16,4(sp)
    235c:	dfc00415 	stw	ra,16(sp)
    2360:	2025883a 	mov	r18,r4
    2364:	2823883a 	mov	r17,r5
    2368:	3821883a 	mov	r16,r7
    236c:	d9800005 	stb	r6,0(sp)
    2370:	9009883a 	mov	r4,r18
    2374:	880b883a 	mov	r5,r17
    2378:	d80d883a 	mov	r6,sp
    237c:	01c00044 	movi	r7,1
    2380:	04000b0e 	bge	zero,r16,23b0 <print_repeat+0x64>
    2384:	88c00117 	ldw	r3,4(r17)
    2388:	843fffc4 	addi	r16,r16,-1
    238c:	183ee83a 	callr	r3
    2390:	103ff726 	beq	r2,zero,2370 <print_repeat+0x24>
    2394:	00bfffc4 	movi	r2,-1
    2398:	dfc00417 	ldw	ra,16(sp)
    239c:	dc800317 	ldw	r18,12(sp)
    23a0:	dc400217 	ldw	r17,8(sp)
    23a4:	dc000117 	ldw	r16,4(sp)
    23a8:	dec00504 	addi	sp,sp,20
    23ac:	f800283a 	ret
    23b0:	0005883a 	mov	r2,zero
    23b4:	dfc00417 	ldw	ra,16(sp)
    23b8:	dc800317 	ldw	r18,12(sp)
    23bc:	dc400217 	ldw	r17,8(sp)
    23c0:	dc000117 	ldw	r16,4(sp)
    23c4:	dec00504 	addi	sp,sp,20
    23c8:	f800283a 	ret

000023cc <___vfprintf_internal_r>:
    23cc:	deffe304 	addi	sp,sp,-116
    23d0:	df001b15 	stw	fp,108(sp)
    23d4:	ddc01a15 	stw	r23,104(sp)
    23d8:	dd001715 	stw	r20,92(sp)
    23dc:	dc801515 	stw	r18,84(sp)
    23e0:	dc001315 	stw	r16,76(sp)
    23e4:	dfc01c15 	stw	ra,112(sp)
    23e8:	dd801915 	stw	r22,100(sp)
    23ec:	dd401815 	stw	r21,96(sp)
    23f0:	dcc01615 	stw	r19,88(sp)
    23f4:	dc401415 	stw	r17,80(sp)
    23f8:	d9001015 	stw	r4,64(sp)
    23fc:	2829883a 	mov	r20,r5
    2400:	d9c01115 	stw	r7,68(sp)
    2404:	3025883a 	mov	r18,r6
    2408:	0021883a 	mov	r16,zero
    240c:	d8000f15 	stw	zero,60(sp)
    2410:	d8000e15 	stw	zero,56(sp)
    2414:	0039883a 	mov	fp,zero
    2418:	d8000915 	stw	zero,36(sp)
    241c:	d8000d15 	stw	zero,52(sp)
    2420:	d8000c15 	stw	zero,48(sp)
    2424:	d8000b15 	stw	zero,44(sp)
    2428:	002f883a 	mov	r23,zero
    242c:	91400003 	ldbu	r5,0(r18)
    2430:	01c00044 	movi	r7,1
    2434:	94800044 	addi	r18,r18,1
    2438:	29003fcc 	andi	r4,r5,255
    243c:	2100201c 	xori	r4,r4,128
    2440:	213fe004 	addi	r4,r4,-128
    2444:	20001526 	beq	r4,zero,249c <___vfprintf_internal_r+0xd0>
    2448:	81c03526 	beq	r16,r7,2520 <___vfprintf_internal_r+0x154>
    244c:	3c002016 	blt	r7,r16,24d0 <___vfprintf_internal_r+0x104>
    2450:	803ff61e 	bne	r16,zero,242c <___vfprintf_internal_r+0x60>
    2454:	00800944 	movi	r2,37
    2458:	2081501e 	bne	r4,r2,299c <___vfprintf_internal_r+0x5d0>
    245c:	073fffc4 	movi	fp,-1
    2460:	00800284 	movi	r2,10
    2464:	d9c00c15 	stw	r7,48(sp)
    2468:	d8000f15 	stw	zero,60(sp)
    246c:	d8000e15 	stw	zero,56(sp)
    2470:	df000915 	stw	fp,36(sp)
    2474:	d8800d15 	stw	r2,52(sp)
    2478:	d8000b15 	stw	zero,44(sp)
    247c:	91400003 	ldbu	r5,0(r18)
    2480:	3821883a 	mov	r16,r7
    2484:	94800044 	addi	r18,r18,1
    2488:	29003fcc 	andi	r4,r5,255
    248c:	2100201c 	xori	r4,r4,128
    2490:	213fe004 	addi	r4,r4,-128
    2494:	01c00044 	movi	r7,1
    2498:	203feb1e 	bne	r4,zero,2448 <___vfprintf_internal_r+0x7c>
    249c:	b805883a 	mov	r2,r23
    24a0:	dfc01c17 	ldw	ra,112(sp)
    24a4:	df001b17 	ldw	fp,108(sp)
    24a8:	ddc01a17 	ldw	r23,104(sp)
    24ac:	dd801917 	ldw	r22,100(sp)
    24b0:	dd401817 	ldw	r21,96(sp)
    24b4:	dd001717 	ldw	r20,92(sp)
    24b8:	dcc01617 	ldw	r19,88(sp)
    24bc:	dc801517 	ldw	r18,84(sp)
    24c0:	dc401417 	ldw	r17,80(sp)
    24c4:	dc001317 	ldw	r16,76(sp)
    24c8:	dec01d04 	addi	sp,sp,116
    24cc:	f800283a 	ret
    24d0:	00800084 	movi	r2,2
    24d4:	80801726 	beq	r16,r2,2534 <___vfprintf_internal_r+0x168>
    24d8:	008000c4 	movi	r2,3
    24dc:	80bfd31e 	bne	r16,r2,242c <___vfprintf_internal_r+0x60>
    24e0:	2c7ff404 	addi	r17,r5,-48
    24e4:	88c03fcc 	andi	r3,r17,255
    24e8:	00800244 	movi	r2,9
    24ec:	10c02136 	bltu	r2,r3,2574 <___vfprintf_internal_r+0x1a8>
    24f0:	d8c00917 	ldw	r3,36(sp)
    24f4:	18012716 	blt	r3,zero,2994 <___vfprintf_internal_r+0x5c8>
    24f8:	d9000917 	ldw	r4,36(sp)
    24fc:	01400284 	movi	r5,10
    2500:	00021b80 	call	21b8 <__mulsi3>
    2504:	1007883a 	mov	r3,r2
    2508:	88803fcc 	andi	r2,r17,255
    250c:	1080201c 	xori	r2,r2,128
    2510:	10bfe004 	addi	r2,r2,-128
    2514:	1887883a 	add	r3,r3,r2
    2518:	d8c00915 	stw	r3,36(sp)
    251c:	003fc306 	br	242c <___vfprintf_internal_r+0x60>
    2520:	00800c04 	movi	r2,48
    2524:	2080b326 	beq	r4,r2,27f4 <___vfprintf_internal_r+0x428>
    2528:	00800944 	movi	r2,37
    252c:	20812726 	beq	r4,r2,29cc <___vfprintf_internal_r+0x600>
    2530:	04000084 	movi	r16,2
    2534:	2c7ff404 	addi	r17,r5,-48
    2538:	88c03fcc 	andi	r3,r17,255
    253c:	00800244 	movi	r2,9
    2540:	10c00a36 	bltu	r2,r3,256c <___vfprintf_internal_r+0x1a0>
    2544:	e000b416 	blt	fp,zero,2818 <___vfprintf_internal_r+0x44c>
    2548:	e009883a 	mov	r4,fp
    254c:	01400284 	movi	r5,10
    2550:	00021b80 	call	21b8 <__mulsi3>
    2554:	1007883a 	mov	r3,r2
    2558:	88803fcc 	andi	r2,r17,255
    255c:	1080201c 	xori	r2,r2,128
    2560:	10bfe004 	addi	r2,r2,-128
    2564:	18b9883a 	add	fp,r3,r2
    2568:	003fb006 	br	242c <___vfprintf_internal_r+0x60>
    256c:	00800b84 	movi	r2,46
    2570:	2080a326 	beq	r4,r2,2800 <___vfprintf_internal_r+0x434>
    2574:	00801b04 	movi	r2,108
    2578:	2080a326 	beq	r4,r2,2808 <___vfprintf_internal_r+0x43c>
    257c:	d8c00917 	ldw	r3,36(sp)
    2580:	1800a716 	blt	r3,zero,2820 <___vfprintf_internal_r+0x454>
    2584:	d8000f15 	stw	zero,60(sp)
    2588:	28bfea04 	addi	r2,r5,-88
    258c:	10803fcc 	andi	r2,r2,255
    2590:	00c00804 	movi	r3,32
    2594:	18802836 	bltu	r3,r2,2638 <___vfprintf_internal_r+0x26c>
    2598:	1085883a 	add	r2,r2,r2
    259c:	1085883a 	add	r2,r2,r2
    25a0:	00c00034 	movhi	r3,0
    25a4:	18c96d04 	addi	r3,r3,9652
    25a8:	10c5883a 	add	r2,r2,r3
    25ac:	11000017 	ldw	r4,0(r2)
    25b0:	2000683a 	jmp	r4
    25b4:	00002640 	call	264 <main+0x70>
    25b8:	00002638 	rdprs	zero,zero,152
    25bc:	00002638 	rdprs	zero,zero,152
    25c0:	00002638 	rdprs	zero,zero,152
    25c4:	00002638 	rdprs	zero,zero,152
    25c8:	00002638 	rdprs	zero,zero,152
    25cc:	00002638 	rdprs	zero,zero,152
    25d0:	00002638 	rdprs	zero,zero,152
    25d4:	00002638 	rdprs	zero,zero,152
    25d8:	00002638 	rdprs	zero,zero,152
    25dc:	00002638 	rdprs	zero,zero,152
    25e0:	0000286c 	andhi	zero,zero,161
    25e4:	00002654 	movui	zero,153
    25e8:	00002638 	rdprs	zero,zero,152
    25ec:	00002638 	rdprs	zero,zero,152
    25f0:	00002638 	rdprs	zero,zero,152
    25f4:	00002638 	rdprs	zero,zero,152
    25f8:	00002654 	movui	zero,153
    25fc:	00002638 	rdprs	zero,zero,152
    2600:	00002638 	rdprs	zero,zero,152
    2604:	00002638 	rdprs	zero,zero,152
    2608:	00002638 	rdprs	zero,zero,152
    260c:	00002638 	rdprs	zero,zero,152
    2610:	000028d4 	movui	zero,163
    2614:	00002638 	rdprs	zero,zero,152
    2618:	00002638 	rdprs	zero,zero,152
    261c:	00002638 	rdprs	zero,zero,152
    2620:	000028e4 	muli	zero,zero,163
    2624:	00002638 	rdprs	zero,zero,152
    2628:	000027b8 	rdprs	zero,zero,158
    262c:	00002638 	rdprs	zero,zero,152
    2630:	00002638 	rdprs	zero,zero,152
    2634:	000027b0 	cmpltui	zero,zero,158
    2638:	0021883a 	mov	r16,zero
    263c:	003f7b06 	br	242c <___vfprintf_internal_r+0x60>
    2640:	00c00404 	movi	r3,16
    2644:	00800044 	movi	r2,1
    2648:	d8c00d15 	stw	r3,52(sp)
    264c:	d8000c15 	stw	zero,48(sp)
    2650:	d8800b15 	stw	r2,44(sp)
    2654:	d8c00e17 	ldw	r3,56(sp)
    2658:	1805003a 	cmpeq	r2,r3,zero
    265c:	10005a1e 	bne	r2,zero,27c8 <___vfprintf_internal_r+0x3fc>
    2660:	d8800c17 	ldw	r2,48(sp)
    2664:	1000781e 	bne	r2,zero,2848 <___vfprintf_internal_r+0x47c>
    2668:	d8801117 	ldw	r2,68(sp)
    266c:	d8000a15 	stw	zero,40(sp)
    2670:	14400017 	ldw	r17,0(r2)
    2674:	11c00104 	addi	r7,r2,4
    2678:	d9c01115 	stw	r7,68(sp)
    267c:	88005a26 	beq	r17,zero,27e8 <___vfprintf_internal_r+0x41c>
    2680:	d8c00b17 	ldw	r3,44(sp)
    2684:	dcc00044 	addi	r19,sp,1
    2688:	05800244 	movi	r22,9
    268c:	182b003a 	cmpeq	r21,r3,zero
    2690:	dcc01215 	stw	r19,72(sp)
    2694:	00000506 	br	26ac <___vfprintf_internal_r+0x2e0>
    2698:	21000c04 	addi	r4,r4,48
    269c:	99000005 	stb	r4,0(r19)
    26a0:	9cc00044 	addi	r19,r19,1
    26a4:	80000f26 	beq	r16,zero,26e4 <___vfprintf_internal_r+0x318>
    26a8:	8023883a 	mov	r17,r16
    26ac:	d9400d17 	ldw	r5,52(sp)
    26b0:	8809883a 	mov	r4,r17
    26b4:	00021a80 	call	21a8 <__udivsi3>
    26b8:	d9000d17 	ldw	r4,52(sp)
    26bc:	100b883a 	mov	r5,r2
    26c0:	1021883a 	mov	r16,r2
    26c4:	00021b80 	call	21b8 <__mulsi3>
    26c8:	8889c83a 	sub	r4,r17,r2
    26cc:	b13ff20e 	bge	r22,r4,2698 <___vfprintf_internal_r+0x2cc>
    26d0:	a8009f1e 	bne	r21,zero,2950 <___vfprintf_internal_r+0x584>
    26d4:	21000dc4 	addi	r4,r4,55
    26d8:	99000005 	stb	r4,0(r19)
    26dc:	9cc00044 	addi	r19,r19,1
    26e0:	803ff11e 	bne	r16,zero,26a8 <___vfprintf_internal_r+0x2dc>
    26e4:	d8801217 	ldw	r2,72(sp)
    26e8:	98a3c83a 	sub	r17,r19,r2
    26ec:	d8c00917 	ldw	r3,36(sp)
    26f0:	1c4bc83a 	sub	r5,r3,r17
    26f4:	0140130e 	bge	zero,r5,2744 <___vfprintf_internal_r+0x378>
    26f8:	d8c00044 	addi	r3,sp,1
    26fc:	18800804 	addi	r2,r3,32
    2700:	9880102e 	bgeu	r19,r2,2744 <___vfprintf_internal_r+0x378>
    2704:	00800c04 	movi	r2,48
    2708:	28ffffc4 	addi	r3,r5,-1
    270c:	98800005 	stb	r2,0(r19)
    2710:	99000044 	addi	r4,r19,1
    2714:	00c0080e 	bge	zero,r3,2738 <___vfprintf_internal_r+0x36c>
    2718:	d8c00044 	addi	r3,sp,1
    271c:	18800804 	addi	r2,r3,32
    2720:	2080052e 	bgeu	r4,r2,2738 <___vfprintf_internal_r+0x36c>
    2724:	00800c04 	movi	r2,48
    2728:	20800005 	stb	r2,0(r4)
    272c:	21000044 	addi	r4,r4,1
    2730:	9945883a 	add	r2,r19,r5
    2734:	20bff81e 	bne	r4,r2,2718 <___vfprintf_internal_r+0x34c>
    2738:	d8801217 	ldw	r2,72(sp)
    273c:	2027883a 	mov	r19,r4
    2740:	20a3c83a 	sub	r17,r4,r2
    2744:	d8c00a17 	ldw	r3,40(sp)
    2748:	1c45883a 	add	r2,r3,r17
    274c:	e0a1c83a 	sub	r16,fp,r2
    2750:	d8800f17 	ldw	r2,60(sp)
    2754:	10008026 	beq	r2,zero,2958 <___vfprintf_internal_r+0x58c>
    2758:	1805003a 	cmpeq	r2,r3,zero
    275c:	1000ae26 	beq	r2,zero,2a18 <___vfprintf_internal_r+0x64c>
    2760:	0400a516 	blt	zero,r16,29f8 <___vfprintf_internal_r+0x62c>
    2764:	b805883a 	mov	r2,r23
    2768:	0440950e 	bge	zero,r17,29c0 <___vfprintf_internal_r+0x5f4>
    276c:	102f883a 	mov	r23,r2
    2770:	1461883a 	add	r16,r2,r17
    2774:	00000206 	br	2780 <___vfprintf_internal_r+0x3b4>
    2778:	bdc00044 	addi	r23,r23,1
    277c:	85ffae26 	beq	r16,r23,2638 <___vfprintf_internal_r+0x26c>
    2780:	9cffffc4 	addi	r19,r19,-1
    2784:	98800003 	ldbu	r2,0(r19)
    2788:	a0c00117 	ldw	r3,4(r20)
    278c:	d9001017 	ldw	r4,64(sp)
    2790:	d8800005 	stb	r2,0(sp)
    2794:	a00b883a 	mov	r5,r20
    2798:	d80d883a 	mov	r6,sp
    279c:	01c00044 	movi	r7,1
    27a0:	183ee83a 	callr	r3
    27a4:	103ff426 	beq	r2,zero,2778 <___vfprintf_internal_r+0x3ac>
    27a8:	05ffffc4 	movi	r23,-1
    27ac:	003f3b06 	br	249c <___vfprintf_internal_r+0xd0>
    27b0:	00c00404 	movi	r3,16
    27b4:	d8c00d15 	stw	r3,52(sp)
    27b8:	d8000c15 	stw	zero,48(sp)
    27bc:	d8c00e17 	ldw	r3,56(sp)
    27c0:	1805003a 	cmpeq	r2,r3,zero
    27c4:	103fa626 	beq	r2,zero,2660 <___vfprintf_internal_r+0x294>
    27c8:	d8c00c17 	ldw	r3,48(sp)
    27cc:	1800171e 	bne	r3,zero,282c <___vfprintf_internal_r+0x460>
    27d0:	d8c01117 	ldw	r3,68(sp)
    27d4:	d8000a15 	stw	zero,40(sp)
    27d8:	1c400017 	ldw	r17,0(r3)
    27dc:	19c00104 	addi	r7,r3,4
    27e0:	d9c01115 	stw	r7,68(sp)
    27e4:	883fa61e 	bne	r17,zero,2680 <___vfprintf_internal_r+0x2b4>
    27e8:	dcc00044 	addi	r19,sp,1
    27ec:	dcc01215 	stw	r19,72(sp)
    27f0:	003fbe06 	br	26ec <___vfprintf_internal_r+0x320>
    27f4:	04000084 	movi	r16,2
    27f8:	d9c00f15 	stw	r7,60(sp)
    27fc:	003f0b06 	br	242c <___vfprintf_internal_r+0x60>
    2800:	040000c4 	movi	r16,3
    2804:	003f0906 	br	242c <___vfprintf_internal_r+0x60>
    2808:	00800044 	movi	r2,1
    280c:	040000c4 	movi	r16,3
    2810:	d8800e15 	stw	r2,56(sp)
    2814:	003f0506 	br	242c <___vfprintf_internal_r+0x60>
    2818:	0007883a 	mov	r3,zero
    281c:	003f4e06 	br	2558 <___vfprintf_internal_r+0x18c>
    2820:	00800044 	movi	r2,1
    2824:	d8800915 	stw	r2,36(sp)
    2828:	003f5706 	br	2588 <___vfprintf_internal_r+0x1bc>
    282c:	d8801117 	ldw	r2,68(sp)
    2830:	14400017 	ldw	r17,0(r2)
    2834:	10800104 	addi	r2,r2,4
    2838:	d8801115 	stw	r2,68(sp)
    283c:	88000716 	blt	r17,zero,285c <___vfprintf_internal_r+0x490>
    2840:	d8000a15 	stw	zero,40(sp)
    2844:	003f8d06 	br	267c <___vfprintf_internal_r+0x2b0>
    2848:	d8c01117 	ldw	r3,68(sp)
    284c:	1c400017 	ldw	r17,0(r3)
    2850:	18c00104 	addi	r3,r3,4
    2854:	d8c01115 	stw	r3,68(sp)
    2858:	883ff90e 	bge	r17,zero,2840 <___vfprintf_internal_r+0x474>
    285c:	00800044 	movi	r2,1
    2860:	0463c83a 	sub	r17,zero,r17
    2864:	d8800a15 	stw	r2,40(sp)
    2868:	003f8406 	br	267c <___vfprintf_internal_r+0x2b0>
    286c:	04000044 	movi	r16,1
    2870:	8700080e 	bge	r16,fp,2894 <___vfprintf_internal_r+0x4c8>
    2874:	d9001017 	ldw	r4,64(sp)
    2878:	a00b883a 	mov	r5,r20
    287c:	01800804 	movi	r6,32
    2880:	e1ffffc4 	addi	r7,fp,-1
    2884:	000234c0 	call	234c <print_repeat>
    2888:	103fc71e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    288c:	e5c5883a 	add	r2,fp,r23
    2890:	15ffffc4 	addi	r23,r2,-1
    2894:	d8c01117 	ldw	r3,68(sp)
    2898:	d9001017 	ldw	r4,64(sp)
    289c:	800f883a 	mov	r7,r16
    28a0:	18800017 	ldw	r2,0(r3)
    28a4:	a0c00117 	ldw	r3,4(r20)
    28a8:	a00b883a 	mov	r5,r20
    28ac:	d8800005 	stb	r2,0(sp)
    28b0:	d80d883a 	mov	r6,sp
    28b4:	183ee83a 	callr	r3
    28b8:	103fbb1e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    28bc:	d8801117 	ldw	r2,68(sp)
    28c0:	bdc00044 	addi	r23,r23,1
    28c4:	0021883a 	mov	r16,zero
    28c8:	10800104 	addi	r2,r2,4
    28cc:	d8801115 	stw	r2,68(sp)
    28d0:	003ed606 	br	242c <___vfprintf_internal_r+0x60>
    28d4:	00800204 	movi	r2,8
    28d8:	d8800d15 	stw	r2,52(sp)
    28dc:	d8000c15 	stw	zero,48(sp)
    28e0:	003fb606 	br	27bc <___vfprintf_internal_r+0x3f0>
    28e4:	d8c01117 	ldw	r3,68(sp)
    28e8:	1cc00017 	ldw	r19,0(r3)
    28ec:	9809883a 	mov	r4,r19
    28f0:	000232c0 	call	232c <strlen>
    28f4:	e0a1c83a 	sub	r16,fp,r2
    28f8:	1023883a 	mov	r17,r2
    28fc:	0400070e 	bge	zero,r16,291c <___vfprintf_internal_r+0x550>
    2900:	d9001017 	ldw	r4,64(sp)
    2904:	a00b883a 	mov	r5,r20
    2908:	01800804 	movi	r6,32
    290c:	800f883a 	mov	r7,r16
    2910:	000234c0 	call	234c <print_repeat>
    2914:	103fa41e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    2918:	bc2f883a 	add	r23,r23,r16
    291c:	a0c00117 	ldw	r3,4(r20)
    2920:	d9001017 	ldw	r4,64(sp)
    2924:	980d883a 	mov	r6,r19
    2928:	a00b883a 	mov	r5,r20
    292c:	880f883a 	mov	r7,r17
    2930:	183ee83a 	callr	r3
    2934:	103f9c1e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    2938:	d8801117 	ldw	r2,68(sp)
    293c:	bc6f883a 	add	r23,r23,r17
    2940:	0021883a 	mov	r16,zero
    2944:	10800104 	addi	r2,r2,4
    2948:	d8801115 	stw	r2,68(sp)
    294c:	003eb706 	br	242c <___vfprintf_internal_r+0x60>
    2950:	210015c4 	addi	r4,r4,87
    2954:	003f5106 	br	269c <___vfprintf_internal_r+0x2d0>
    2958:	04003b16 	blt	zero,r16,2a48 <___vfprintf_internal_r+0x67c>
    295c:	d8c00a17 	ldw	r3,40(sp)
    2960:	1805003a 	cmpeq	r2,r3,zero
    2964:	103f7f1e 	bne	r2,zero,2764 <___vfprintf_internal_r+0x398>
    2968:	a0c00117 	ldw	r3,4(r20)
    296c:	d9001017 	ldw	r4,64(sp)
    2970:	00800b44 	movi	r2,45
    2974:	d8800005 	stb	r2,0(sp)
    2978:	a00b883a 	mov	r5,r20
    297c:	d80d883a 	mov	r6,sp
    2980:	01c00044 	movi	r7,1
    2984:	183ee83a 	callr	r3
    2988:	103f871e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    298c:	b8800044 	addi	r2,r23,1
    2990:	003f7506 	br	2768 <___vfprintf_internal_r+0x39c>
    2994:	0007883a 	mov	r3,zero
    2998:	003edb06 	br	2508 <___vfprintf_internal_r+0x13c>
    299c:	a0c00117 	ldw	r3,4(r20)
    29a0:	d9001017 	ldw	r4,64(sp)
    29a4:	d9400005 	stb	r5,0(sp)
    29a8:	d80d883a 	mov	r6,sp
    29ac:	a00b883a 	mov	r5,r20
    29b0:	183ee83a 	callr	r3
    29b4:	103f7c1e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    29b8:	bdc00044 	addi	r23,r23,1
    29bc:	003e9b06 	br	242c <___vfprintf_internal_r+0x60>
    29c0:	102f883a 	mov	r23,r2
    29c4:	0021883a 	mov	r16,zero
    29c8:	003e9806 	br	242c <___vfprintf_internal_r+0x60>
    29cc:	a0c00117 	ldw	r3,4(r20)
    29d0:	d9000005 	stb	r4,0(sp)
    29d4:	d9001017 	ldw	r4,64(sp)
    29d8:	a00b883a 	mov	r5,r20
    29dc:	d80d883a 	mov	r6,sp
    29e0:	800f883a 	mov	r7,r16
    29e4:	183ee83a 	callr	r3
    29e8:	103f6f1e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    29ec:	bc2f883a 	add	r23,r23,r16
    29f0:	0021883a 	mov	r16,zero
    29f4:	003e8d06 	br	242c <___vfprintf_internal_r+0x60>
    29f8:	d9001017 	ldw	r4,64(sp)
    29fc:	a00b883a 	mov	r5,r20
    2a00:	01800c04 	movi	r6,48
    2a04:	800f883a 	mov	r7,r16
    2a08:	000234c0 	call	234c <print_repeat>
    2a0c:	103f661e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    2a10:	bc05883a 	add	r2,r23,r16
    2a14:	003f5406 	br	2768 <___vfprintf_internal_r+0x39c>
    2a18:	a0c00117 	ldw	r3,4(r20)
    2a1c:	d9001017 	ldw	r4,64(sp)
    2a20:	00800b44 	movi	r2,45
    2a24:	d8800005 	stb	r2,0(sp)
    2a28:	a00b883a 	mov	r5,r20
    2a2c:	d80d883a 	mov	r6,sp
    2a30:	01c00044 	movi	r7,1
    2a34:	183ee83a 	callr	r3
    2a38:	103f5b1e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    2a3c:	bdc00044 	addi	r23,r23,1
    2a40:	043f480e 	bge	zero,r16,2764 <___vfprintf_internal_r+0x398>
    2a44:	003fec06 	br	29f8 <___vfprintf_internal_r+0x62c>
    2a48:	d9001017 	ldw	r4,64(sp)
    2a4c:	a00b883a 	mov	r5,r20
    2a50:	01800804 	movi	r6,32
    2a54:	800f883a 	mov	r7,r16
    2a58:	000234c0 	call	234c <print_repeat>
    2a5c:	103f521e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0x3dc>
    2a60:	bc2f883a 	add	r23,r23,r16
    2a64:	003fbd06 	br	295c <___vfprintf_internal_r+0x590>

00002a68 <__vfprintf_internal>:
    2a68:	00800034 	movhi	r2,0
    2a6c:	108d5404 	addi	r2,r2,13648
    2a70:	2013883a 	mov	r9,r4
    2a74:	11000017 	ldw	r4,0(r2)
    2a78:	2805883a 	mov	r2,r5
    2a7c:	300f883a 	mov	r7,r6
    2a80:	480b883a 	mov	r5,r9
    2a84:	100d883a 	mov	r6,r2
    2a88:	00023cc1 	jmpi	23cc <___vfprintf_internal_r>

00002a8c <__sfvwrite_small_dev>:
    2a8c:	2880000b 	ldhu	r2,0(r5)
    2a90:	defffa04 	addi	sp,sp,-24
    2a94:	dcc00315 	stw	r19,12(sp)
    2a98:	1080020c 	andi	r2,r2,8
    2a9c:	dc800215 	stw	r18,8(sp)
    2aa0:	dc400115 	stw	r17,4(sp)
    2aa4:	dfc00515 	stw	ra,20(sp)
    2aa8:	dd000415 	stw	r20,16(sp)
    2aac:	dc000015 	stw	r16,0(sp)
    2ab0:	2825883a 	mov	r18,r5
    2ab4:	2027883a 	mov	r19,r4
    2ab8:	3023883a 	mov	r17,r6
    2abc:	10002026 	beq	r2,zero,2b40 <__sfvwrite_small_dev+0xb4>
    2ac0:	2940008f 	ldh	r5,2(r5)
    2ac4:	28000f16 	blt	r5,zero,2b04 <__sfvwrite_small_dev+0x78>
    2ac8:	01c01b0e 	bge	zero,r7,2b38 <__sfvwrite_small_dev+0xac>
    2acc:	3821883a 	mov	r16,r7
    2ad0:	05010004 	movi	r20,1024
    2ad4:	00000206 	br	2ae0 <__sfvwrite_small_dev+0x54>
    2ad8:	0400170e 	bge	zero,r16,2b38 <__sfvwrite_small_dev+0xac>
    2adc:	9140008f 	ldh	r5,2(r18)
    2ae0:	880d883a 	mov	r6,r17
    2ae4:	9809883a 	mov	r4,r19
    2ae8:	800f883a 	mov	r7,r16
    2aec:	a400010e 	bge	r20,r16,2af4 <__sfvwrite_small_dev+0x68>
    2af0:	01c10004 	movi	r7,1024
    2af4:	0002b480 	call	2b48 <_write_r>
    2af8:	88a3883a 	add	r17,r17,r2
    2afc:	80a1c83a 	sub	r16,r16,r2
    2b00:	00bff516 	blt	zero,r2,2ad8 <__sfvwrite_small_dev+0x4c>
    2b04:	9080000b 	ldhu	r2,0(r18)
    2b08:	00ffffc4 	movi	r3,-1
    2b0c:	10801014 	ori	r2,r2,64
    2b10:	9080000d 	sth	r2,0(r18)
    2b14:	1805883a 	mov	r2,r3
    2b18:	dfc00517 	ldw	ra,20(sp)
    2b1c:	dd000417 	ldw	r20,16(sp)
    2b20:	dcc00317 	ldw	r19,12(sp)
    2b24:	dc800217 	ldw	r18,8(sp)
    2b28:	dc400117 	ldw	r17,4(sp)
    2b2c:	dc000017 	ldw	r16,0(sp)
    2b30:	dec00604 	addi	sp,sp,24
    2b34:	f800283a 	ret
    2b38:	0007883a 	mov	r3,zero
    2b3c:	003ff506 	br	2b14 <__sfvwrite_small_dev+0x88>
    2b40:	00ffffc4 	movi	r3,-1
    2b44:	003ff306 	br	2b14 <__sfvwrite_small_dev+0x88>

00002b48 <_write_r>:
    2b48:	defffd04 	addi	sp,sp,-12
    2b4c:	dc000015 	stw	r16,0(sp)
    2b50:	04000034 	movhi	r16,0
    2b54:	840d9604 	addi	r16,r16,13912
    2b58:	dc400115 	stw	r17,4(sp)
    2b5c:	80000015 	stw	zero,0(r16)
    2b60:	2023883a 	mov	r17,r4
    2b64:	2809883a 	mov	r4,r5
    2b68:	300b883a 	mov	r5,r6
    2b6c:	380d883a 	mov	r6,r7
    2b70:	dfc00215 	stw	ra,8(sp)
    2b74:	0002e440 	call	2e44 <write>
    2b78:	1007883a 	mov	r3,r2
    2b7c:	00bfffc4 	movi	r2,-1
    2b80:	18800626 	beq	r3,r2,2b9c <_write_r+0x54>
    2b84:	1805883a 	mov	r2,r3
    2b88:	dfc00217 	ldw	ra,8(sp)
    2b8c:	dc400117 	ldw	r17,4(sp)
    2b90:	dc000017 	ldw	r16,0(sp)
    2b94:	dec00304 	addi	sp,sp,12
    2b98:	f800283a 	ret
    2b9c:	80800017 	ldw	r2,0(r16)
    2ba0:	103ff826 	beq	r2,zero,2b84 <_write_r+0x3c>
    2ba4:	88800015 	stw	r2,0(r17)
    2ba8:	1805883a 	mov	r2,r3
    2bac:	dfc00217 	ldw	ra,8(sp)
    2bb0:	dc400117 	ldw	r17,4(sp)
    2bb4:	dc000017 	ldw	r16,0(sp)
    2bb8:	dec00304 	addi	sp,sp,12
    2bbc:	f800283a 	ret

00002bc0 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2bc0:	2900051e 	bne	r5,r4,2bd8 <alt_load_section+0x18>
    2bc4:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    2bc8:	20800017 	ldw	r2,0(r4)
    2bcc:	21000104 	addi	r4,r4,4
    2bd0:	28800015 	stw	r2,0(r5)
    2bd4:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2bd8:	29bffb1e 	bne	r5,r6,2bc8 <alt_load_section+0x8>
    2bdc:	f800283a 	ret

00002be0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2be0:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2be4:	01000034 	movhi	r4,0
    2be8:	210d5904 	addi	r4,r4,13668
    2bec:	01400034 	movhi	r5,0
    2bf0:	294d1c04 	addi	r5,r5,13424
    2bf4:	01800034 	movhi	r6,0
    2bf8:	318d5904 	addi	r6,r6,13668
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2bfc:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2c00:	0002bc00 	call	2bc0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2c04:	01000034 	movhi	r4,0
    2c08:	21000804 	addi	r4,r4,32
    2c0c:	01400034 	movhi	r5,0
    2c10:	29400804 	addi	r5,r5,32
    2c14:	01800034 	movhi	r6,0
    2c18:	31800804 	addi	r6,r6,32
    2c1c:	0002bc00 	call	2bc0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    2c20:	01000034 	movhi	r4,0
    2c24:	210c0204 	addi	r4,r4,12296
    2c28:	01400034 	movhi	r5,0
    2c2c:	294c0204 	addi	r5,r5,12296
    2c30:	01800034 	movhi	r6,0
    2c34:	318d1c04 	addi	r6,r6,13424
    2c38:	0002bc00 	call	2bc0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2c3c:	0002ff80 	call	2ff8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2c40:	dfc00017 	ldw	ra,0(sp)
    2c44:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2c48:	0002ffc1 	jmpi	2ffc <alt_icache_flush_all>

00002c4c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2c4c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2c50:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2c54:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2c58:	0002ec00 	call	2ec0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2c5c:	0002ebc0 	call	2ebc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2c60:	d1204317 	ldw	r4,-32500(gp)
    2c64:	d1604417 	ldw	r5,-32496(gp)
    2c68:	d1a04517 	ldw	r6,-32492(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2c6c:	dfc00017 	ldw	ra,0(sp)
    2c70:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2c74:	00001f41 	jmpi	1f4 <main>

00002c78 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2c78:	defff804 	addi	sp,sp,-32
    2c7c:	dfc00415 	stw	ra,16(sp)
    2c80:	dc800315 	stw	r18,12(sp)
    2c84:	dc400215 	stw	r17,8(sp)
    2c88:	dc000115 	stw	r16,4(sp)
    2c8c:	d9400515 	stw	r5,20(sp)
    2c90:	d9800615 	stw	r6,24(sp)
    2c94:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    2c98:	d8800504 	addi	r2,sp,20
    2c9c:	2025883a 	mov	r18,r4
    2ca0:	d8800015 	stw	r2,0(sp)
    2ca4:	00003d06 	br	2d9c <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2ca8:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2cac:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2cb0:	18800226 	beq	r3,r2,2cbc <alt_printf+0x44>
        {
            alt_putchar(c);
    2cb4:	1809883a 	mov	r4,r3
    2cb8:	00000a06 	br	2ce4 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2cbc:	91000007 	ldb	r4,0(r18)
    2cc0:	94800044 	addi	r18,r18,1
    2cc4:	20003726 	beq	r4,zero,2da4 <alt_printf+0x12c>
            {
                if (c == '%')
    2cc8:	20c00626 	beq	r4,r3,2ce4 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2ccc:	008018c4 	movi	r2,99
    2cd0:	2080061e 	bne	r4,r2,2cec <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    2cd4:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    2cd8:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2cdc:	10800104 	addi	r2,r2,4
    2ce0:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    2ce4:	0002dbc0 	call	2dbc <alt_putchar>
    2ce8:	00002c06 	br	2d9c <alt_printf+0x124>
                }
                else if (c == 'x')
    2cec:	00801e04 	movi	r2,120
    2cf0:	20801e1e 	bne	r4,r2,2d6c <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    2cf4:	d8800017 	ldw	r2,0(sp)
    2cf8:	14400017 	ldw	r17,0(r2)
    2cfc:	10800104 	addi	r2,r2,4
    2d00:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    2d04:	88000226 	beq	r17,zero,2d10 <alt_printf+0x98>
    2d08:	04000704 	movi	r16,28
    2d0c:	00000306 	br	2d1c <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    2d10:	01000c04 	movi	r4,48
    2d14:	003ff306 	br	2ce4 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    2d18:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2d1c:	008003c4 	movi	r2,15
    2d20:	1404983a 	sll	r2,r2,r16
    2d24:	8884703a 	and	r2,r17,r2
    2d28:	103ffb26 	beq	r2,zero,2d18 <alt_printf+0xa0>
    2d2c:	00000b06 	br	2d5c <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2d30:	8884703a 	and	r2,r17,r2
    2d34:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    2d38:	00800244 	movi	r2,9
                            c = '0' + digit;
    2d3c:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    2d40:	10c0012e 	bgeu	r2,r3,2d48 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    2d44:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    2d48:	21003fcc 	andi	r4,r4,255
    2d4c:	2100201c 	xori	r4,r4,128
    2d50:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2d54:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    2d58:	0002dbc0 	call	2dbc <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2d5c:	008003c4 	movi	r2,15
    2d60:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2d64:	803ff20e 	bge	r16,zero,2d30 <alt_printf+0xb8>
    2d68:	00000c06 	br	2d9c <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2d6c:	00801cc4 	movi	r2,115
    2d70:	20800a1e 	bne	r4,r2,2d9c <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    2d74:	d8800017 	ldw	r2,0(sp)
    2d78:	14000017 	ldw	r16,0(r2)
    2d7c:	10800104 	addi	r2,r2,4
    2d80:	d8800015 	stw	r2,0(sp)
    2d84:	00000106 	br	2d8c <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    2d88:	0002dbc0 	call	2dbc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2d8c:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    2d90:	84000044 	addi	r16,r16,1
    2d94:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2d98:	103ffb1e 	bne	r2,zero,2d88 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2d9c:	90c00007 	ldb	r3,0(r18)
    2da0:	183fc11e 	bne	r3,zero,2ca8 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    2da4:	dfc00417 	ldw	ra,16(sp)
    2da8:	dc800317 	ldw	r18,12(sp)
    2dac:	dc400217 	ldw	r17,8(sp)
    2db0:	dc000117 	ldw	r16,4(sp)
    2db4:	dec00804 	addi	sp,sp,32
    2db8:	f800283a 	ret

00002dbc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2dbc:	defffd04 	addi	sp,sp,-12
    2dc0:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2dc4:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2dc8:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2dcc:	01800044 	movi	r6,1
    2dd0:	01000034 	movhi	r4,0
    2dd4:	210d5604 	addi	r4,r4,13656
    2dd8:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2ddc:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2de0:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2de4:	0002ee00 	call	2ee0 <altera_avalon_jtag_uart_write>
    2de8:	1009883a 	mov	r4,r2
    2dec:	00bfffc4 	movi	r2,-1
    2df0:	2080011e 	bne	r4,r2,2df8 <alt_putchar+0x3c>
    2df4:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    2df8:	8005883a 	mov	r2,r16
    2dfc:	dfc00217 	ldw	ra,8(sp)
    2e00:	dc000117 	ldw	r16,4(sp)
    2e04:	dec00304 	addi	sp,sp,12
    2e08:	f800283a 	ret

00002e0c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2e0c:	defffe04 	addi	sp,sp,-8
    2e10:	dc000015 	stw	r16,0(sp)
    2e14:	dfc00115 	stw	ra,4(sp)
    2e18:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2e1c:	000232c0 	call	232c <strlen>
    2e20:	800b883a 	mov	r5,r16
    2e24:	100d883a 	mov	r6,r2
    2e28:	01000034 	movhi	r4,0
    2e2c:	210d5604 	addi	r4,r4,13656
    2e30:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    2e34:	dfc00117 	ldw	ra,4(sp)
    2e38:	dc000017 	ldw	r16,0(sp)
    2e3c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2e40:	0002ee01 	jmpi	2ee0 <altera_avalon_jtag_uart_write>

00002e44 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2e44:	deffff04 	addi	sp,sp,-4
    2e48:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2e4c:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2e50:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    2e54:	000f883a 	mov	r7,zero
    2e58:	01000034 	movhi	r4,0
    2e5c:	210d5604 	addi	r4,r4,13656
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2e60:	18800526 	beq	r3,r2,2e78 <write+0x34>
    2e64:	00800084 	movi	r2,2
    2e68:	1880061e 	bne	r3,r2,2e84 <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2e6c:	01000034 	movhi	r4,0
    2e70:	210d5604 	addi	r4,r4,13656
    2e74:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    2e78:	dfc00017 	ldw	ra,0(sp)
    2e7c:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2e80:	0002ee01 	jmpi	2ee0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2e84:	00800034 	movhi	r2,0
    2e88:	108d5804 	addi	r2,r2,13664
    2e8c:	10800017 	ldw	r2,0(r2)
    2e90:	00c00034 	movhi	r3,0
    2e94:	18cd9604 	addi	r3,r3,13912
    2e98:	10000226 	beq	r2,zero,2ea4 <write+0x60>
    2e9c:	103ee83a 	callr	r2
    2ea0:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2ea4:	00801444 	movi	r2,81
    2ea8:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
    2eac:	00bfffc4 	movi	r2,-1
    2eb0:	dfc00017 	ldw	ra,0(sp)
    2eb4:	dec00104 	addi	sp,sp,4
    2eb8:	f800283a 	ret

00002ebc <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
    2ebc:	f800283a 	ret

00002ec0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2ec0:	deffff04 	addi	sp,sp,-4
    2ec4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    2ec8:	00030000 	call	3000 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2ecc:	00800044 	movi	r2,1
    2ed0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2ed4:	dfc00017 	ldw	ra,0(sp)
    2ed8:	dec00104 	addi	sp,sp,4
    2edc:	f800283a 	ret

00002ee0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2ee0:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    2ee4:	298f883a 	add	r7,r5,r6
    2ee8:	20c00104 	addi	r3,r4,4
    2eec:	00000606 	br	2f08 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2ef0:	18800037 	ldwio	r2,0(r3)
    2ef4:	10bfffec 	andhi	r2,r2,65535
    2ef8:	10000326 	beq	r2,zero,2f08 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2efc:	28800007 	ldb	r2,0(r5)
    2f00:	29400044 	addi	r5,r5,1
    2f04:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2f08:	29fff936 	bltu	r5,r7,2ef0 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    2f0c:	3005883a 	mov	r2,r6
    2f10:	f800283a 	ret

00002f14 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    2f14:	db000017 	ldw	r12,0(sp)
    2f18:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    2f1c:	00c00044 	movi	r3,1
    2f20:	194a983a 	sll	r5,r3,r5

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    2f24:	dbc00217 	ldw	r15,8(sp)
  const alt_u8 * write_end = write_data + write_length;
    2f28:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
    2f2c:	431b883a 	add	r13,r8,r12
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    2f30:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    2f34:	7880008c 	andi	r2,r15,2
    2f38:	1000021e 	bne	r2,zero,2f44 <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    2f3c:	00810004 	movi	r2,1024
    2f40:	20800335 	stwio	r2,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    2f44:	20800037 	ldwio	r2,0(r4)
    2f48:	180b883a 	mov	r5,r3
    2f4c:	6013883a 	mov	r9,r12
    2f50:	22c00204 	addi	r11,r4,8
    2f54:	00000106 	br	2f5c <alt_avalon_spi_command+0x48>
    2f58:	000d883a 	mov	r6,zero
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    2f5c:	5a800037 	ldwio	r10,0(r11)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    2f60:	5080100c 	andi	r2,r10,64
    2f64:	1007003a 	cmpeq	r3,r2,zero
    2f68:	1800011e 	bne	r3,zero,2f70 <alt_avalon_spi_command+0x5c>
    2f6c:	2800031e 	bne	r5,zero,2f7c <alt_avalon_spi_command+0x68>
    2f70:	5080200c 	andi	r2,r10,128
    2f74:	103ff926 	beq	r2,zero,2f5c <alt_avalon_spi_command+0x48>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    2f78:	18000e1e 	bne	r3,zero,2fb4 <alt_avalon_spi_command+0xa0>
    2f7c:	01400b0e 	bge	zero,r5,2fac <alt_avalon_spi_command+0x98>
    {
      credits--;
    2f80:	297fffc4 	addi	r5,r5,-1

      if (write_data < write_end)
    2f84:	3b80042e 	bgeu	r7,r14,2f98 <alt_avalon_spi_command+0x84>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    2f88:	38800003 	ldbu	r2,0(r7)
    2f8c:	39c00044 	addi	r7,r7,1
    2f90:	20800135 	stwio	r2,4(r4)
    2f94:	00000506 	br	2fac <alt_avalon_spi_command+0x98>
      else if (write_zeros > 0)
    2f98:	4800021e 	bne	r9,zero,2fa4 <alt_avalon_spi_command+0x90>
    2f9c:	017f0004 	movi	r5,-1024
    2fa0:	00000206 	br	2fac <alt_avalon_spi_command+0x98>
      {
        write_zeros--;
    2fa4:	4a7fffc4 	addi	r9,r9,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    2fa8:	20000135 	stwio	zero,4(r4)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    2fac:	5080200c 	andi	r2,r10,128
    2fb0:	103fea26 	beq	r2,zero,2f5c <alt_avalon_spi_command+0x48>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    2fb4:	20800037 	ldwio	r2,0(r4)
    2fb8:	29400044 	addi	r5,r5,1

      if (read_ignore > 0)
    2fbc:	30000326 	beq	r6,zero,2fcc <alt_avalon_spi_command+0xb8>
        read_ignore--;
    2fc0:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;

      if (read_ignore == 0 && read_data == read_end)
    2fc4:	30000326 	beq	r6,zero,2fd4 <alt_avalon_spi_command+0xc0>
    2fc8:	003fe406 	br	2f5c <alt_avalon_spi_command+0x48>
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
    2fcc:	40800005 	stb	r2,0(r8)
    2fd0:	42000044 	addi	r8,r8,1
      credits++;

      if (read_ignore == 0 && read_data == read_end)
    2fd4:	437fe01e 	bne	r8,r13,2f58 <alt_avalon_spi_command+0x44>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    2fd8:	58800037 	ldwio	r2,0(r11)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    2fdc:	1080080c 	andi	r2,r2,32
    2fe0:	103ffd26 	beq	r2,zero,2fd8 <alt_avalon_spi_command+0xc4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    2fe4:	7880004c 	andi	r2,r15,1
    2fe8:	1000011e 	bne	r2,zero,2ff0 <alt_avalon_spi_command+0xdc>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    2fec:	20000335 	stwio	zero,12(r4)

  return read_length;
}
    2ff0:	6005883a 	mov	r2,r12
    2ff4:	f800283a 	ret

00002ff8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2ff8:	f800283a 	ret

00002ffc <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2ffc:	f800283a 	ret

00003000 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    3000:	000170fa 	wrctl	ienable,zero
}
    3004:	f800283a 	ret
