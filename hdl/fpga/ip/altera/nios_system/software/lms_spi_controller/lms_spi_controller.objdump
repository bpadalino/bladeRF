
lms_spi_controller.elf:     file format elf32-littlenios2
lms_spi_controller.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002ac0 memsz 0x00002ac0 flags r-x
    LOAD off    0x00003ae0 vaddr 0x00002ae0 paddr 0x00002be4 align 2**12
         filesz 0x00000104 memsz 0x00000104 flags rw-
    LOAD off    0x00003ce8 vaddr 0x00002ce8 paddr 0x00002ce8 align 2**12
         filesz 0x00000000 memsz 0x00000024 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002650  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  00002670  00002670  00003670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000104  00002ae0  00002be4  00003ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000024  00002ce8  00002ce8  00003ce8  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000049  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c8  00000000  00000000  00003c30  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000007bc  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004455  00000000  00000000  000046b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001486  00000000  00000000  00008b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004da0  00000000  00000000  00009f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000007d0  00000000  00000000  0000ed30  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000013eb  00000000  00000000  0000f500  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000020b7  00000000  00000000  000108eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000129a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f8  00000000  00000000  000129b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000142da  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  000142dd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000142e9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000142ea  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  000142eb  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  000142f6  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00014301  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  0001430c  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000004a  00000000  00000000  00014317  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0003fac4  00000000  00000000  00014361  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
00002670 l    d  .rodata	00000000 .rodata
00002ae0 l    d  .rwdata	00000000 .rwdata
00002ce8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lms_spi_config.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001eac l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002ae0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00002228 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
000022b4 g     F .text	0000002c alt_main
00002030 g     F .text	00000090 _puts_r
00002be4 g       *ABS*	00000000 __flash_rwdata_start
00002bc4 g     O .rwdata	00000004 OC_I2C_DATA
00002bcc g     O .rwdata	00000004 OC_I2C_CMD_STATUS
00000620 g     F .text	00000018 lms_lpf_disable
00000250 g     F .text	00000074 lms_spi_write
00002474 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
000005e0 g     F .text	0000000c lms_rxvga1_disable
00000338 g     F .text	00000260 lms_calibrate_dc
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002ce8 g     O .bss	00000004 errno
00002cf0 g     O .bss	00000004 alt_argv
0000abc0 g       *ABS*	00000000 _gp
00000c80 g     F .text	00000044 lms_tx_enable
00000598 g     F .text	0000003c lms_rxvga2_set_gain
00000204 g     F .text	0000004c lms_print_frequency
000020c0 g     F .text	00000014 puts
00000d50 g     F .text	00000054 lms_pll_disable
0000286c g     O .rodata	000000c0 bands
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001fe8 g     F .text	00000008 __udivsi3
000005d4 g     F .text	0000000c lms_rxvga1_enable
00001190 g     F .text	00000058 lms_rxvga2_enable
00002bd4 g     O .rwdata	00000004 _global_impure_ptr
00002d0c g       *ABS*	00000000 __bss_end
00001840 g     F .text	0000066c __udivdi3
00000700 g     F .text	00000050 lms_dump_registers
00002660 g     F .text	00000004 alt_dcache_flush_all
00000b50 g     F .text	000000e8 lms_get_frequency
000005ec g     F .text	00000034 lms_soft_reset
00002be4 g       *ABS*	00000000 __ram_rwdata_end
000024ac g     F .text	00000078 write
00002ae0 g       *ABS*	00000000 __ram_rodata_end
00002bd8 g     O .rwdata	00000004 jtag_uart_0
00000cc4 g     F .text	00000048 lms_rx_disable
00001ff0 g     F .text	00000008 __umodsi3
00002d0c g       *ABS*	00000000 end
00014000 g       *ABS*	00000000 __alt_stack_pointer
00000ecc g     F .text	00000044 lms_peakdetect_disable
00002548 g     F .text	00000034 altera_avalon_jtag_uart_write
00002bc8 g     O .rwdata	00000004 OC_I2C_CTRL
000022e0 g     F .text	00000144 alt_printf
00000020 g     F .text	0000003c _start
00002cf8 g     O .bss	00000014 xcvr_config
0000257c g     F .text	000000e4 alt_avalon_spi_command
00001060 g     F .text	00000080 lms_pa_enable
00002524 g     F .text	00000004 alt_sys_init
00001230 g     F .text	00000060 lms_lna_select
00000e3c g     F .text	00000090 lms_get_loopback_mode
00001ff8 g     F .text	00000038 __mulsi3
00002ae0 g       *ABS*	00000000 __ram_rwdata_start
00002670 g       *ABS*	00000000 __ram_rodata_start
00002bc0 g     O .rwdata	00000004 OC_I2C_PRESCALER
00000f58 g     F .text	0000007c lms_pa_disable
00002d0c g       *ABS*	00000000 __alt_stack_base
000010e0 g     F .text	000000b0 lms_tx_loopback_enable
00000638 g     F .text	000000c8 lms_spi_read
00000fd4 g     F .text	0000008c lms_tx_loopback_disable
000020f4 g     F .text	000000bc __sfvwrite_small_dev
00002ce8 g       *ABS*	00000000 __bss_start
0000005c g     F .text	000001a8 main
00002cf4 g     O .bss	00000004 alt_envp
00002bdc g     O .rwdata	00000004 uart_0
000015b8 g     F .text	000000b8 lms_lpf_enable
00000df4 g     F .text	00000048 lms_power_down
00002be0 g     O .rwdata	00000004 alt_errno
00001530 g     F .text	00000038 lms_get_bandwidth
00001568 g     F .text	00000050 lms_lpf_bypass
00001410 g     F .text	0000005c lms_lna_set_gain
00001f28 g     F .text	00000060 __divsi3
00000750 g     F .text	00000400 lms_set_frequency
00002670 g       *ABS*	00000000 __flash_rodata_start
00001390 g     F .text	00000080 lms_config_init
00002528 g     F .text	00000020 alt_irq_init
000029e0 g     O .rodata	00000100 __clz_tab
000021b0 g     F .text	00000078 _write_r
00002bd0 g     O .rwdata	00000004 _impure_ptr
0000292c g     O .rodata	000000b2 lms_reg_dumpset
00002cec g     O .bss	00000004 alt_argc
000014bc g     F .text	00000074 lms_dither_enable
00000d0c g     F .text	00000044 lms_rx_enable
000002c4 g     F .text	00000074 lms_lpf_init
00000c38 g     F .text	00000048 lms_tx_disable
00000da4 g     F .text	00000050 lms_pll_enable
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001784 g     F .text	000000bc dac_write
00002be4 g       *ABS*	00000000 _edata
00002d0c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001670 g     F .text	00000114 lms_loopback_disable
000011e8 g     F .text	00000048 lms_rxvga2_disable
00002668 g     F .text	00000008 altera_nios2_qsys_irq_init
0000000c g       .entry	00000000 exit
00001f88 g     F .text	00000060 __modsi3
00014000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000020d4 g     F .text	00000020 strlen
00002424 g     F .text	00000050 alt_putchar
00002664 g     F .text	00000004 alt_icache_flush_all
00001290 g     F .text	00000100 lms_loopback_enable
0000146c g     F .text	00000050 lms_dither_disable
00002248 g     F .text	0000006c alt_load
00000f10 g     F .text	00000048 lms_peakdetect_enable



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6aaf014 	ori	gp,gp,43968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	108b3a14 	ori	r2,r2,11496

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18cb4314 	ori	r3,r3,11532

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	00022480 	call	2248 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00022b40 	call	22b4 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
#define OC_I2C_RXACK (1<<7)
#define OC_I2C_NACK (1<<3)

// Entry point
int main()
{
      5c:	defffc04 	addi	sp,sp,-16
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
      60:	01000034 	movhi	r4,0
      64:	21099c04 	addi	r4,r4,9840
#define OC_I2C_RXACK (1<<7)
#define OC_I2C_NACK (1<<3)

// Entry point
int main()
{
      68:	dfc00315 	stw	ra,12(sp)
      6c:	dc800215 	stw	r18,8(sp)
      70:	dc400115 	stw	r17,4(sp)
      74:	dc000015 	stw	r16,0(sp)
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
      78:	00024740 	call	2474 <alt_putstr>
  alt_putstr("---------------------------------------\n");
      7c:	01000034 	movhi	r4,0
      80:	2109a704 	addi	r4,r4,9884
      84:	00024740 	call	2474 <alt_putstr>

  xcvr_config.tx_freq_hz = 500000000;
      88:	00c00034 	movhi	r3,0
      8c:	18cb3e04 	addi	r3,r3,11512
  xcvr_config.rx_freq_hz = 500000000;

  xcvr_config.loopback_mode = LB_RF_LNA_START;
      90:	008000c4 	movi	r2,3
      94:	18800215 	stw	r2,8(r3)
  xcvr_config.lna = LNA_1;
      98:	00800044 	movi	r2,1
{
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
  alt_putstr("---------------------------------------\n");

  xcvr_config.tx_freq_hz = 500000000;
      9c:	01477374 	movhi	r5,7629
      a0:	29594004 	addi	r5,r5,25856
  xcvr_config.rx_freq_hz = 500000000;

  xcvr_config.loopback_mode = LB_RF_LNA_START;
  xcvr_config.lna = LNA_1;
      a4:	18800315 	stw	r2,12(r3)
  xcvr_config.pa = PA_2;
      a8:	00800084 	movi	r2,2

  lms_config_init(&xcvr_config);
      ac:	1809883a 	mov	r4,r3
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
  alt_putstr("---------------------------------------\n");

  xcvr_config.tx_freq_hz = 500000000;
  xcvr_config.rx_freq_hz = 500000000;
      b0:	19400115 	stw	r5,4(r3)
{
  uint8_t data ;
  alt_putstr("bladeRF LMS6002D SPI Register Readback!\n");
  alt_putstr("---------------------------------------\n");

  xcvr_config.tx_freq_hz = 500000000;
      b4:	19400015 	stw	r5,0(r3)
  xcvr_config.rx_freq_hz = 500000000;

  xcvr_config.loopback_mode = LB_RF_LNA_START;
  xcvr_config.lna = LNA_1;
  xcvr_config.pa = PA_2;
      b8:	18800415 	stw	r2,16(r3)

  lms_config_init(&xcvr_config);
      bc:	00013900 	call	1390 <lms_config_init>

  // Set the prescaler for 384kHz with a 38.4MHz clock
  *OC_I2C_PRESCALER = 0x20 ;
  *OC_I2C_CTRL |= OC_I2C_ENABLE ;
      c0:	01c000b4 	movhi	r7,2
      c4:	39d80084 	addi	r7,r7,24578
      c8:	39400003 	ldbu	r5,0(r7)

  // Set the address to the Si5338 + register offset
  *OC_I2C_DATA = SI5338_I2C ;

  *OC_I2C_CMD_STATUS |= (OC_I2C_STA  | OC_I2C_WR) ;
      cc:	040000b4 	movhi	r16,2
      d0:	84180104 	addi	r16,r16,24580

  lms_config_init(&xcvr_config);

  // Set the prescaler for 384kHz with a 38.4MHz clock
  *OC_I2C_PRESCALER = 0x20 ;
  *OC_I2C_CTRL |= OC_I2C_ENABLE ;
      d4:	00bfe004 	movi	r2,-128
      d8:	288ab03a 	or	r5,r5,r2

  // Set the address to the Si5338 + register offset
  *OC_I2C_DATA = SI5338_I2C ;

  *OC_I2C_CMD_STATUS |= (OC_I2C_STA  | OC_I2C_WR) ;
      dc:	81800003 	ldbu	r6,0(r16)
  xcvr_config.pa = PA_2;

  lms_config_init(&xcvr_config);

  // Set the prescaler for 384kHz with a 38.4MHz clock
  *OC_I2C_PRESCALER = 0x20 ;
      e0:	00c00804 	movi	r3,32
      e4:	008000b4 	movhi	r2,2
      e8:	10980004 	addi	r2,r2,24576
      ec:	10c0000d 	sth	r3,0(r2)
  *OC_I2C_CTRL |= OC_I2C_ENABLE ;
      f0:	39400005 	stb	r5,0(r7)

  // Set the address to the Si5338 + register offset
  *OC_I2C_DATA = SI5338_I2C ;
      f4:	044000b4 	movhi	r17,2
      f8:	8c5800c4 	addi	r17,r17,24579

  *OC_I2C_CMD_STATUS |= (OC_I2C_STA  | OC_I2C_WR) ;
      fc:	04bfe404 	movi	r18,-112
  // Set the prescaler for 384kHz with a 38.4MHz clock
  *OC_I2C_PRESCALER = 0x20 ;
  *OC_I2C_CTRL |= OC_I2C_ENABLE ;

  // Set the address to the Si5338 + register offset
  *OC_I2C_DATA = SI5338_I2C ;
     100:	00bff804 	movi	r2,-32

  *OC_I2C_CMD_STATUS |= (OC_I2C_STA  | OC_I2C_WR) ;
     104:	348cb03a 	or	r6,r6,r18
  // Set the prescaler for 384kHz with a 38.4MHz clock
  *OC_I2C_PRESCALER = 0x20 ;
  *OC_I2C_CTRL |= OC_I2C_ENABLE ;

  // Set the address to the Si5338 + register offset
  *OC_I2C_DATA = SI5338_I2C ;
     108:	88800005 	stb	r2,0(r17)

  *OC_I2C_CMD_STATUS |= (OC_I2C_STA  | OC_I2C_WR) ;
     10c:	81800005 	stb	r6,0(r16)

  //while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 0 ) { } ;
  printf( "Transfer started...\n" ) ;
     110:	01000034 	movhi	r4,0
     114:	2109b204 	addi	r4,r4,9928
     118:	00020c00 	call	20c0 <puts>
  while( (*OC_I2C_CMD_STATUS&OC_I2C_RXACK) == 1 ) { } ;
  printf( "RX ACK!\n" ) ;
     11c:	01000034 	movhi	r4,0
     120:	2109b704 	addi	r4,r4,9948
     124:	00020c00 	call	20c0 <puts>

  *OC_I2C_DATA = 10 ;

  *OC_I2C_CMD_STATUS |= (OC_I2C_WR | OC_I2C_STO) ;
     128:	80c00003 	ldbu	r3,0(r16)
  //while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 0 ) { } ;
  printf( "Transfer started...\n" ) ;
  while( (*OC_I2C_CMD_STATUS&OC_I2C_RXACK) == 1 ) { } ;
  printf( "RX ACK!\n" ) ;

  *OC_I2C_DATA = 10 ;
     12c:	00800284 	movi	r2,10
     130:	88800005 	stb	r2,0(r17)

  *OC_I2C_CMD_STATUS |= (OC_I2C_WR | OC_I2C_STO) ;
     134:	18c01414 	ori	r3,r3,80
     138:	80c00005 	stb	r3,0(r16)

  //while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 0 ) { } ;
  //printf( "Transfer startd...\n" ) ;
  while( (*OC_I2C_CMD_STATUS&OC_I2C_RXACK) == 1 ) { } ;
  printf( "RX_ACK!\n" ) ;
     13c:	01000034 	movhi	r4,0
     140:	2109b904 	addi	r4,r4,9956
     144:	00020c00 	call	20c0 <puts>
  while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 1 ) { } ;
  printf( "Transfer finished!\n" ) ;
     148:	01000034 	movhi	r4,0
     14c:	2109bb04 	addi	r4,r4,9964
     150:	00020c00 	call	20c0 <puts>
  // Next transfer is a read operation, so '1' in the read

  *OC_I2C_DATA = SI5338_I2C + 1 ;

  *OC_I2C_CMD_STATUS |= (OC_I2C_STA | OC_I2C_WR) ;
     154:	80c00003 	ldbu	r3,0(r16)
  printf( "RX_ACK!\n" ) ;
  while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 1 ) { } ;
  printf( "Transfer finished!\n" ) ;
  // Next transfer is a read operation, so '1' in the read

  *OC_I2C_DATA = SI5338_I2C + 1 ;
     158:	00bff844 	movi	r2,-31
     15c:	88800005 	stb	r2,0(r17)

  *OC_I2C_CMD_STATUS |= (OC_I2C_STA | OC_I2C_WR) ;
     160:	1c86b03a 	or	r3,r3,r18

  //while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 0 ) { } ;
  //printf( "Transfer started!\n" ) ;
  while( (*OC_I2C_CMD_STATUS&OC_I2C_RXACK) == 1 ) { } ;
  printf( "RX ACK'd!\n" ) ;
     164:	01000034 	movhi	r4,0
     168:	2109c004 	addi	r4,r4,9984
  printf( "Transfer finished!\n" ) ;
  // Next transfer is a read operation, so '1' in the read

  *OC_I2C_DATA = SI5338_I2C + 1 ;

  *OC_I2C_CMD_STATUS |= (OC_I2C_STA | OC_I2C_WR) ;
     16c:	80c00005 	stb	r3,0(r16)

  //while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 0 ) { } ;
  //printf( "Transfer started!\n" ) ;
  while( (*OC_I2C_CMD_STATUS&OC_I2C_RXACK) == 1 ) { } ;
  printf( "RX ACK'd!\n" ) ;
     170:	00020c00 	call	20c0 <puts>

  *OC_I2C_CMD_STATUS |= (OC_I2C_RD | OC_I2C_NACK | OC_I2C_STO) ;
     174:	80800003 	ldbu	r2,0(r16)

  while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 1 ) { } ;
  printf( "Transfer should be done!!\n" ) ;
     178:	01000034 	movhi	r4,0
     17c:	2109c304 	addi	r4,r4,9996
  //while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 0 ) { } ;
  //printf( "Transfer started!\n" ) ;
  while( (*OC_I2C_CMD_STATUS&OC_I2C_RXACK) == 1 ) { } ;
  printf( "RX ACK'd!\n" ) ;

  *OC_I2C_CMD_STATUS |= (OC_I2C_RD | OC_I2C_NACK | OC_I2C_STO) ;
     180:	10801a14 	ori	r2,r2,104
     184:	80800005 	stb	r2,0(r16)

  while( (*OC_I2C_CMD_STATUS&OC_I2C_TIP) == 1 ) { } ;
  printf( "Transfer should be done!!\n" ) ;
     188:	00020c00 	call	20c0 <puts>

  data = *OC_I2C_DATA ;

  alt_printf( "I2C data: %x\n", data ) ;
     18c:	89400003 	ldbu	r5,0(r17)
     190:	01000034 	movhi	r4,0
     194:	2109ca04 	addi	r4,r4,10024
     198:	00022e00 	call	22e0 <alt_printf>
  /* Event loop never exits. */
  {
	  while(1)
	  {
		  // Check if anything is in the JTAG UART
		  uint32_t reg = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE) ;
     19c:	008000b4 	movhi	r2,2
     1a0:	10880004 	addi	r2,r2,8192
     1a4:	10c00037 	ldwio	r3,0(r2)
		  if( reg & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK )
     1a8:	18a0000c 	andi	r2,r3,32768
     1ac:	10000926 	beq	r2,zero,1d4 <main+0x178>
     1b0:	010000b4 	movhi	r4,2
     1b4:	21100204 	addi	r4,r4,16392
		  {
			  // Get value from JTAG UART
			  uint8_t letter = (uint8_t)(reg & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) ;

			  // Write it out to the FSK UART
			  while( (IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK) == 0 ) { ; }
     1b8:	20800037 	ldwio	r2,0(r4)
     1bc:	1080100c 	andi	r2,r2,64
     1c0:	103ffd26 	beq	r2,zero,1b8 <main+0x15c>
			  IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, letter) ;
     1c4:	18c03fcc 	andi	r3,r3,255
     1c8:	008000b4 	movhi	r2,2
     1cc:	10900104 	addi	r2,r2,16388
     1d0:	10c00035 	stwio	r3,0(r2)
		  }

		  // Check if anything is in the FSK UART
		  if( IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK )
     1d4:	008000b4 	movhi	r2,2
     1d8:	10900204 	addi	r2,r2,16392
     1dc:	10800037 	ldwio	r2,0(r2)
     1e0:	1080200c 	andi	r2,r2,128
     1e4:	103fed26 	beq	r2,zero,19c <main+0x140>
		  {
			  uint8_t val ;
			  val = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE) ;
     1e8:	008000b4 	movhi	r2,2
     1ec:	10900004 	addi	r2,r2,16384
     1f0:	11400037 	ldwio	r5,0(r2)

			  // Write it out the JTAG UART
			  alt_printf( "%c", val ) ;
     1f4:	01000034 	movhi	r4,0
     1f8:	2109ce04 	addi	r4,r4,10040
     1fc:	29403fcc 	andi	r5,r5,255
     200:	003fe506 	br	198 <main+0x13c>

00000204 <lms_print_frequency>:
}

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
	alt_printf( "  nint     : %x\n", f->nint ) ;
     204:	2140000b 	ldhu	r5,0(r4)
	return ;
}

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
     208:	defffe04 	addi	sp,sp,-8
     20c:	dc000015 	stw	r16,0(sp)
     210:	2021883a 	mov	r16,r4
	alt_printf( "  nint     : %x\n", f->nint ) ;
     214:	01000034 	movhi	r4,0
     218:	2109cf04 	addi	r4,r4,10044
	return ;
}

// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
     21c:	dfc00115 	stw	ra,4(sp)
	alt_printf( "  nint     : %x\n", f->nint ) ;
     220:	00022e00 	call	22e0 <alt_printf>
	alt_printf( "  nfrac    : %x\n", f->nfrac ) ;
     224:	81400117 	ldw	r5,4(r16)
     228:	01000034 	movhi	r4,0
     22c:	2109d404 	addi	r4,r4,10064
     230:	00022e00 	call	22e0 <alt_printf>
	alt_printf( "  freqsel  : %x\n", f->freqsel ) ;
     234:	81400203 	ldbu	r5,8(r16)
     238:	01000034 	movhi	r4,0
     23c:	2109d904 	addi	r4,r4,10084

    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}
     240:	dfc00117 	ldw	ra,4(sp)
     244:	dc000017 	ldw	r16,0(sp)
     248:	dec00204 	addi	sp,sp,8
// Print a frequency structure
void lms_print_frequency( lms_freq_t *f )
{
	alt_printf( "  nint     : %x\n", f->nint ) ;
	alt_printf( "  nfrac    : %x\n", f->nfrac ) ;
	alt_printf( "  freqsel  : %x\n", f->freqsel ) ;
     24c:	00022e01 	jmpi	22e0 <alt_printf>

00000250 <lms_spi_write>:
	return ;
}

// SPI Write
void lms_spi_write( uint8_t address, uint8_t val )
{
     250:	defff904 	addi	sp,sp,-28
     254:	dc400515 	stw	r17,20(sp)
     258:	dc000415 	stw	r16,16(sp)
     25c:	2823883a 	mov	r17,r5
     260:	2021883a 	mov	r16,r4
	if( LMS_VERBOSE )
	{
		alt_printf( "w-addr: %x data: %x\n", address, val ) ;
     264:	81403fcc 	andi	r5,r16,255
     268:	89803fcc 	andi	r6,r17,255
     26c:	01000034 	movhi	r4,0
     270:	2109de04 	addi	r4,r4,10104
	return ;
}

// SPI Write
void lms_spi_write( uint8_t address, uint8_t val )
{
     274:	dfc00615 	stw	ra,24(sp)
	if( LMS_VERBOSE )
	{
		alt_printf( "w-addr: %x data: %x\n", address, val ) ;
     278:	00022e00 	call	22e0 <alt_printf>
	/*if( address > 0x7f )
	{
		alt_printf( "Invalid write address: %x\n", address ) ;
	} else*/ 
    {
		uint8_t data[2] = { address |= LMS_WRITE, val } ;
     27c:	00bfe004 	movi	r2,-128
     280:	80a0b03a 	or	r16,r16,r2
		alt_avalon_spi_command( SPI_0_BASE, 0, 2, data, 0, 0, 0 ) ;
     284:	010000b4 	movhi	r4,2
     288:	21040004 	addi	r4,r4,4096
     28c:	000b883a 	mov	r5,zero
     290:	01800084 	movi	r6,2
     294:	d9c00304 	addi	r7,sp,12
	/*if( address > 0x7f )
	{
		alt_printf( "Invalid write address: %x\n", address ) ;
	} else*/ 
    {
		uint8_t data[2] = { address |= LMS_WRITE, val } ;
     298:	dc000305 	stb	r16,12(sp)
     29c:	dc400345 	stb	r17,13(sp)
		alt_avalon_spi_command( SPI_0_BASE, 0, 2, data, 0, 0, 0 ) ;
     2a0:	d8000015 	stw	zero,0(sp)
     2a4:	d8000115 	stw	zero,4(sp)
     2a8:	d8000215 	stw	zero,8(sp)
     2ac:	000257c0 	call	257c <alt_avalon_spi_command>
	}
	return ;
}
     2b0:	dfc00617 	ldw	ra,24(sp)
     2b4:	dc400517 	ldw	r17,20(sp)
     2b8:	dc000417 	ldw	r16,16(sp)
     2bc:	dec00704 	addi	sp,sp,28
     2c0:	f800283a 	ret

000002c4 <lms_lpf_init>:

	return ;
}

void lms_lpf_init(void)
{
     2c4:	defffe04 	addi	sp,sp,-8
     2c8:	dc000015 	stw	r16,0(sp)
	lms_spi_write( 0x06, 0x0d ) ;
     2cc:	01000184 	movi	r4,6
	lms_spi_write( 0x17, 0x43 ) ;
     2d0:	040010c4 	movi	r16,67
	return ;
}

void lms_lpf_init(void)
{
	lms_spi_write( 0x06, 0x0d ) ;
     2d4:	01400344 	movi	r5,13

	return ;
}

void lms_lpf_init(void)
{
     2d8:	dfc00115 	stw	ra,4(sp)
	lms_spi_write( 0x06, 0x0d ) ;
     2dc:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x17, 0x43 ) ;
     2e0:	800b883a 	mov	r5,r16
     2e4:	010005c4 	movi	r4,23
     2e8:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x27, 0x43 ) ;
     2ec:	800b883a 	mov	r5,r16
     2f0:	010009c4 	movi	r4,39
     2f4:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x41, 0x1f ) ;
     2f8:	01001044 	movi	r4,65
     2fc:	014007c4 	movi	r5,31
     300:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x44, 1<<3 ) ;
	//lms_spi_write( 0x45, 0x1f<<3 ) ;
	lms_spi_write( 0x48, 0xc  ) ;
     304:	04000304 	movi	r16,12
{
	lms_spi_write( 0x06, 0x0d ) ;
	lms_spi_write( 0x17, 0x43 ) ;
	lms_spi_write( 0x27, 0x43 ) ;
	lms_spi_write( 0x41, 0x1f ) ;
	lms_spi_write( 0x44, 1<<3 ) ;
     308:	01001104 	movi	r4,68
     30c:	01400204 	movi	r5,8
     310:	00002500 	call	250 <lms_spi_write>
	//lms_spi_write( 0x45, 0x1f<<3 ) ;
	lms_spi_write( 0x48, 0xc  ) ;
     314:	800b883a 	mov	r5,r16
     318:	01001204 	movi	r4,72
     31c:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x49, 0xc ) ;
     320:	800b883a 	mov	r5,r16
     324:	01001244 	movi	r4,73
	return ;
}
     328:	dfc00117 	ldw	ra,4(sp)
     32c:	dc000017 	ldw	r16,0(sp)
     330:	dec00204 	addi	sp,sp,8
	lms_spi_write( 0x27, 0x43 ) ;
	lms_spi_write( 0x41, 0x1f ) ;
	lms_spi_write( 0x44, 1<<3 ) ;
	//lms_spi_write( 0x45, 0x1f<<3 ) ;
	lms_spi_write( 0x48, 0xc  ) ;
	lms_spi_write( 0x49, 0xc ) ;
     334:	00002501 	jmpi	250 <lms_spi_write>

00000338 <lms_calibrate_dc>:
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}

void lms_calibrate_dc(void)
{
     338:	defff604 	addi	sp,sp,-40
     33c:	dc800215 	stw	r18,8(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     340:	04800244 	movi	r18,9
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}

void lms_calibrate_dc(void)
{
     344:	dd400515 	stw	r21,20(sp)
     348:	dd000415 	stw	r20,16(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
	lms_spi_write( 0x43, 0x08 ) ; // I filter
     34c:	05400204 	movi	r21,8
     350:	050010c4 	movi	r20,67
}

void lms_calibrate_dc(void)
{
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     354:	9009883a 	mov	r4,r18
     358:	01402304 	movi	r5,140
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}

void lms_calibrate_dc(void)
{
     35c:	dfc00915 	stw	ra,36(sp)
     360:	df000815 	stw	fp,32(sp)
     364:	ddc00715 	stw	r23,28(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
	lms_spi_write( 0x43, 0x08 ) ; // I filter
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
     368:	07000a04 	movi	fp,40
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}

void lms_calibrate_dc(void)
{
     36c:	dd800615 	stw	r22,24(sp)
     370:	dcc00315 	stw	r19,12(sp)
     374:	dc400115 	stw	r17,4(sp)
     378:	dc000015 	stw	r16,0(sp)
	// RX path
	lms_spi_write( 0x09, 0x8c ) ; // CLK_EN[3]
     37c:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x43, 0x08 ) ; // I filter
     380:	a009883a 	mov	r4,r20
     384:	a80b883a 	mov	r5,r21
     388:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
     38c:	a009883a 	mov	r4,r20
     390:	e00b883a 	mov	r5,fp
     394:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x43, 0x08 ) ; // Stop calibration
     398:	a009883a 	mov	r4,r20
     39c:	a80b883a 	mov	r5,r21
     3a0:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x43, 0x09 ) ; // Q Filter
     3a4:	a009883a 	mov	r4,r20
     3a8:	900b883a 	mov	r5,r18
     3ac:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x43, 0x29 ) ;
     3b0:	a009883a 	mov	r4,r20
     3b4:	01400a44 	movi	r5,41
     3b8:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;
     3bc:	05802104 	movi	r22,132
	lms_spi_write( 0x43, 0x28 ) ; // Start Calibration
	lms_spi_write( 0x43, 0x08 ) ; // Stop calibration

	lms_spi_write( 0x43, 0x09 ) ; // Q Filter
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;
     3c0:	a009883a 	mov	r4,r20
     3c4:	900b883a 	mov	r5,r18
     3c8:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x09, 0x84 ) ;
     3cc:	b00b883a 	mov	r5,r22
     3d0:	9009883a 	mov	r4,r18
     3d4:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators
     3d8:	05c01984 	movi	r23,102
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
     3dc:	9009883a 	mov	r4,r18
     3e0:	01402504 	movi	r5,148
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators

	lms_spi_write( 0x63, 0x08 ) ; // DC reference module
     3e4:	040018c4 	movi	r16,99
	lms_spi_write( 0x43, 0x29 ) ;
	lms_spi_write( 0x43, 0x09 ) ;

	lms_spi_write( 0x09, 0x84 ) ;

	lms_spi_write( 0x09, 0x94 ) ; // CLK_EN[4]
     3e8:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x66, 0x00 ) ; // Enable comparators
     3ec:	b809883a 	mov	r4,r23
     3f0:	000b883a 	mov	r5,zero
     3f4:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x63, 0x08 ) ; // DC reference module
     3f8:	8009883a 	mov	r4,r16
     3fc:	a80b883a 	mov	r5,r21
     400:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x28 ) ;
     404:	8009883a 	mov	r4,r16
     408:	e00b883a 	mov	r5,fp
     40c:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x08 ) ;
     410:	8009883a 	mov	r4,r16
     414:	a80b883a 	mov	r5,r21
     418:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x63, 0x09 ) ;
     41c:	8009883a 	mov	r4,r16
     420:	900b883a 	mov	r5,r18
     424:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x29 ) ;
     428:	8009883a 	mov	r4,r16
     42c:	01400a44 	movi	r5,41
     430:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x09 ) ;

	lms_spi_write( 0x63, 0x0a ) ;
     434:	04c00284 	movi	r19,10
	lms_spi_write( 0x63, 0x28 ) ;
	lms_spi_write( 0x63, 0x08 ) ;

	lms_spi_write( 0x63, 0x09 ) ;
	lms_spi_write( 0x63, 0x29 ) ;
	lms_spi_write( 0x63, 0x09 ) ;
     438:	8009883a 	mov	r4,r16
     43c:	900b883a 	mov	r5,r18
     440:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x63, 0x0a ) ;
     444:	980b883a 	mov	r5,r19
     448:	8009883a 	mov	r4,r16
     44c:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x2a ) ;
     450:	8009883a 	mov	r4,r16
     454:	01400a84 	movi	r5,42
     458:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x0a ) ;

	lms_spi_write( 0x63, 0x0b ) ;
     45c:	044002c4 	movi	r17,11
	lms_spi_write( 0x63, 0x29 ) ;
	lms_spi_write( 0x63, 0x09 ) ;

	lms_spi_write( 0x63, 0x0a ) ;
	lms_spi_write( 0x63, 0x2a ) ;
	lms_spi_write( 0x63, 0x0a ) ;
     460:	8009883a 	mov	r4,r16
     464:	980b883a 	mov	r5,r19
     468:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x63, 0x0b ) ;
     46c:	880b883a 	mov	r5,r17
     470:	8009883a 	mov	r4,r16
     474:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x2b ) ;
     478:	8009883a 	mov	r4,r16
     47c:	01400ac4 	movi	r5,43
     480:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x0b ) ;
     484:	8009883a 	mov	r4,r16
     488:	880b883a 	mov	r5,r17

	lms_spi_write( 0x63, 0x0c ) ;
     48c:	04400304 	movi	r17,12
	lms_spi_write( 0x63, 0x2a ) ;
	lms_spi_write( 0x63, 0x0a ) ;

	lms_spi_write( 0x63, 0x0b ) ;
	lms_spi_write( 0x63, 0x2b ) ;
	lms_spi_write( 0x63, 0x0b ) ;
     490:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x63, 0x0c ) ;
     494:	880b883a 	mov	r5,r17
     498:	8009883a 	mov	r4,r16
     49c:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x2c ) ;
     4a0:	8009883a 	mov	r4,r16
     4a4:	01400b04 	movi	r5,44
     4a8:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x63, 0x0c ) ;
     4ac:	8009883a 	mov	r4,r16
     4b0:	880b883a 	mov	r5,r17
     4b4:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x66, 0x0a ) ;
     4b8:	b809883a 	mov	r4,r23
     4bc:	980b883a 	mov	r5,r19
     4c0:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     4c4:	044015c4 	movi	r17,87
	lms_spi_write( 0x63, 0x0c ) ;
	lms_spi_write( 0x63, 0x2c ) ;
	lms_spi_write( 0x63, 0x0c ) ;

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;
     4c8:	9009883a 	mov	r4,r18
     4cc:	b00b883a 	mov	r5,r22
     4d0:	00002500 	call	250 <lms_spi_write>

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
	lms_spi_write( 0x09, 0x42 ) ;
     4d4:	04c01084 	movi	r19,66

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     4d8:	8809883a 	mov	r4,r17
     4dc:	01400104 	movi	r5,4
	lms_spi_write( 0x09, 0x42 ) ;

	lms_spi_write( 0x33, 0x08 ) ;
     4e0:	04000cc4 	movi	r16,51

	lms_spi_write( 0x66, 0x0a ) ;
	lms_spi_write( 0x09, 0x84 ) ;

	// TX path
	lms_spi_write( 0x57, 0x04 ) ;
     4e4:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x09, 0x42 ) ;
     4e8:	9009883a 	mov	r4,r18
     4ec:	980b883a 	mov	r5,r19
     4f0:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x33, 0x08 ) ;
     4f4:	8009883a 	mov	r4,r16
     4f8:	a80b883a 	mov	r5,r21
     4fc:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x33, 0x28 ) ;
     500:	8009883a 	mov	r4,r16
     504:	e00b883a 	mov	r5,fp
     508:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x33, 0x08 ) ;
     50c:	8009883a 	mov	r4,r16
     510:	a80b883a 	mov	r5,r21
     514:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x33, 0x09 ) ;
     518:	8009883a 	mov	r4,r16
     51c:	900b883a 	mov	r5,r18
     520:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x33, 0x29 ) ;
     524:	8009883a 	mov	r4,r16
     528:	01400a44 	movi	r5,41
     52c:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x33, 0x09 ) ;
     530:	8009883a 	mov	r4,r16
     534:	900b883a 	mov	r5,r18
     538:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x57, 0x84 ) ;
     53c:	8809883a 	mov	r4,r17
     540:	b00b883a 	mov	r5,r22
     544:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x09, 0x81 ) ;
     548:	9009883a 	mov	r4,r18
     54c:	01402044 	movi	r5,129
     550:	00002500 	call	250 <lms_spi_write>

	lms_spi_write( 0x42, 0x77 ) ;
     554:	9809883a 	mov	r4,r19
     558:	01401dc4 	movi	r5,119
     55c:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x43, 0x7f ) ;
     560:	a009883a 	mov	r4,r20
     564:	01401fc4 	movi	r5,127

	return ;
}
     568:	dfc00917 	ldw	ra,36(sp)
     56c:	df000817 	ldw	fp,32(sp)
     570:	ddc00717 	ldw	r23,28(sp)
     574:	dd800617 	ldw	r22,24(sp)
     578:	dd400517 	ldw	r21,20(sp)
     57c:	dd000417 	ldw	r20,16(sp)
     580:	dcc00317 	ldw	r19,12(sp)
     584:	dc800217 	ldw	r18,8(sp)
     588:	dc400117 	ldw	r17,4(sp)
     58c:	dc000017 	ldw	r16,0(sp)
     590:	dec00a04 	addi	sp,sp,40

	lms_spi_write( 0x57, 0x84 ) ;
	lms_spi_write( 0x09, 0x81 ) ;

	lms_spi_write( 0x42, 0x77 ) ;
	lms_spi_write( 0x43, 0x7f ) ;
     594:	00002501 	jmpi	250 <lms_spi_write>

00000598 <lms_rxvga2_set_gain>:
	return ;
}

// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
     598:	defffe04 	addi	sp,sp,-8
     59c:	dc000015 	stw	r16,0(sp)
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
     5a0:	00800284 	movi	r2,10
     5a4:	240007cc 	andi	r16,r4,31
	return ;
}

// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
     5a8:	dfc00115 	stw	ra,4(sp)
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
     5ac:	01000034 	movhi	r4,0
     5b0:	2109e404 	addi	r4,r4,10128
// Set the gain on RXVGA2
void lms_rxvga2_set_gain( uint8_t gain )
{
	// NOTE: Gain is calculated as gain*3dB and shouldn't really
	// go above 30dB
	if( (gain&0x1f) > 10 )
     5b4:	1400010e 	bge	r2,r16,5bc <lms_rxvga2_set_gain+0x24>
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
     5b8:	00024740 	call	2474 <alt_putstr>
	}
	lms_spi_write( 0x65, (0x1f)&gain ) ;
     5bc:	800b883a 	mov	r5,r16
     5c0:	01001944 	movi	r4,101
	return ;
}
     5c4:	dfc00117 	ldw	ra,4(sp)
     5c8:	dc000017 	ldw	r16,0(sp)
     5cc:	dec00204 	addi	sp,sp,8
	// go above 30dB
	if( (gain&0x1f) > 10 )
	{
		alt_putstr( "Setting gain above 30dB? You crazy!!\n" ) ;
	}
	lms_spi_write( 0x65, (0x1f)&gain ) ;
     5d0:	00002501 	jmpi	250 <lms_spi_write>

000005d4 <lms_rxvga1_enable>:

// Enable RXVGA1
void lms_rxvga1_enable()
{
	// Set bias current to nominal
	lms_spi_write( 0x7b, 0x33 ) ;
     5d4:	01001ec4 	movi	r4,123
     5d8:	01400cc4 	movi	r5,51
     5dc:	00002501 	jmpi	250 <lms_spi_write>

000005e0 <lms_rxvga1_disable>:

// Disable RXVGA1
void lms_rxvga1_disable()
{
	// Set bias current to 0
	lms_spi_write( 0x7b, 0x03 ) ;
     5e0:	01001ec4 	movi	r4,123
     5e4:	014000c4 	movi	r5,3
     5e8:	00002501 	jmpi	250 <lms_spi_write>

000005ec <lms_soft_reset>:
	return ;
}

// Soft reset of the LMS
void lms_soft_reset( )
{
     5ec:	defffe04 	addi	sp,sp,-8
     5f0:	dc000015 	stw	r16,0(sp)
	lms_spi_write( 0x05, 0x12 ) ;
     5f4:	04000144 	movi	r16,5
     5f8:	8009883a 	mov	r4,r16
     5fc:	01400484 	movi	r5,18
	return ;
}

// Soft reset of the LMS
void lms_soft_reset( )
{
     600:	dfc00115 	stw	ra,4(sp)
	lms_spi_write( 0x05, 0x12 ) ;
     604:	00002500 	call	250 <lms_spi_write>
	lms_spi_write( 0x05, 0x32 ) ;
     608:	8009883a 	mov	r4,r16
     60c:	01400c84 	movi	r5,50
	return ;
}
     610:	dfc00117 	ldw	ra,4(sp)
     614:	dc000017 	ldw	r16,0(sp)
     618:	dec00204 	addi	sp,sp,8

// Soft reset of the LMS
void lms_soft_reset( )
{
	lms_spi_write( 0x05, 0x12 ) ;
	lms_spi_write( 0x05, 0x32 ) ;
     61c:	00002501 	jmpi	250 <lms_spi_write>

00000620 <lms_lpf_disable>:
}

// Disable the LPF for a specific module
void lms_lpf_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
     620:	00801504 	movi	r2,84
     624:	20000126 	beq	r4,zero,62c <lms_lpf_disable+0xc>
     628:	00800d04 	movi	r2,52
	lms_spi_write( reg, 0x00 ) ;
     62c:	11003fcc 	andi	r4,r2,255
     630:	000b883a 	mov	r5,zero
     634:	00002501 	jmpi	250 <lms_spi_write>

00000638 <lms_spi_read>:

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
	uint8_t rv ;
	if( address > 0x7f )
     638:	20c03fcc 	andi	r3,r4,255
     63c:	18803fcc 	andi	r2,r3,255
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     640:	defff904 	addi	sp,sp,-28
	uint8_t rv ;
	if( address > 0x7f )
     644:	1080201c 	xori	r2,r2,128
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     648:	dc000415 	stw	r16,16(sp)
	uint8_t rv ;
	if( address > 0x7f )
     64c:	10bfe004 	addi	r2,r2,-128
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     650:	04000044 	movi	r16,1
	return ;
}

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
     654:	dc400515 	stw	r17,20(sp)
     658:	d9000305 	stb	r4,12(sp)
     65c:	2823883a 	mov	r17,r5
     660:	dfc00615 	stw	ra,24(sp)
	uint8_t rv ;
	if( address > 0x7f )
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     664:	010000b4 	movhi	r4,2
     668:	21040004 	addi	r4,r4,4096
     66c:	800d883a 	mov	r6,r16
     670:	d9c00304 	addi	r7,sp,12
     674:	000b883a 	mov	r5,zero

// SPI Read
void lms_spi_read( uint8_t address, uint8_t *val )
{
	uint8_t rv ;
	if( address > 0x7f )
     678:	1000050e 	bge	r2,zero,690 <lms_spi_read+0x58>
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
     67c:	19403fcc 	andi	r5,r3,255
     680:	01000034 	movhi	r4,0
     684:	2109ee04 	addi	r4,r4,10168
     688:	00022e00 	call	22e0 <alt_printf>
     68c:	00001206 	br	6d8 <lms_spi_read+0xa0>
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
     690:	d8000015 	stw	zero,0(sp)
     694:	d8000115 	stw	zero,4(sp)
     698:	dc000215 	stw	r16,8(sp)
     69c:	000257c0 	call	257c <alt_avalon_spi_command>
		rv = alt_avalon_spi_command( SPI_0_BASE, 0, 0, 0, 1, val, 0 ) ;
     6a0:	010000b4 	movhi	r4,2
     6a4:	21040004 	addi	r4,r4,4096
     6a8:	000b883a 	mov	r5,zero
     6ac:	000d883a 	mov	r6,zero
     6b0:	000f883a 	mov	r7,zero
     6b4:	dc000015 	stw	r16,0(sp)
     6b8:	dc400115 	stw	r17,4(sp)
     6bc:	d8000215 	stw	zero,8(sp)
     6c0:	000257c0 	call	257c <alt_avalon_spi_command>
		if( rv != 1 )
     6c4:	10803fcc 	andi	r2,r2,255
		{
			alt_putstr( "SPI data read did not work :(\n") ;
     6c8:	01000034 	movhi	r4,0
     6cc:	2109f504 	addi	r4,r4,10196
	{
		alt_printf( "Invalid read address: %x\n", address ) ;
	} else {
		alt_avalon_spi_command( SPI_0_BASE, 0, 1, &address, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE ) ;
		rv = alt_avalon_spi_command( SPI_0_BASE, 0, 0, 0, 1, val, 0 ) ;
		if( rv != 1 )
     6d0:	14000126 	beq	r2,r16,6d8 <lms_spi_read+0xa0>
		{
			alt_putstr( "SPI data read did not work :(\n") ;
     6d4:	00024740 	call	2474 <alt_putstr>
		}
	}
	if( LMS_VERBOSE )
	{
		alt_printf( "r-addr: %x data: %x\n", address, *val ) ;
     6d8:	89800003 	ldbu	r6,0(r17)
     6dc:	d9400303 	ldbu	r5,12(sp)
     6e0:	01000034 	movhi	r4,0
     6e4:	2109fd04 	addi	r4,r4,10228
     6e8:	00022e00 	call	22e0 <alt_printf>
	}
	return ;
}
     6ec:	dfc00617 	ldw	ra,24(sp)
     6f0:	dc400517 	ldw	r17,20(sp)
     6f4:	dc000417 	ldw	r16,16(sp)
     6f8:	dec00704 	addi	sp,sp,28
     6fc:	f800283a 	ret

00000700 <lms_dump_registers>:

	return ;
}

void lms_dump_registers(void)
{
     700:	defffd04 	addi	sp,sp,-12
     704:	dc000115 	stw	r16,4(sp)
     708:	dfc00215 	stw	ra,8(sp)
     70c:	0021883a 	mov	r16,zero
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
     710:	80803fcc 	andi	r2,r16,255
     714:	00c00034 	movhi	r3,0
     718:	18ca4b04 	addi	r3,r3,10540
     71c:	1085883a 	add	r2,r2,r2
     720:	10c5883a 	add	r2,r2,r3
     724:	11000003 	ldbu	r4,0(r2)
     728:	d80b883a 	mov	r5,sp

void lms_dump_registers(void)
{
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
     72c:	84000044 	addi	r16,r16,1
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
     730:	00006380 	call	638 <lms_spi_read>

void lms_dump_registers(void)
{
	uint8_t data,i;
    uint16_t num_reg = sizeof(lms_reg_dumpset);
    for (i = 0; i < num_reg; i++)
     734:	80c03fcc 	andi	r3,r16,255
     738:	00802c84 	movi	r2,178
     73c:	18bff41e 	bne	r3,r2,710 <lms_dump_registers+0x10>
    {   
        lms_spi_read( lms_reg_dumpset[i], &data ) ;
    }
}
     740:	dfc00217 	ldw	ra,8(sp)
     744:	dc000117 	ldw	r16,4(sp)
     748:	dec00304 	addi	sp,sp,12
     74c:	f800283a 	ret

00000750 <lms_set_frequency>:
	return ;
}

// Set the frequency of a module
void lms_set_frequency( lms_module_t mod, uint32_t freq )
{
     750:	defff304 	addi	sp,sp,-52
     754:	dd800b15 	stw	r22,44(sp)
     758:	dc400615 	stw	r17,24(sp)
     75c:	dfc00c15 	stw	ra,48(sp)
     760:	dd400a15 	stw	r21,40(sp)
     764:	dd000915 	stw	r20,36(sp)
     768:	dcc00815 	stw	r19,32(sp)
     76c:	dc800715 	stw	r18,28(sp)
     770:	dc000515 	stw	r16,20(sp)
     774:	202d883a 	mov	r22,r4
     778:	2823883a 	mov	r17,r5
	// Select the base address based on which PLL we are configuring
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     77c:	20000926 	beq	r4,zero,7a4 <lms_set_frequency+0x54>
     780:	05000404 	movi	r20,16
     784:	00000806 	br	7a8 <lms_set_frequency+0x58>
		uint8_t i = 0 ;
		while( i < 16 )
		{
			if( (lfreq > bands[i].low) && (lfreq <= bands[i].high) )
			{
				freqsel = bands[i].value ;
     788:	01400304 	movi	r5,12
     78c:	0001ff80 	call	1ff8 <__mulsi3>
     790:	00c00034 	movhi	r3,0
     794:	18ca1b04 	addi	r3,r3,10348
     798:	10c5883a 	add	r2,r2,r3
     79c:	14c00203 	ldbu	r19,8(r2)
     7a0:	00001c06 	br	814 <lms_set_frequency+0xc4>

// Set the frequency of a module
void lms_set_frequency( lms_module_t mod, uint32_t freq )
{
	// Select the base address based on which PLL we are configuring
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     7a4:	05000804 	movi	r20,32
    uint32_t x;
	uint32_t reference = 38400000 ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
     7a8:	01000244 	movi	r4,9
     7ac:	d80b883a 	mov	r5,sp
     7b0:	00006380 	call	638 <lms_spi_read>
	data |= 0x05 ;
     7b4:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
     7b8:	01000244 	movi	r4,9
	uint32_t reference = 38400000 ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
	data |= 0x05 ;
     7bc:	10800154 	ori	r2,r2,5
	lms_spi_write( 0x09, data ) ;
     7c0:	11403fcc 	andi	r5,r2,255
	uint32_t reference = 38400000 ;


	// Turn on the DSMs
	lms_spi_read( 0x09, &data ) ;
	data |= 0x05 ;
     7c4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
     7c8:	00002500 	call	250 <lms_spi_write>

	// Figure out freqsel
	if( lfreq < bands[0].low )
     7cc:	00837734 	movhi	r2,3548
     7d0:	10aac7c4 	addi	r2,r2,-21729
     7d4:	14400e2e 	bgeu	r2,r17,810 <lms_set_frequency+0xc0>
	{
		// Too low
	} else if( lfreq > bands[15].high )
     7d8:	00b76ef4 	movhi	r2,56763
     7dc:	10ac8004 	addi	r2,r2,-19968
     7e0:	14400b36 	bltu	r2,r17,810 <lms_set_frequency+0xc0>
     7e4:	0009883a 	mov	r4,zero
     7e8:	00c00034 	movhi	r3,0
     7ec:	18ca1b04 	addi	r3,r3,10348
     7f0:	01400404 	movi	r5,16
	} else
	{
		uint8_t i = 0 ;
		while( i < 16 )
		{
			if( (lfreq > bands[i].low) && (lfreq <= bands[i].high) )
     7f4:	18800017 	ldw	r2,0(r3)
     7f8:	1440022e 	bgeu	r2,r17,804 <lms_set_frequency+0xb4>
     7fc:	18800117 	ldw	r2,4(r3)
     800:	147fe12e 	bgeu	r2,r17,788 <lms_set_frequency+0x38>
			{
				freqsel = bands[i].value ;
				break ;
     804:	21000044 	addi	r4,r4,1
     808:	18c00304 	addi	r3,r3,12
	{
		// Too high!
	} else
	{
		uint8_t i = 0 ;
		while( i < 16 )
     80c:	217ff91e 	bne	r4,r5,7f4 <lms_set_frequency+0xa4>
     810:	04c009c4 	movi	r19,39
			}
			i++ ;
		}
	}

    x = 1 << ((freqsel&7)-3);
     814:	9c803fcc 	andi	r18,r19,255
     818:	940001cc 	andi	r16,r18,7
     81c:	843fff44 	addi	r16,r16,-3
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
     820:	05400044 	movi	r21,1
     824:	ac08983a 	sll	r4,r21,r16
     828:	880b883a 	mov	r5,r17
     82c:	0001ff80 	call	1ff8 <__mulsi3>
     830:	100495fa 	slli	r2,r2,23
        temp  = temp + reference/2;
     834:	01804974 	movhi	r6,293
     838:	31be0004 	addi	r6,r6,-2048

    x = 1 << ((freqsel&7)-3);
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
     83c:	000b883a 	mov	r5,zero
     840:	1009883a 	mov	r4,r2
        temp  = temp + reference/2;
     844:	1185883a 	add	r2,r2,r6
     848:	1111803a 	cmpltu	r8,r2,r4
     84c:	4151883a 	add	r8,r8,r5
     850:	000f883a 	mov	r7,zero
     854:	1009883a 	mov	r4,r2
        temp = temp/reference;
        nint = temp >> 23;
     858:	018092b4 	movhi	r6,586
     85c:	31bc0004 	addi	r6,r6,-4096
    x = 1 << ((freqsel&7)-3);
    //nint = floor( 2^(freqsel(2:0)-3) * f_lo / f_ref)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
     860:	400b883a 	mov	r5,r8
        temp = temp/reference;
        nint = temp >> 23;
     864:	00018400 	call	1840 <__udivdi3>
        nfrac = temp - (nint << 23);

    }
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
     868:	8810d17a 	srli	r8,r17,5
     86c:	880cd0ba 	srli	r6,r17,2
     870:	880ed33a 	srli	r7,r17,12
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
        temp = temp/reference;
        nint = temp >> 23;
     874:	1812927a 	slli	r9,r3,9
        nfrac = temp - (nint << 23);

    }
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
     878:	320dc83a 	sub	r6,r6,r8
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
        temp = temp/reference;
        nint = temp >> 23;
     87c:	1004d5fa 	srli	r2,r2,23
        nfrac = temp - (nint << 23);

    }
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
     880:	31cdc83a 	sub	r6,r6,r7
	nfrac <<= ((freqsel&7)-3) ;
     884:	3420983a 	sll	r16,r6,r16
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
        temp = temp/reference;
        nint = temp >> 23;
     888:	4884b03a 	or	r2,r9,r2
	nfrac <<= ((freqsel&7)-3) ;

	f.nint = nint ;
	f.nfrac = nfrac ;
	f.freqsel = freqsel ;
	lms_print_frequency( &f ) ;
     88c:	d9000104 	addi	r4,sp,4
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
	nfrac <<= ((freqsel&7)-3) ;

	f.nint = nint ;
	f.nfrac = nfrac ;
	f.freqsel = freqsel ;
     890:	dcc00305 	stb	r19,12(sp)

    }
	nfrac = (lfreq>>2) - (lfreq>>5) - (lfreq>>12) ;
	nfrac <<= ((freqsel&7)-3) ;

	f.nint = nint ;
     894:	d880010d 	sth	r2,4(sp)
	f.nfrac = nfrac ;
     898:	dc000215 	stw	r16,8(sp)
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    {
        uint64_t temp = (uint64_t) ((x * freq)<< 23);
        temp  = temp + reference/2;
        temp = temp/reference;
        nint = temp >> 23;
     89c:	1027883a 	mov	r19,r2
	nfrac <<= ((freqsel&7)-3) ;

	f.nint = nint ;
	f.nfrac = nfrac ;
	f.freqsel = freqsel ;
	lms_print_frequency( &f ) ;
     8a0:	00002040 	call	204 <lms_print_frequency>

	// Program freqsel, selout (rx only), nint and nfrac
	if( mod == RX )
     8a4:	b000081e 	bne	r22,zero,8c8 <lms_set_frequency+0x178>
	{
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
     8a8:	00965a34 	movhi	r2,22888
     8ac:	108bbfc4 	addi	r2,r2,12031
     8b0:	1445803a 	cmpltu	r2,r2,r17
     8b4:	948b883a 	add	r5,r18,r18
     8b8:	1545883a 	add	r2,r2,r21
     8bc:	294b883a 	add	r5,r5,r5
     8c0:	288ab03a 	or	r5,r5,r2
     8c4:	00000906 	br	8ec <lms_set_frequency+0x19c>
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
     8c8:	00965a34 	movhi	r2,22888
     8cc:	108bbfc4 	addi	r2,r2,12031
     8d0:	14400236 	bltu	r2,r17,8dc <lms_set_frequency+0x18c>
     8d4:	a809883a 	mov	r4,r21
     8d8:	00000106 	br	8e0 <lms_set_frequency+0x190>
     8dc:	01000084 	movi	r4,2
     8e0:	948b883a 	add	r5,r18,r18
     8e4:	294b883a 	add	r5,r5,r5
     8e8:	290ab03a 	or	r5,r5,r4
     8ec:	a1000144 	addi	r4,r20,5
     8f0:	21003fcc 	andi	r4,r4,255
     8f4:	29403fcc 	andi	r5,r5,255
     8f8:	00002500 	call	250 <lms_spi_write>
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
     8fc:	98bfffcc 	andi	r2,r19,65535
     900:	1004d07a 	srli	r2,r2,1
	lms_spi_write( base+0, data ) ;
     904:	a1003fcc 	andi	r4,r20,255
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
     908:	047ff804 	movi	r17,-32
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
     90c:	11403fcc 	andi	r5,r2,255
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	} else {
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
     910:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+0, data ) ;
     914:	00002500 	call	250 <lms_spi_write>
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
     918:	98c0004c 	andi	r3,r19,1
     91c:	8004d43a 	srli	r2,r16,16
     920:	180691fa 	slli	r3,r3,7
	lms_spi_write( base+1, data ) ;
     924:	a1000044 	addi	r4,r20,1
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
     928:	10801fcc 	andi	r2,r2,127
     92c:	1886b03a 	or	r3,r3,r2
	lms_spi_write( base+1, data ) ;
     930:	180b883a 	mov	r5,r3
     934:	21003fcc 	andi	r4,r4,255
//		lms_spi_write( base+5, freqsel<<2 ) ;
		lms_spi_write( base+5, freqsel<<2 | (freq < 1500000000 ? 1 : 2 ) ) ;
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
     938:	d8c00005 	stb	r3,0(sp)
	lms_spi_write( base+1, data ) ;
     93c:	00002500 	call	250 <lms_spi_write>
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
     940:	8004d23a 	srli	r2,r16,8
	lms_spi_write( base+2, data ) ;
     944:	a1000084 	addi	r4,r20,2
     948:	21003fcc 	andi	r4,r4,255
     94c:	11403fcc 	andi	r5,r2,255
	}
	data = nint>>1 ;// alt_printf( "%x\n", data ) ;
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
     950:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+2, data ) ;
     954:	00002500 	call	250 <lms_spi_write>
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+3, data ) ;
     958:	81403fcc 	andi	r5,r16,255
	lms_spi_write( base+0, data ) ;
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+2, data ) ;
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
     95c:	dc000005 	stb	r16,0(sp)
	lms_spi_write( base+3, data ) ;
     960:	a10000c4 	addi	r4,r20,3

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
     964:	a4000184 	addi	r16,r20,6
     968:	84003fcc 	andi	r16,r16,255
	data = ((nint&1)<<7) | ((nfrac>>16)&0x7f) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+1, data ) ;
	data = ((nfrac>>8)&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+2, data ) ;
	data = (nfrac&0xff) ;//  alt_printf( "%x\n", data ) ;
	lms_spi_write( base+3, data ) ;
     96c:	21003fcc 	andi	r4,r4,255
     970:	00002500 	call	250 <lms_spi_write>

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
     974:	8009883a 	mov	r4,r16
     978:	d80b883a 	mov	r5,sp
     97c:	00006380 	call	638 <lms_spi_read>
	data &= ~(0x1f) ;
	data |= 0x0c ;
     980:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( base+6, data ) ;
     984:	8009883a 	mov	r4,r16
	lms_spi_read( base+7, &data ) ;
     988:	a40001c4 	addi	r16,r20,7
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
     98c:	1444703a 	and	r2,r2,r17
     990:	10800314 	ori	r2,r2,12
	lms_spi_write( base+6, data ) ;
     994:	11403b0c 	andi	r5,r2,236
	lms_spi_read( base+7, &data ) ;
     998:	84003fcc 	andi	r16,r16,255
	lms_spi_write( base+3, data ) ;

	// Set the PLL Ichp, Iup and Idn currents
	lms_spi_read( base+6, &data ) ;
	data &= ~(0x1f) ;
	data |= 0x0c ;
     99c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+6, data ) ;
     9a0:	00002500 	call	250 <lms_spi_write>
	lms_spi_read( base+7, &data ) ;
     9a4:	8009883a 	mov	r4,r16
     9a8:	d80b883a 	mov	r5,sp
     9ac:	00006380 	call	638 <lms_spi_read>
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
     9b0:	8009883a 	mov	r4,r16
	lms_spi_read( base+8, &data ) ;
     9b4:	a4000204 	addi	r16,r20,8
	data |= 0x0c ;
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
     9b8:	00bff8c4 	movi	r2,-29
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
     9bc:	84003fcc 	andi	r16,r16,255
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
     9c0:	014038c4 	movi	r5,227
	data |= 0x0c ;
	lms_spi_write( base+6, data ) ;
	lms_spi_read( base+7, &data ) ;
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
     9c4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+7, data ) ;
     9c8:	00002500 	call	250 <lms_spi_write>
	lms_spi_read( base+8, &data ) ;
     9cc:	8009883a 	mov	r4,r16
     9d0:	d80b883a 	mov	r5,sp
     9d4:	00006380 	call	638 <lms_spi_read>
	data &= ~(0x1f) ;
     9d8:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( base+8, data ) ;
     9dc:	8009883a 	mov	r4,r16

	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
	data &= ~(0x3f) ;
     9e0:	0027883a 	mov	r19,zero
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
	data &= ~(0x1f) ;
     9e4:	1444703a 	and	r2,r2,r17
	lms_spi_write( base+8, data ) ;
     9e8:	1140380c 	andi	r5,r2,224
	data &= ~(0x1f) ;
	data |= 3 ;
    data = 0xe3;
	lms_spi_write( base+7, data ) ;
	lms_spi_read( base+8, &data ) ;
	data &= ~(0x1f) ;
     9ec:	d8800005 	stb	r2,0(sp)
	lms_spi_write( base+8, data ) ;
     9f0:	00002500 	call	250 <lms_spi_write>

	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
     9f4:	a0800244 	addi	r2,r20,9
     9f8:	14403fcc 	andi	r17,r2,255
     9fc:	8809883a 	mov	r4,r17
     a00:	d80b883a 	mov	r5,sp
     a04:	00006380 	call	638 <lms_spi_read>
	data &= ~(0x3f) ;
     a08:	d8800003 	ldbu	r2,0(sp)
     a0c:	0021883a 	mov	r16,zero
     a10:	1080300c 	andi	r2,r2,192
     a14:	d8800005 	stb	r2,0(sp)
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
     a18:	d8800003 	ldbu	r2,0(sp)
     a1c:	00fff004 	movi	r3,-64
			lms_spi_write( base+9, data ) ;
     a20:	8809883a 	mov	r4,r17
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
     a24:	10c4703a 	and	r2,r2,r3
     a28:	8084b03a 	or	r2,r16,r2
			lms_spi_write( base+9, data ) ;
     a2c:	11403fcc 	andi	r5,r2,255
			lms_spi_read( base+10, &vtune ) ;
     a30:	a4800284 	addi	r18,r20,10
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
		{
			data &= ~(0x3f) ;
			data |= i ;
     a34:	d8800005 	stb	r2,0(sp)
			lms_spi_write( base+9, data ) ;
     a38:	00002500 	call	250 <lms_spi_write>
			lms_spi_read( base+10, &vtune ) ;
     a3c:	91003fcc 	andi	r4,r18,255
     a40:	d9400044 	addi	r5,sp,1
     a44:	00006380 	call	638 <lms_spi_read>
			if( (vtune&0xc0) == 0xc0 )
     a48:	d8800043 	ldbu	r2,1(sp)
     a4c:	00c03004 	movi	r3,192
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
     a50:	01000034 	movhi	r4,0
     a54:	210a0304 	addi	r4,r4,10252
		{
			data &= ~(0x3f) ;
			data |= i ;
			lms_spi_write( base+9, data ) ;
			lms_spi_read( base+10, &vtune ) ;
			if( (vtune&0xc0) == 0xc0 )
     a58:	1080300c 	andi	r2,r2,192
     a5c:	10c0011e 	bne	r2,r3,a64 <lms_set_frequency+0x314>
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
     a60:	00024740 	call	2474 <alt_putstr>
			}
			if( vtune&0x80 )
     a64:	d8800047 	ldb	r2,1(sp)
			{
				alt_putstr( "Setting HIGH\n" ) ;
     a68:	01000034 	movhi	r4,0
     a6c:	210a0704 	addi	r4,r4,10268
			lms_spi_read( base+10, &vtune ) ;
			if( (vtune&0xc0) == 0xc0 )
			{
				alt_putstr( "MESSED UP!!!!!\n" ) ;
			}
			if( vtune&0x80 )
     a70:	1000020e 	bge	r2,zero,a7c <lms_set_frequency+0x32c>
			{
				alt_putstr( "Setting HIGH\n" ) ;
     a74:	00024740 	call	2474 <alt_putstr>
     a78:	8027883a 	mov	r19,r16
				high = i ;
			}
			if( (vtune&0x40) && low == 64 )
     a7c:	d8800043 	ldbu	r2,1(sp)
     a80:	1080100c 	andi	r2,r2,64
     a84:	1000031e 	bne	r2,zero,a94 <lms_set_frequency+0x344>
     a88:	84000044 	addi	r16,r16,1
	// Loop through the VCOCAP to figure out optimal values
	lms_spi_read( base+9, &data ) ;
	data &= ~(0x3f) ;
	{
		uint8_t i, vtune, low = 64, high = 0;
		for( i = 0 ; i < 64 ; i++ )
     a8c:	00801004 	movi	r2,64
     a90:	80bfe11e 	bne	r16,r2,a18 <lms_set_frequency+0x2c8>
			{
				low = i ;
				break ;
			}
		}
		alt_printf( "LOW: %x HIGH: %x VCOCAP: %x\n", low, high, (low+high)>>1 ) ;
     a94:	99803fcc 	andi	r6,r19,255
     a98:	81403fcc 	andi	r5,r16,255
     a9c:	29a1883a 	add	r16,r5,r6
     aa0:	8021d07a 	srai	r16,r16,1
     aa4:	01000034 	movhi	r4,0
     aa8:	210a0b04 	addi	r4,r4,10284
     aac:	800f883a 	mov	r7,r16
     ab0:	00022e00 	call	22e0 <alt_printf>
		data &= ~(0x3f) ;
		data |= ((low+high)>>1) ;
     ab4:	d8800003 	ldbu	r2,0(sp)
     ab8:	00fff004 	movi	r3,-64
		lms_spi_write( base+9, data ) ;
     abc:	8809883a 	mov	r4,r17
				break ;
			}
		}
		alt_printf( "LOW: %x HIGH: %x VCOCAP: %x\n", low, high, (low+high)>>1 ) ;
		data &= ~(0x3f) ;
		data |= ((low+high)>>1) ;
     ac0:	10c4703a 	and	r2,r2,r3
     ac4:	1404b03a 	or	r2,r2,r16
		lms_spi_write( base+9, data ) ;
     ac8:	11403fcc 	andi	r5,r2,255
				break ;
			}
		}
		alt_printf( "LOW: %x HIGH: %x VCOCAP: %x\n", low, high, (low+high)>>1 ) ;
		data &= ~(0x3f) ;
		data |= ((low+high)>>1) ;
     acc:	d8800005 	stb	r2,0(sp)
		lms_spi_write( base+9, data ) ;
     ad0:	00002500 	call	250 <lms_spi_write>
		lms_spi_write( base+9, data ) ;
     ad4:	d9400003 	ldbu	r5,0(sp)
     ad8:	8809883a 	mov	r4,r17
     adc:	00002500 	call	250 <lms_spi_write>
		lms_spi_read( base+10, &vtune ) ;
     ae0:	91003fcc 	andi	r4,r18,255
     ae4:	d9400044 	addi	r5,sp,1
     ae8:	00006380 	call	638 <lms_spi_read>
		alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
     aec:	d9400043 	ldbu	r5,1(sp)
     af0:	01000034 	movhi	r4,0
     af4:	210a1304 	addi	r4,r4,10316
     af8:	2940300c 	andi	r5,r5,192
     afc:	00022e00 	call	22e0 <alt_printf>
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
     b00:	d80b883a 	mov	r5,sp
     b04:	01000244 	movi	r4,9
     b08:	00006380 	call	638 <lms_spi_read>
	data &= ~(0x05) ;
     b0c:	d8800003 	ldbu	r2,0(sp)
     b10:	00fffe84 	movi	r3,-6
	lms_spi_write( 0x09, data ) ;
     b14:	01000244 	movi	r4,9
		alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
	data &= ~(0x05) ;
     b18:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x09, data ) ;
     b1c:	11403e8c 	andi	r5,r2,250
		alt_printf( "VTUNE: %x\n", vtune&0xc0 ) ;
	}

	// Turn off the DSMs
	lms_spi_read( 0x09, &data ) ;
	data &= ~(0x05) ;
     b20:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x09, data ) ;
     b24:	00002500 	call	250 <lms_spi_write>

	return ;
}
     b28:	dfc00c17 	ldw	ra,48(sp)
     b2c:	dd800b17 	ldw	r22,44(sp)
     b30:	dd400a17 	ldw	r21,40(sp)
     b34:	dd000917 	ldw	r20,36(sp)
     b38:	dcc00817 	ldw	r19,32(sp)
     b3c:	dc800717 	ldw	r18,28(sp)
     b40:	dc400617 	ldw	r17,24(sp)
     b44:	dc000517 	ldw	r16,20(sp)
     b48:	dec00d04 	addi	sp,sp,52
     b4c:	f800283a 	ret

00000b50 <lms_get_frequency>:
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}

// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
     b50:	defffc04 	addi	sp,sp,-16
     b54:	dc400215 	stw	r17,8(sp)
     b58:	dc000115 	stw	r16,4(sp)
     b5c:	dfc00315 	stw	ra,12(sp)
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     b60:	04400804 	movi	r17,32
    //nfrac = floor(2^23 * (((x*f_lo)/f_ref) -nint))
    
}

// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
     b64:	2821883a 	mov	r16,r5
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
     b68:	20000126 	beq	r4,zero,b70 <lms_get_frequency+0x20>
     b6c:	04400404 	movi	r17,16
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
     b70:	89003fcc 	andi	r4,r17,255
     b74:	d80b883a 	mov	r5,sp
     b78:	00006380 	call	638 <lms_spi_read>
	f->nint = ((uint16_t)data) << 1 ;
     b7c:	d8800003 	ldbu	r2,0(sp)
	lms_spi_read( base+1, &data ) ;
     b80:	89000044 	addi	r4,r17,1
     b84:	d80b883a 	mov	r5,sp
// Get the frequency structure
void lms_get_frequency( lms_module_t mod, lms_freq_t *f ) {
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
     b88:	1085883a 	add	r2,r2,r2
     b8c:	8080000d 	sth	r2,0(r16)
	lms_spi_read( base+1, &data ) ;
     b90:	21003fcc 	andi	r4,r4,255
     b94:	00006380 	call	638 <lms_spi_read>
	f->nint |= (data&0x80)>>7 ;
     b98:	d8800003 	ldbu	r2,0(sp)
     b9c:	8140000b 	ldhu	r5,0(r16)
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
     ba0:	89000084 	addi	r4,r17,2
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
     ba4:	10c01fcc 	andi	r3,r2,127
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
     ba8:	1004d1fa 	srli	r2,r2,7
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
     bac:	1806943a 	slli	r3,r3,16
	lms_spi_read( base+2, &data ) ;
     bb0:	21003fcc 	andi	r4,r4,255
	uint8_t base = (mod == RX) ? 0x20 : 0x10 ;
	uint8_t data ;
	lms_spi_read( base+0, &data ) ;
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
     bb4:	1144b03a 	or	r2,r2,r5
     bb8:	8080000d 	sth	r2,0(r16)
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
     bbc:	80c00115 	stw	r3,4(r16)
	lms_spi_read( base+2, &data ) ;
     bc0:	d80b883a 	mov	r5,sp
     bc4:	00006380 	call	638 <lms_spi_read>
	f->nfrac |= ((uint32_t)data)<<8 ;
     bc8:	d8800003 	ldbu	r2,0(sp)
     bcc:	80c00117 	ldw	r3,4(r16)
	lms_spi_read( base+3, &data) ;
     bd0:	890000c4 	addi	r4,r17,3
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
     bd4:	1004923a 	slli	r2,r2,8
	lms_spi_read( base+3, &data) ;
     bd8:	d80b883a 	mov	r5,sp
     bdc:	21003fcc 	andi	r4,r4,255
	f->nint = ((uint16_t)data) << 1 ;
	lms_spi_read( base+1, &data ) ;
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
     be0:	1886b03a 	or	r3,r3,r2
     be4:	80c00115 	stw	r3,4(r16)
	lms_spi_read( base+3, &data) ;
     be8:	00006380 	call	638 <lms_spi_read>
	f->nfrac |= data ;
     bec:	d8c00003 	ldbu	r3,0(sp)
     bf0:	80800117 	ldw	r2,4(r16)
	lms_spi_read( base+5, &data ) ;
     bf4:	89000144 	addi	r4,r17,5
     bf8:	21003fcc 	andi	r4,r4,255
	f->nint |= (data&0x80)>>7 ;
	f->nfrac = ((uint32_t)data&0x7f)<<16 ;
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
	lms_spi_read( base+3, &data) ;
	f->nfrac |= data ;
     bfc:	10c4b03a 	or	r2,r2,r3
     c00:	80800115 	stw	r2,4(r16)
	lms_spi_read( base+5, &data ) ;
     c04:	d80b883a 	mov	r5,sp
     c08:	00006380 	call	638 <lms_spi_read>
	f->freqsel = (data>>2) ;
     c0c:	d8800003 	ldbu	r2,0(sp)
	f->reference = 38400000 ;
     c10:	00c092b4 	movhi	r3,586
     c14:	18fc0004 	addi	r3,r3,-4096
     c18:	80c00315 	stw	r3,12(r16)
	lms_spi_read( base+2, &data ) ;
	f->nfrac |= ((uint32_t)data)<<8 ;
	lms_spi_read( base+3, &data) ;
	f->nfrac |= data ;
	lms_spi_read( base+5, &data ) ;
	f->freqsel = (data>>2) ;
     c1c:	1004d0ba 	srli	r2,r2,2
     c20:	80800205 	stb	r2,8(r16)
	f->reference = 38400000 ;
	return ;
}
     c24:	dfc00317 	ldw	ra,12(sp)
     c28:	dc400217 	ldw	r17,8(sp)
     c2c:	dc000117 	ldw	r16,4(sp)
     c30:	dec00404 	addi	sp,sp,16
     c34:	f800283a 	ret

00000c38 <lms_tx_disable>:
	return ;
}

// Disable the TX subsystem
void lms_tx_disable( )
{
     c38:	defffd04 	addi	sp,sp,-12
     c3c:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     c40:	04000144 	movi	r16,5
     c44:	8009883a 	mov	r4,r16
     c48:	d80b883a 	mov	r5,sp
	return ;
}

// Disable the TX subsystem
void lms_tx_disable( )
{
     c4c:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     c50:	00006380 	call	638 <lms_spi_read>
	data &= ~(1<<3) ;
     c54:	d8800003 	ldbu	r2,0(sp)
     c58:	00fffdc4 	movi	r3,-9
	lms_spi_write( 0x05, data ) ;
     c5c:	8009883a 	mov	r4,r16
// Disable the TX subsystem
void lms_tx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<3) ;
     c60:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
     c64:	11403dcc 	andi	r5,r2,247
// Disable the TX subsystem
void lms_tx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<3) ;
     c68:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     c6c:	00002500 	call	250 <lms_spi_write>
	return ;
}
     c70:	dfc00217 	ldw	ra,8(sp)
     c74:	dc000117 	ldw	r16,4(sp)
     c78:	dec00304 	addi	sp,sp,12
     c7c:	f800283a 	ret

00000c80 <lms_tx_enable>:
	return ;
}

// Enable the TX subsystem
void lms_tx_enable( )
{
     c80:	defffd04 	addi	sp,sp,-12
     c84:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     c88:	04000144 	movi	r16,5
     c8c:	8009883a 	mov	r4,r16
     c90:	d80b883a 	mov	r5,sp
	return ;
}

// Enable the TX subsystem
void lms_tx_enable( )
{
     c94:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     c98:	00006380 	call	638 <lms_spi_read>
	data |= (1<<3) ;
     c9c:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     ca0:	8009883a 	mov	r4,r16
// Enable the TX subsystem
void lms_tx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<3) ;
     ca4:	10800214 	ori	r2,r2,8
	lms_spi_write( 0x05, data ) ;
     ca8:	11403fcc 	andi	r5,r2,255
// Enable the TX subsystem
void lms_tx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<3) ;
     cac:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     cb0:	00002500 	call	250 <lms_spi_write>
	return ;
}
     cb4:	dfc00217 	ldw	ra,8(sp)
     cb8:	dc000117 	ldw	r16,4(sp)
     cbc:	dec00304 	addi	sp,sp,12
     cc0:	f800283a 	ret

00000cc4 <lms_rx_disable>:
	return ;
}

// Disable the RX subsystem
void lms_rx_disable( )
{
     cc4:	defffd04 	addi	sp,sp,-12
     cc8:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     ccc:	04000144 	movi	r16,5
     cd0:	8009883a 	mov	r4,r16
     cd4:	d80b883a 	mov	r5,sp
	return ;
}

// Disable the RX subsystem
void lms_rx_disable( )
{
     cd8:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     cdc:	00006380 	call	638 <lms_spi_read>
	data &= ~(1<<2) ;
     ce0:	d8800003 	ldbu	r2,0(sp)
     ce4:	00fffec4 	movi	r3,-5
	lms_spi_write( 0x05, data ) ;
     ce8:	8009883a 	mov	r4,r16
// Disable the RX subsystem
void lms_rx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<2) ;
     cec:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
     cf0:	11403ecc 	andi	r5,r2,251
// Disable the RX subsystem
void lms_rx_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<2) ;
     cf4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     cf8:	00002500 	call	250 <lms_spi_write>
	return ;
}
     cfc:	dfc00217 	ldw	ra,8(sp)
     d00:	dc000117 	ldw	r16,4(sp)
     d04:	dec00304 	addi	sp,sp,12
     d08:	f800283a 	ret

00000d0c <lms_rx_enable>:
	return ;
}

// Enable the RX subsystem
void lms_rx_enable( )
{
     d0c:	defffd04 	addi	sp,sp,-12
     d10:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     d14:	04000144 	movi	r16,5
     d18:	8009883a 	mov	r4,r16
     d1c:	d80b883a 	mov	r5,sp
	return ;
}

// Enable the RX subsystem
void lms_rx_enable( )
{
     d20:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     d24:	00006380 	call	638 <lms_spi_read>
	data |= (1<<2) ;
     d28:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     d2c:	8009883a 	mov	r4,r16
// Enable the RX subsystem
void lms_rx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<2) ;
     d30:	10800114 	ori	r2,r2,4
	lms_spi_write( 0x05, data ) ;
     d34:	11403fcc 	andi	r5,r2,255
// Enable the RX subsystem
void lms_rx_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data |= (1<<2) ;
     d38:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     d3c:	00002500 	call	250 <lms_spi_write>
	return ;
}
     d40:	dfc00217 	ldw	ra,8(sp)
     d44:	dc000117 	ldw	r16,4(sp)
     d48:	dec00304 	addi	sp,sp,12
     d4c:	f800283a 	ret

00000d50 <lms_pll_disable>:
	return ;
}

// Disable the PLL of a module
void lms_pll_disable( lms_module_t mod )
{
     d50:	defffd04 	addi	sp,sp,-12
     d54:	dc000115 	stw	r16,4(sp)
     d58:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
     d5c:	04000904 	movi	r16,36
     d60:	20000126 	beq	r4,zero,d68 <lms_pll_disable+0x18>
     d64:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
     d68:	84003fcc 	andi	r16,r16,255
     d6c:	d80b883a 	mov	r5,sp
     d70:	8009883a 	mov	r4,r16
     d74:	00006380 	call	638 <lms_spi_read>
	data &= ~(1<<3) ;
     d78:	d8800003 	ldbu	r2,0(sp)
     d7c:	00fffdc4 	movi	r3,-9
	lms_spi_write( reg, data ) ;
     d80:	8009883a 	mov	r4,r16
void lms_pll_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<3) ;
     d84:	10c4703a 	and	r2,r2,r3
	lms_spi_write( reg, data ) ;
     d88:	11403dcc 	andi	r5,r2,247
void lms_pll_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<3) ;
     d8c:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
     d90:	00002500 	call	250 <lms_spi_write>
	return ;
}
     d94:	dfc00217 	ldw	ra,8(sp)
     d98:	dc000117 	ldw	r16,4(sp)
     d9c:	dec00304 	addi	sp,sp,12
     da0:	f800283a 	ret

00000da4 <lms_pll_enable>:
	return ;
}

// Enable the PLL of a module
void lms_pll_enable( lms_module_t mod )
{
     da4:	defffd04 	addi	sp,sp,-12
     da8:	dc000115 	stw	r16,4(sp)
     dac:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
     db0:	04000904 	movi	r16,36
     db4:	20000126 	beq	r4,zero,dbc <lms_pll_enable+0x18>
     db8:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
     dbc:	84003fcc 	andi	r16,r16,255
     dc0:	d80b883a 	mov	r5,sp
     dc4:	8009883a 	mov	r4,r16
     dc8:	00006380 	call	638 <lms_spi_read>
	data |= (1<<3) ;
     dcc:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
     dd0:	8009883a 	mov	r4,r16
void lms_pll_enable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<3) ;
     dd4:	10800214 	ori	r2,r2,8
	lms_spi_write( reg, data ) ;
     dd8:	11403fcc 	andi	r5,r2,255
void lms_pll_enable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<3) ;
     ddc:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
     de0:	00002500 	call	250 <lms_spi_write>
	return ;
}
     de4:	dfc00217 	ldw	ra,8(sp)
     de8:	dc000117 	ldw	r16,4(sp)
     dec:	dec00304 	addi	sp,sp,12
     df0:	f800283a 	ret

00000df4 <lms_power_down>:
	return ;
}

// Top level power down of the LMS
void lms_power_down( )
{
     df4:	defffd04 	addi	sp,sp,-12
     df8:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     dfc:	04000144 	movi	r16,5
     e00:	8009883a 	mov	r4,r16
     e04:	d80b883a 	mov	r5,sp
	return ;
}

// Top level power down of the LMS
void lms_power_down( )
{
     e08:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
     e0c:	00006380 	call	638 <lms_spi_read>
	data &= ~(1<<4) ;
     e10:	d8800003 	ldbu	r2,0(sp)
     e14:	00fffbc4 	movi	r3,-17
	lms_spi_write( 0x05, data ) ;
     e18:	8009883a 	mov	r4,r16
// Top level power down of the LMS
void lms_power_down( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<4) ;
     e1c:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x05, data ) ;
     e20:	11403bcc 	andi	r5,r2,239
// Top level power down of the LMS
void lms_power_down( )
{
	uint8_t data ;
	lms_spi_read( 0x05, &data ) ;
	data &= ~(1<<4) ;
     e24:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x05, data ) ;
     e28:	00002500 	call	250 <lms_spi_write>
	return ;
}
     e2c:	dfc00217 	ldw	ra,8(sp)
     e30:	dc000117 	ldw	r16,4(sp)
     e34:	dec00304 	addi	sp,sp,12
     e38:	f800283a 	ret

00000e3c <lms_get_loopback_mode>:
	return ;
}

// Figure out what loopback mode we're in (if any at all!)
lms_loopback_mode_t lms_get_loopback_mode( )
{
     e3c:	defffe04 	addi	sp,sp,-8
	uint8_t data ;
	lms_loopback_mode_t mode = LB_NONE ;
	lms_spi_read( 0x08, &data ) ;
     e40:	01000204 	movi	r4,8
     e44:	d80b883a 	mov	r5,sp
	return ;
}

// Figure out what loopback mode we're in (if any at all!)
lms_loopback_mode_t lms_get_loopback_mode( )
{
     e48:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	lms_loopback_mode_t mode = LB_NONE ;
	lms_spi_read( 0x08, &data ) ;
     e4c:	00006380 	call	638 <lms_spi_read>
	if( data == 0 )
     e50:	d8c00003 	ldbu	r3,0(sp)
     e54:	18001926 	beq	r3,zero,ebc <lms_get_loopback_mode+0x80>
	{
		mode = LB_NONE ;
	} else if( data&(1<<6) )
     e58:	1880100c 	andi	r2,r3,64
     e5c:	10000226 	beq	r2,zero,e68 <lms_get_loopback_mode+0x2c>
     e60:	0005883a 	mov	r2,zero
     e64:	00001606 	br	ec0 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_LPF ;
	} else if( data&(1<<5) )
     e68:	1880080c 	andi	r2,r3,32
     e6c:	10000226 	beq	r2,zero,e78 <lms_get_loopback_mode+0x3c>
     e70:	00800044 	movi	r2,1
     e74:	00001206 	br	ec0 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_VGA2 ;
	} else if( data&(1<<4) )
     e78:	1880040c 	andi	r2,r3,16
     e7c:	10000226 	beq	r2,zero,e88 <lms_get_loopback_mode+0x4c>
     e80:	00800084 	movi	r2,2
     e84:	00000e06 	br	ec0 <lms_get_loopback_mode+0x84>
	{
		mode = LB_BB_OP ;
	} else if( (data&0xf) == 1 )
     e88:	18c003cc 	andi	r3,r3,15
     e8c:	00800044 	movi	r2,1
     e90:	1880021e 	bne	r3,r2,e9c <lms_get_loopback_mode+0x60>
     e94:	00800104 	movi	r2,4
     e98:	00000906 	br	ec0 <lms_get_loopback_mode+0x84>
	{
		mode = LB_RF_LNA1 ;
	} else if( (data&0xf) == 2 )
     e9c:	00800084 	movi	r2,2
     ea0:	1880021e 	bne	r3,r2,eac <lms_get_loopback_mode+0x70>
     ea4:	00800144 	movi	r2,5
     ea8:	00000506 	br	ec0 <lms_get_loopback_mode+0x84>
	{
		mode = LB_RF_LNA2 ;
	} else if( (data&0xf) == 3 )
     eac:	008000c4 	movi	r2,3
     eb0:	1880021e 	bne	r3,r2,ebc <lms_get_loopback_mode+0x80>
     eb4:	00800184 	movi	r2,6
     eb8:	00000106 	br	ec0 <lms_get_loopback_mode+0x84>
     ebc:	008001c4 	movi	r2,7
	{
		mode = LB_RF_LNA3 ;
	}
	return mode ;
}
     ec0:	dfc00117 	ldw	ra,4(sp)
     ec4:	dec00204 	addi	sp,sp,8
     ec8:	f800283a 	ret

00000ecc <lms_peakdetect_disable>:
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_disable( )
{
     ecc:	defffd04 	addi	sp,sp,-12
     ed0:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
     ed4:	04001104 	movi	r16,68
     ed8:	8009883a 	mov	r4,r16
     edc:	d80b883a 	mov	r5,sp
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_disable( )
{
     ee0:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
     ee4:	00006380 	call	638 <lms_spi_read>
	data |= (1<<0) ;
     ee8:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
     eec:	8009883a 	mov	r4,r16

void lms_peakdetect_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data |= (1<<0) ;
     ef0:	10800054 	ori	r2,r2,1
	lms_spi_write( 0x44, data ) ;
     ef4:	11403fcc 	andi	r5,r2,255

void lms_peakdetect_disable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data |= (1<<0) ;
     ef8:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
     efc:	00002500 	call	250 <lms_spi_write>
	return ;
}
     f00:	dfc00217 	ldw	ra,8(sp)
     f04:	dc000117 	ldw	r16,4(sp)
     f08:	dec00304 	addi	sp,sp,12
     f0c:	f800283a 	ret

00000f10 <lms_peakdetect_enable>:
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_enable( )
{
     f10:	defffd04 	addi	sp,sp,-12
     f14:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
     f18:	04001104 	movi	r16,68
     f1c:	8009883a 	mov	r4,r16
     f20:	d80b883a 	mov	r5,sp
	lms_spi_write( 0x44, data ) ;
	return ;
}

void lms_peakdetect_enable( )
{
     f24:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
     f28:	00006380 	call	638 <lms_spi_read>
	data &= ~(1<<0) ;
     f2c:	d8800003 	ldbu	r2,0(sp)
     f30:	00ffff84 	movi	r3,-2
	lms_spi_write( 0x44, data ) ;
     f34:	8009883a 	mov	r4,r16

void lms_peakdetect_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data &= ~(1<<0) ;
     f38:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x44, data ) ;
     f3c:	11403f8c 	andi	r5,r2,254

void lms_peakdetect_enable( )
{
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
	data &= ~(1<<0) ;
     f40:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x44, data ) ;
     f44:	00002500 	call	250 <lms_spi_write>
	return ;
}
     f48:	dfc00217 	ldw	ra,8(sp)
     f4c:	dc000117 	ldw	r16,4(sp)
     f50:	dec00304 	addi	sp,sp,12
     f54:	f800283a 	ret

00000f58 <lms_pa_disable>:
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
     f58:	defffd04 	addi	sp,sp,-12
     f5c:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
     f60:	d80b883a 	mov	r5,sp
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
     f64:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
     f68:	01001104 	movi	r4,68
	return ;
}

// Disable PA
void lms_pa_disable( lms_pa_t pa )
{
     f6c:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
     f70:	00006380 	call	638 <lms_spi_read>
	if( pa == PA_ALL )
     f74:	008000c4 	movi	r2,3
     f78:	8080041e 	bne	r16,r2,f8c <lms_pa_disable+0x34>
	{
		data |= (1<<1) ;
		data &= ~(4<<2) ;
		data &= ~(2<<2) ;
     f7c:	d8800003 	ldbu	r2,0(sp)
     f80:	10800094 	ori	r2,r2,2
     f84:	108039cc 	andi	r2,r2,231
     f88:	00000a06 	br	fb4 <lms_pa_disable+0x5c>
	} else if( pa == PA_AUX )
     f8c:	8000031e 	bne	r16,zero,f9c <lms_pa_disable+0x44>
	{
		data |= (1<<1) ;
     f90:	d8800003 	ldbu	r2,0(sp)
     f94:	10800094 	ori	r2,r2,2
     f98:	00000606 	br	fb4 <lms_pa_disable+0x5c>
	} else if( pa == PA_1 )
     f9c:	00800044 	movi	r2,1
     fa0:	d8c00003 	ldbu	r3,0(sp)
     fa4:	8080021e 	bne	r16,r2,fb0 <lms_pa_disable+0x58>
	{
		data &= ~(4<<2) ;
     fa8:	18803bcc 	andi	r2,r3,239
     fac:	00000106 	br	fb4 <lms_pa_disable+0x5c>
	} else { // pa == PA_2
		data &= ~(2<<2) ;
     fb0:	18803dcc 	andi	r2,r3,247
     fb4:	d8800005 	stb	r2,0(sp)
	}
	lms_spi_write( 0x44, data ) ;
     fb8:	d9400003 	ldbu	r5,0(sp)
     fbc:	01001104 	movi	r4,68
     fc0:	00002500 	call	250 <lms_spi_write>
	return ;
}
     fc4:	dfc00217 	ldw	ra,8(sp)
     fc8:	dc000117 	ldw	r16,4(sp)
     fcc:	dec00304 	addi	sp,sp,12
     fd0:	f800283a 	ret

00000fd4 <lms_tx_loopback_disable>:
	return ;
}

// Disable TX loopback
void lms_tx_loopback_disable( lms_txlb_t mode )
{
     fd4:	defffe04 	addi	sp,sp,-8
     fd8:	2007883a 	mov	r3,r4
     fdc:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
     fe0:	d80b883a 	mov	r5,sp
     fe4:	01001184 	movi	r4,70

// Disable TX loopback
void lms_tx_loopback_disable( lms_txlb_t mode )
{
	uint8_t data ;
	switch(mode)
     fe8:	18000326 	beq	r3,zero,ff8 <lms_tx_loopback_disable+0x24>
     fec:	00800044 	movi	r2,1
     ff0:	1880181e 	bne	r3,r2,1054 <lms_tx_loopback_disable+0x80>
     ff4:	00000806 	br	1018 <lms_tx_loopback_disable+0x44>
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
     ff8:	00006380 	call	638 <lms_spi_read>
			data &= ~(3<<2) ;
     ffc:	d8800003 	ldbu	r2,0(sp)
    1000:	00fffcc4 	movi	r3,-13
			lms_spi_write( 0x46, data ) ;
    1004:	01001184 	movi	r4,70
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data &= ~(3<<2) ;
    1008:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x46, data ) ;
    100c:	11403ccc 	andi	r5,r2,243
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data &= ~(3<<2) ;
    1010:	d8800005 	stb	r2,0(sp)
    1014:	00000e06 	br	1050 <lms_tx_loopback_disable+0x7c>
			lms_spi_write( 0x46, data ) ;
			break ;
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
    1018:	0009883a 	mov	r4,zero
    101c:	0000f580 	call	f58 <lms_pa_disable>
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
    1020:	d80b883a 	mov	r5,sp
    1024:	010002c4 	movi	r4,11
    1028:	00006380 	call	638 <lms_spi_read>
			data &= ~(1<<0) ;
    102c:	d8800003 	ldbu	r2,0(sp)
    1030:	00ffff84 	movi	r3,-2
			lms_spi_write( 0x0b, data ) ;
    1034:	010002c4 	movi	r4,11
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
			data &= ~(1<<0) ;
    1038:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x0b, data ) ;
    103c:	11403f8c 	andi	r5,r2,254
		case TXLB_RF:
			// Disable the AUX PA
			lms_pa_disable( PA_AUX ) ;
			// Disconnect the switch
			lms_spi_read( 0x0b, &data ) ;
			data &= ~(1<<0) ;
    1040:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    1044:	00002500 	call	250 <lms_spi_write>
            // Power up the LNA's
            lms_spi_write( 0x70, 0 ) ;
    1048:	01001c04 	movi	r4,112
    104c:	000b883a 	mov	r5,zero
    1050:	00002500 	call	250 <lms_spi_write>
			break ;
	}
	return ;
}
    1054:	dfc00117 	ldw	ra,4(sp)
    1058:	dec00204 	addi	sp,sp,8
    105c:	f800283a 	ret

00001060 <lms_pa_enable>:
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    1060:	defffd04 	addi	sp,sp,-12
    1064:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1068:	d80b883a 	mov	r5,sp
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    106c:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1070:	01001104 	movi	r4,68
	return ;
}

// Enable PA (PA_ALL is NOT valid for enabling)
void lms_pa_enable( lms_pa_t pa )
{
    1074:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x44, &data ) ;
    1078:	00006380 	call	638 <lms_spi_read>
	if( pa == PA_AUX )
    107c:	8000031e 	bne	r16,zero,108c <lms_pa_enable+0x2c>
	{
		data &= ~(1<<1) ;
    1080:	d8800003 	ldbu	r2,0(sp)
    1084:	10803f4c 	andi	r2,r2,253
    1088:	00000d06 	br	10c0 <lms_pa_enable+0x60>
	} else if( pa == PA_1 )
    108c:	00800044 	movi	r2,1
    1090:	8080051e 	bne	r16,r2,10a8 <lms_pa_enable+0x48>
	{
		data &= ~(3<<2) ;
		data |= (2<<1) ;
    1094:	d8800003 	ldbu	r2,0(sp)
    1098:	00fffcc4 	movi	r3,-13
    109c:	10c4703a 	and	r2,r2,r3
    10a0:	10800114 	ori	r2,r2,4
    10a4:	00000606 	br	10c0 <lms_pa_enable+0x60>
	} else if( pa == PA_2 )
    10a8:	00800084 	movi	r2,2
    10ac:	8080051e 	bne	r16,r2,10c4 <lms_pa_enable+0x64>
	{
		data &= ~(3<<2) ;
		data |= (4<<1) ;
    10b0:	d8800003 	ldbu	r2,0(sp)
    10b4:	00fffcc4 	movi	r3,-13
    10b8:	10c4703a 	and	r2,r2,r3
    10bc:	10800214 	ori	r2,r2,8
    10c0:	d8800005 	stb	r2,0(sp)
	}
	lms_spi_write( 0x44, data ) ;
    10c4:	d9400003 	ldbu	r5,0(sp)
    10c8:	01001104 	movi	r4,68
    10cc:	00002500 	call	250 <lms_spi_write>
	return ;
}
    10d0:	dfc00217 	ldw	ra,8(sp)
    10d4:	dc000117 	ldw	r16,4(sp)
    10d8:	dec00304 	addi	sp,sp,12
    10dc:	f800283a 	ret

000010e0 <lms_tx_loopback_enable>:
	return ;
}

// Enable TX loopback
void lms_tx_loopback_enable( lms_txlb_t mode )
{
    10e0:	defffd04 	addi	sp,sp,-12
    10e4:	dc000115 	stw	r16,4(sp)
    10e8:	2021883a 	mov	r16,r4
    10ec:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    10f0:	d80b883a 	mov	r5,sp
    10f4:	01001184 	movi	r4,70

// Enable TX loopback
void lms_tx_loopback_enable( lms_txlb_t mode )
{
	uint8_t data ;
	switch(mode)
    10f8:	80000326 	beq	r16,zero,1108 <lms_tx_loopback_enable+0x28>
    10fc:	00800044 	movi	r2,1
    1100:	80801f1e 	bne	r16,r2,1180 <lms_tx_loopback_enable+0xa0>
    1104:	00000606 	br	1120 <lms_tx_loopback_enable+0x40>
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
    1108:	00006380 	call	638 <lms_spi_read>
			data |= (3<<2) ;
    110c:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x46, data ) ;
    1110:	01001184 	movi	r4,70
	uint8_t data ;
	switch(mode)
	{
		case TXLB_BB:
			lms_spi_read( 0x46, &data ) ;
			data |= (3<<2) ;
    1114:	10800314 	ori	r2,r2,12
			lms_spi_write( 0x46, data ) ;
    1118:	11403fcc 	andi	r5,r2,255
    111c:	00001606 	br	1178 <lms_tx_loopback_enable+0x98>
			break ;
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
    1120:	010000c4 	movi	r4,3
    1124:	0000f580 	call	f58 <lms_pa_disable>
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
    1128:	d80b883a 	mov	r5,sp
    112c:	010002c4 	movi	r4,11
    1130:	00006380 	call	638 <lms_spi_read>
			data |= (1<<0) ;
    1134:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    1138:	010002c4 	movi	r4,11
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
			data |= (1<<0) ;
    113c:	8084b03a 	or	r2,r16,r2
			lms_spi_write( 0x0b, data ) ;
    1140:	11403fcc 	andi	r5,r2,255
		case TXLB_RF:
			// Disable all the PA's first
			lms_pa_disable( PA_ALL ) ;
			// Connect up the switch
			lms_spi_read( 0x0b, &data ) ;
			data |= (1<<0) ;
    1144:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x0b, data ) ;
    1148:	00002500 	call	250 <lms_spi_write>
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
    114c:	0009883a 	mov	r4,zero
    1150:	00010600 	call	1060 <lms_pa_enable>
			lms_peakdetect_enable( );
    1154:	0000f100 	call	f10 <lms_peakdetect_enable>
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
    1158:	01001144 	movi	r4,69
    115c:	d80b883a 	mov	r5,sp
    1160:	00006380 	call	638 <lms_spi_read>
			data &= ~(7<<0) ;
    1164:	d8800003 	ldbu	r2,0(sp)
    1168:	00fffe04 	movi	r3,-8
			lms_spi_write( 0x45, data ) ;
    116c:	01001144 	movi	r4,69
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
			lms_peakdetect_enable( );
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
			data &= ~(7<<0) ;
    1170:	10c4703a 	and	r2,r2,r3
			lms_spi_write( 0x45, data ) ;
    1174:	11403e0c 	andi	r5,r2,248
			// Enable the AUX PA only
			lms_pa_enable( PA_AUX ) ;
			lms_peakdetect_enable( );
			// Make sure we're muxed over to the AUX mux
			lms_spi_read( 0x45, &data ) ;
			data &= ~(7<<0) ;
    1178:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x45, data ) ;
    117c:	00002500 	call	250 <lms_spi_write>
			break ;
	}
	return ;
}
    1180:	dfc00217 	ldw	ra,8(sp)
    1184:	dc000117 	ldw	r16,4(sp)
    1188:	dec00304 	addi	sp,sp,12
    118c:	f800283a 	ret

00001190 <lms_rxvga2_enable>:
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    1190:	defffc04 	addi	sp,sp,-16
    1194:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    1198:	04001904 	movi	r16,100
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    119c:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    11a0:	d80b883a 	mov	r5,sp
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    11a4:	2023883a 	mov	r17,r4
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    11a8:	8009883a 	mov	r4,r16
	return ;
}

// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
    11ac:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    11b0:	00006380 	call	638 <lms_spi_read>
	data |= (1<<1) ;
    11b4:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    11b8:	8009883a 	mov	r4,r16
// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data |= (1<<1) ;
    11bc:	10800094 	ori	r2,r2,2
	lms_spi_write( 0x64, data ) ;
    11c0:	11403fcc 	andi	r5,r2,255
// Enable RXVGA2
void lms_rxvga2_enable( uint8_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data |= (1<<1) ;
    11c4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    11c8:	00002500 	call	250 <lms_spi_write>
	lms_rxvga2_set_gain( gain ) ;
    11cc:	89003fcc 	andi	r4,r17,255
    11d0:	00005980 	call	598 <lms_rxvga2_set_gain>
	return ;
}
    11d4:	dfc00317 	ldw	ra,12(sp)
    11d8:	dc400217 	ldw	r17,8(sp)
    11dc:	dc000117 	ldw	r16,4(sp)
    11e0:	dec00404 	addi	sp,sp,16
    11e4:	f800283a 	ret

000011e8 <lms_rxvga2_disable>:
	return ;
}

// Disable RXVGA2
void lms_rxvga2_disable()
{
    11e8:	defffd04 	addi	sp,sp,-12
    11ec:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    11f0:	04001904 	movi	r16,100
    11f4:	8009883a 	mov	r4,r16
    11f8:	d80b883a 	mov	r5,sp
	return ;
}

// Disable RXVGA2
void lms_rxvga2_disable()
{
    11fc:	dfc00215 	stw	ra,8(sp)
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
    1200:	00006380 	call	638 <lms_spi_read>
	data &= ~(1<<1) ;
    1204:	d8800003 	ldbu	r2,0(sp)
    1208:	00ffff44 	movi	r3,-3
	lms_spi_write( 0x64, data ) ;
    120c:	8009883a 	mov	r4,r16
// Disable RXVGA2
void lms_rxvga2_disable()
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data &= ~(1<<1) ;
    1210:	10c4703a 	and	r2,r2,r3
	lms_spi_write( 0x64, data ) ;
    1214:	11403f4c 	andi	r5,r2,253
// Disable RXVGA2
void lms_rxvga2_disable()
{
	uint8_t data ;
	lms_spi_read( 0x64, &data ) ;
	data &= ~(1<<1) ;
    1218:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x64, data ) ;
    121c:	00002500 	call	250 <lms_spi_write>
	return ;
}
    1220:	dfc00217 	ldw	ra,8(sp)
    1224:	dc000117 	ldw	r16,4(sp)
    1228:	dec00304 	addi	sp,sp,12
    122c:	f800283a 	ret

00001230 <lms_lna_select>:
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    1230:	defffc04 	addi	sp,sp,-16
    1234:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1238:	04401d44 	movi	r17,117
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    123c:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1240:	d80b883a 	mov	r5,sp
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    1244:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1248:	8809883a 	mov	r4,r17
	return ;
}

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
    124c:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1250:	840000cc 	andi	r16,r16,3

// Select which LNA to enable
void lms_lna_select( lms_lna_t lna )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
    1254:	00006380 	call	638 <lms_spi_read>
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1258:	d8800003 	ldbu	r2,0(sp)
    125c:	8020913a 	slli	r16,r16,4
    1260:	00fff3c4 	movi	r3,-49
    1264:	10c4703a 	and	r2,r2,r3
    1268:	1404b03a 	or	r2,r2,r16
	lms_spi_write( 0x75, data ) ;
    126c:	8809883a 	mov	r4,r17
    1270:	11403fcc 	andi	r5,r2,255
void lms_lna_select( lms_lna_t lna )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ; 
	data &= ~(3<<4) ;
	data |= ((lna&3)<<4) ;
    1274:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x75, data ) ;
    1278:	00002500 	call	250 <lms_spi_write>
	return ;
}
    127c:	dfc00317 	ldw	ra,12(sp)
    1280:	dc400217 	ldw	r17,8(sp)
    1284:	dc000117 	ldw	r16,4(sp)
    1288:	dec00404 	addi	sp,sp,16
    128c:	f800283a 	ret

00001290 <lms_loopback_enable>:
	return ;
}

// Loopback enable
void lms_loopback_enable( lms_loopback_mode_t mode )
{
    1290:	defffd04 	addi	sp,sp,-12
	uint8_t data ;
	switch(mode)
    1294:	00800184 	movi	r2,6
	return ;
}

// Loopback enable
void lms_loopback_enable( lms_loopback_mode_t mode )
{
    1298:	dc000115 	stw	r16,4(sp)
    129c:	dfc00215 	stw	ra,8(sp)
    12a0:	2021883a 	mov	r16,r4
	uint8_t data ;
	switch(mode)
    12a4:	11003636 	bltu	r2,r4,1380 <lms_loopback_enable+0xf0>
    12a8:	2105883a 	add	r2,r4,r4
    12ac:	1085883a 	add	r2,r2,r2
    12b0:	00c00034 	movhi	r3,0
    12b4:	18c4b104 	addi	r3,r3,4804
    12b8:	10c5883a 	add	r2,r2,r3
    12bc:	10800017 	ldw	r2,0(r2)
    12c0:	1000683a 	jmp	r2
    12c4:	000012e0 	cmpeqi	zero,zero,75
    12c8:	000012f4 	movhi	zero,75
    12cc:	0000130c 	andi	zero,zero,76
    12d0:	00001380 	call	138 <main+0xdc>
    12d4:	00001330 	cmpltui	zero,zero,76
    12d8:	00001330 	cmpltui	zero,zero,76
    12dc:	00001330 	cmpltui	zero,zero,76
	{
		case LB_BB_LPF:
			// Disable RXVGA1 first
			lms_rxvga1_disable() ;
    12e0:	00005e00 	call	5e0 <lms_rxvga1_disable>

			// Enable BB TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    12e4:	0009883a 	mov	r4,zero
    12e8:	00010e00 	call	10e0 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<6 ) ;
    12ec:	01401004 	movi	r5,64
    12f0:	00000d06 	br	1328 <lms_loopback_enable+0x98>
			break ;

		case LB_BB_VGA2:
			// Disable RXLPF first
			lms_lpf_disable( RX ) ;
    12f4:	0009883a 	mov	r4,zero
    12f8:	00006200 	call	620 <lms_lpf_disable>

			// Enable TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    12fc:	0009883a 	mov	r4,zero
    1300:	00010e00 	call	10e0 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<5 ) ;
    1304:	01400804 	movi	r5,32
    1308:	00000706 	br	1328 <lms_loopback_enable+0x98>
			break ;

		case LB_BB_OP:
			// Disable RXLPF, RXVGA2, and RXVGA1
			lms_rxvga1_disable() ;
    130c:	00005e00 	call	5e0 <lms_rxvga1_disable>
			lms_rxvga2_disable() ;
    1310:	00011e80 	call	11e8 <lms_rxvga2_disable>
			lms_lpf_disable( RX ) ;
    1314:	0009883a 	mov	r4,zero
    1318:	00006200 	call	620 <lms_lpf_disable>

			// Enable TX and RX loopback
			lms_tx_loopback_enable( TXLB_BB ) ;
    131c:	0009883a 	mov	r4,zero
    1320:	00010e00 	call	10e0 <lms_tx_loopback_enable>
			lms_spi_write( 0x08, 1<<4 ) ;
    1324:	01400404 	movi	r5,16
    1328:	01000204 	movi	r4,8
    132c:	00001306 	br	137c <lms_loopback_enable+0xec>

		case LB_RF_LNA1:
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable all LNAs
			lms_lna_select( LNA_NONE ) ;
    1330:	0009883a 	mov	r4,zero
    1334:	00012300 	call	1230 <lms_lna_select>

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
    1338:	01000044 	movi	r4,1
    133c:	00010e00 	call	10e0 <lms_tx_loopback_enable>
			lms_spi_read( 0x7d, &data ) ;
    1340:	d80b883a 	mov	r5,sp
    1344:	01001f44 	movi	r4,125
    1348:	00006380 	call	638 <lms_spi_read>
			data |= 1 ;
    134c:	d8800003 	ldbu	r2,0(sp)
			lms_spi_write( 0x7d, data ) ;
    1350:	01001f44 	movi	r4,125
			lms_lna_select( LNA_NONE ) ;

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
			lms_spi_read( 0x7d, &data ) ;
			data |= 1 ;
    1354:	10800054 	ori	r2,r2,1
			lms_spi_write( 0x7d, data ) ;
    1358:	11403fcc 	andi	r5,r2,255
			lms_lna_select( LNA_NONE ) ;

			// Enable AUX PA, PD[0], and loopback
			lms_tx_loopback_enable( TXLB_RF ) ;
			lms_spi_read( 0x7d, &data ) ;
			data |= 1 ;
    135c:	d8800005 	stb	r2,0(sp)
			lms_spi_write( 0x7d, data ) ;
    1360:	00002500 	call	250 <lms_spi_write>

            // Choose the LNA (1 = LNA1, 2 = LNA2, 3 = LNA3)
            lms_spi_write( 0x08, (mode - LB_RF_LNA_START) ) ;
    1364:	817fff44 	addi	r5,r16,-3
    1368:	29403fcc 	andi	r5,r5,255
    136c:	01000204 	movi	r4,8
    1370:	00002500 	call	250 <lms_spi_write>

            // Set magical decode test registers bit
            lms_spi_write( 0x70, (1<<1) ) ;
    1374:	01001c04 	movi	r4,112
    1378:	01400084 	movi	r5,2
    137c:	00002500 	call	250 <lms_spi_write>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1380:	dfc00217 	ldw	ra,8(sp)
    1384:	dc000117 	ldw	r16,4(sp)
    1388:	dec00304 	addi	sp,sp,12
    138c:	f800283a 	ret

00001390 <lms_config_init>:
	return ;
}


int lms_config_init(xcvr_config_t *config)
{
    1390:	defffd04 	addi	sp,sp,-12
    1394:	dfc00215 	stw	ra,8(sp)
    1398:	dc400115 	stw	r17,4(sp)
    139c:	dc000015 	stw	r16,0(sp)
    13a0:	2023883a 	mov	r17,r4

  lms_tx_enable() ;
  lms_rx_enable() ;

  lms_spi_write( 0x48, 0xc ) ;
    13a4:	04000304 	movi	r16,12


int lms_config_init(xcvr_config_t *config)
{

  lms_tx_enable() ;
    13a8:	0000c800 	call	c80 <lms_tx_enable>
  lms_rx_enable() ;
    13ac:	0000d0c0 	call	d0c <lms_rx_enable>

  lms_spi_write( 0x48, 0xc ) ;
    13b0:	800b883a 	mov	r5,r16
    13b4:	01001204 	movi	r4,72
    13b8:	00002500 	call	250 <lms_spi_write>
  lms_spi_write( 0x49, 0xc ) ;
    13bc:	800b883a 	mov	r5,r16
    13c0:	01001244 	movi	r4,73
    13c4:	00002500 	call	250 <lms_spi_write>

  lms_set_frequency( RX,  config->rx_freq_hz ) ;
    13c8:	89400117 	ldw	r5,4(r17)
    13cc:	0009883a 	mov	r4,zero
    13d0:	00007500 	call	750 <lms_set_frequency>
  lms_set_frequency( TX,  config->tx_freq_hz ) ;
    13d4:	89400017 	ldw	r5,0(r17)
    13d8:	01000044 	movi	r4,1
    13dc:	00007500 	call	750 <lms_set_frequency>

  lms_lna_select( config->lna  ) ;
    13e0:	89000317 	ldw	r4,12(r17)
    13e4:	00012300 	call	1230 <lms_lna_select>
  lms_pa_enable( config->pa ) ;
    13e8:	89000417 	ldw	r4,16(r17)
    13ec:	00010600 	call	1060 <lms_pa_enable>

  lms_loopback_enable(config->loopback_mode);
    13f0:	89000217 	ldw	r4,8(r17)
    13f4:	00012900 	call	1290 <lms_loopback_enable>

  return 0;
}
    13f8:	0005883a 	mov	r2,zero
    13fc:	dfc00217 	ldw	ra,8(sp)
    1400:	dc400117 	ldw	r17,4(sp)
    1404:	dc000017 	ldw	r16,0(sp)
    1408:	dec00304 	addi	sp,sp,12
    140c:	f800283a 	ret

00001410 <lms_lna_set_gain>:
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    1410:	defffc04 	addi	sp,sp,-16
    1414:	dc400215 	stw	r17,8(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    1418:	04401d44 	movi	r17,117
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    141c:	dc000115 	stw	r16,4(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    1420:	d80b883a 	mov	r5,sp
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    1424:	2021883a 	mov	r16,r4
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    1428:	8809883a 	mov	r4,r17
	return ;
}

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
    142c:	dfc00315 	stw	ra,12(sp)
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1430:	840000cc 	andi	r16,r16,3

// Set the gain on the LNA
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
    1434:	00006380 	call	638 <lms_spi_read>
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1438:	d8800003 	ldbu	r2,0(sp)
    143c:	802091ba 	slli	r16,r16,6
	lms_spi_write( 0x75, data ) ;
    1440:	8809883a 	mov	r4,r17
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1444:	10800fcc 	andi	r2,r2,63
    1448:	1404b03a 	or	r2,r2,r16
	lms_spi_write( 0x75, data ) ;
    144c:	100b883a 	mov	r5,r2
void lms_lna_set_gain( lms_lna_gain_t gain )
{
	uint8_t data ;
	lms_spi_read( 0x75, &data ) ;
	data &= ~(3<<6) ;
	data |= ((gain&3)<<6) ;
    1450:	d8800005 	stb	r2,0(sp)
	lms_spi_write( 0x75, data ) ;
    1454:	00002500 	call	250 <lms_spi_write>
	return ;
}
    1458:	dfc00317 	ldw	ra,12(sp)
    145c:	dc400217 	ldw	r17,8(sp)
    1460:	dc000117 	ldw	r16,4(sp)
    1464:	dec00404 	addi	sp,sp,16
    1468:	f800283a 	ret

0000146c <lms_dither_disable>:
	return ;
}

// Disable dithering on the module PLL
void lms_dither_disable( lms_module_t mod )
{
    146c:	defffd04 	addi	sp,sp,-12
    1470:	dc000115 	stw	r16,4(sp)
    1474:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    1478:	04000904 	movi	r16,36
    147c:	20000126 	beq	r4,zero,1484 <lms_dither_disable+0x18>
    1480:	04000504 	movi	r16,20
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
    1484:	84003fcc 	andi	r16,r16,255
    1488:	d80b883a 	mov	r5,sp
    148c:	8009883a 	mov	r4,r16
    1490:	00006380 	call	638 <lms_spi_read>
	data &= ~(1<<7) ;
    1494:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1498:	8009883a 	mov	r4,r16
void lms_dither_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<7) ;
    149c:	10801fcc 	andi	r2,r2,127
	lms_spi_write( reg, data ) ;
    14a0:	100b883a 	mov	r5,r2
void lms_dither_disable( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data &= ~(1<<7) ;
    14a4:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
    14a8:	00002500 	call	250 <lms_spi_write>
	return ;
}
    14ac:	dfc00217 	ldw	ra,8(sp)
    14b0:	dc000117 	ldw	r16,4(sp)
    14b4:	dec00304 	addi	sp,sp,12
    14b8:	f800283a 	ret

000014bc <lms_dither_enable>:
	return (lms_bw_t)data ;
}

// Enable dithering on the module PLL
void lms_dither_enable( lms_module_t mod, uint8_t nbits )
{
    14bc:	defffc04 	addi	sp,sp,-16
    14c0:	dc400215 	stw	r17,8(sp)
    14c4:	dc000115 	stw	r16,4(sp)
    14c8:	dfc00315 	stw	ra,12(sp)
	// Select the base address based on which PLL we are configuring
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    14cc:	04000904 	movi	r16,36
	return (lms_bw_t)data ;
}

// Enable dithering on the module PLL
void lms_dither_enable( lms_module_t mod, uint8_t nbits )
{
    14d0:	2823883a 	mov	r17,r5
	// Select the base address based on which PLL we are configuring
	uint8_t reg = (mod == RX) ? 0x24 : 0x14 ;
    14d4:	20000126 	beq	r4,zero,14dc <lms_dither_enable+0x20>
    14d8:	04000504 	movi	r16,20
	uint8_t data ;

	// Read what we currently have in there
	lms_spi_read( reg, &data ) ;
    14dc:	84003fcc 	andi	r16,r16,255
    14e0:	d80b883a 	mov	r5,sp
    14e4:	8009883a 	mov	r4,r16
    14e8:	00006380 	call	638 <lms_spi_read>

	// Clear out the number of bits from before
	data &= ~(7<<4) ;

	// Put in the number of bits to dither
	data |= ((nbits-1)&7) ;
    14ec:	d8800003 	ldbu	r2,0(sp)
    14f0:	00ffe004 	movi	r3,-128
    14f4:	893fffc4 	addi	r4,r17,-1
    14f8:	10c4b03a 	or	r2,r2,r3
    14fc:	00ffe3c4 	movi	r3,-113
    1500:	10c4703a 	and	r2,r2,r3
    1504:	210001cc 	andi	r4,r4,7
    1508:	1104b03a 	or	r2,r2,r4

	// Write it out
	lms_spi_write( reg, data ) ;
    150c:	114023cc 	andi	r5,r2,143
    1510:	8009883a 	mov	r4,r16

	// Clear out the number of bits from before
	data &= ~(7<<4) ;

	// Put in the number of bits to dither
	data |= ((nbits-1)&7) ;
    1514:	d8800005 	stb	r2,0(sp)

	// Write it out
	lms_spi_write( reg, data ) ;
    1518:	00002500 	call	250 <lms_spi_write>
	return ;
}
    151c:	dfc00317 	ldw	ra,12(sp)
    1520:	dc400217 	ldw	r17,8(sp)
    1524:	dc000117 	ldw	r16,4(sp)
    1528:	dec00404 	addi	sp,sp,16
    152c:	f800283a 	ret

00001530 <lms_get_bandwidth>:
	return ;
}

// Get the bandwidth for the selected module
lms_bw_t lms_get_bandwidth( lms_module_t mod )
{
    1530:	defffe04 	addi	sp,sp,-8
    1534:	dfc00115 	stw	ra,4(sp)
	uint8_t data ;
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    1538:	00801504 	movi	r2,84
    153c:	20000126 	beq	r4,zero,1544 <lms_get_bandwidth+0x14>
    1540:	00800d04 	movi	r2,52
	lms_spi_read( reg, &data ) ;
    1544:	11003fcc 	andi	r4,r2,255
    1548:	d80b883a 	mov	r5,sp
    154c:	00006380 	call	638 <lms_spi_read>
    1550:	d8800003 	ldbu	r2,0(sp)
    1554:	10800f0c 	andi	r2,r2,60
	data &= 0x3c ;
	data >>= 2 ;
	return (lms_bw_t)data ;
}
    1558:	1004d0ba 	srli	r2,r2,2
    155c:	dfc00117 	ldw	ra,4(sp)
    1560:	dec00204 	addi	sp,sp,8
    1564:	f800283a 	ret

00001568 <lms_lpf_bypass>:
	}
	return ;
}

void lms_lpf_bypass( lms_module_t mod )
{
    1568:	defffd04 	addi	sp,sp,-12
    156c:	dc000115 	stw	r16,4(sp)
    1570:	dfc00215 	stw	ra,8(sp)
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
    1574:	04001544 	movi	r16,85
    1578:	20000126 	beq	r4,zero,1580 <lms_lpf_bypass+0x18>
    157c:	04000d44 	movi	r16,53
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
    1580:	84003fcc 	andi	r16,r16,255
    1584:	d80b883a 	mov	r5,sp
    1588:	8009883a 	mov	r4,r16
    158c:	00006380 	call	638 <lms_spi_read>
	data |= (1<<6) ;
    1590:	d8800003 	ldbu	r2,0(sp)
	lms_spi_write( reg, data ) ;
    1594:	8009883a 	mov	r4,r16
void lms_lpf_bypass( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<6) ;
    1598:	10801014 	ori	r2,r2,64
	lms_spi_write( reg, data ) ;
    159c:	11403fcc 	andi	r5,r2,255
void lms_lpf_bypass( lms_module_t mod )
{
	uint8_t reg = (mod == RX) ? 0x55 : 0x35 ;
	uint8_t data ;
	lms_spi_read( reg, &data ) ;
	data |= (1<<6) ;
    15a0:	d8800005 	stb	r2,0(sp)
	lms_spi_write( reg, data ) ;
    15a4:	00002500 	call	250 <lms_spi_write>
	return ;
}
    15a8:	dfc00217 	ldw	ra,8(sp)
    15ac:	dc000117 	ldw	r16,4(sp)
    15b0:	dec00304 	addi	sp,sp,12
    15b4:	f800283a 	ret

000015b8 <lms_lpf_enable>:
	return ;
}

// When enabling an LPF, we must select both the module and the filter bandwidth
void lms_lpf_enable( lms_module_t mod, lms_bw_t bw )
{
    15b8:	defffb04 	addi	sp,sp,-20
    15bc:	dc800315 	stw	r18,12(sp)
    15c0:	dc400215 	stw	r17,8(sp)
    15c4:	dfc00415 	stw	ra,16(sp)
    15c8:	dc000115 	stw	r16,4(sp)
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    15cc:	04801504 	movi	r18,84
	return ;
}

// When enabling an LPF, we must select both the module and the filter bandwidth
void lms_lpf_enable( lms_module_t mod, lms_bw_t bw )
{
    15d0:	2823883a 	mov	r17,r5
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
    15d4:	20000126 	beq	r4,zero,15dc <lms_lpf_enable+0x24>
    15d8:	04800d04 	movi	r18,52
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
    15dc:	94003fcc 	andi	r16,r18,255
    15e0:	d80b883a 	mov	r5,sp
    15e4:	8009883a 	mov	r4,r16
    15e8:	00006380 	call	638 <lms_spi_read>
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    15ec:	d9800003 	ldbu	r6,0(sp)
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
    15f0:	00bff0c4 	movi	r2,-61
    15f4:	8c47883a 	add	r3,r17,r17
    15f8:	3084703a 	and	r2,r6,r2
    15fc:	18c7883a 	add	r3,r3,r3
    1600:	10800094 	ori	r2,r2,2
    1604:	1886b03a 	or	r3,r3,r2
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    1608:	318003cc 	andi	r6,r6,15
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
    160c:	8009883a 	mov	r4,r16
    1610:	19403fcc 	andi	r5,r3,255
{
	uint8_t reg = (mod == RX) ? 0x54 : 0x34 ;
	uint8_t data ;
	// Check to see which bandwidth we have selected
	lms_spi_read( reg, &data ) ;
	if( (lms_bw_t)(data&0x3c>>2) != bw )
    1614:	34400226 	beq	r6,r17,1620 <lms_lpf_enable+0x68>
	{
		data &= ~0x3c ;
		data |= (bw<<2) ;
		data |= (1<<1) ;
    1618:	d8c00005 	stb	r3,0(sp)
		lms_spi_write( reg, data ) ;
    161c:	00002500 	call	250 <lms_spi_write>
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
    1620:	94000044 	addi	r16,r18,1
    1624:	84003fcc 	andi	r16,r16,255
    1628:	d80b883a 	mov	r5,sp
    162c:	8009883a 	mov	r4,r16
    1630:	00006380 	call	638 <lms_spi_read>
	if( data&(1<<6) )
    1634:	d8c00003 	ldbu	r3,0(sp)
	{
		data &= ~(1<<6) ;
    1638:	00bfefc4 	movi	r2,-65
		lms_spi_write( reg+1, data ) ;
    163c:	8009883a 	mov	r4,r16
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
	{
		data &= ~(1<<6) ;
    1640:	1884703a 	and	r2,r3,r2
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
    1644:	18c0100c 	andi	r3,r3,64
	{
		data &= ~(1<<6) ;
		lms_spi_write( reg+1, data ) ;
    1648:	11402fcc 	andi	r5,r2,191
		data |= (1<<1) ;
		lms_spi_write( reg, data ) ;
	}
	// Check to see if we are bypassed
	lms_spi_read( reg+1, &data ) ;
	if( data&(1<<6) )
    164c:	18000226 	beq	r3,zero,1658 <lms_lpf_enable+0xa0>
	{
		data &= ~(1<<6) ;
    1650:	d8800005 	stb	r2,0(sp)
		lms_spi_write( reg+1, data ) ;
    1654:	00002500 	call	250 <lms_spi_write>
	}
	return ;
}
    1658:	dfc00417 	ldw	ra,16(sp)
    165c:	dc800317 	ldw	r18,12(sp)
    1660:	dc400217 	ldw	r17,8(sp)
    1664:	dc000117 	ldw	r16,4(sp)
    1668:	dec00504 	addi	sp,sp,20
    166c:	f800283a 	ret

00001670 <lms_loopback_disable>:
	return mode ;
}

// Disable loopback mode - must choose which LNA to hook up and what bandwidth you want
void lms_loopback_disable( lms_lna_t lna, lms_bw_t bw )
{
    1670:	defffc04 	addi	sp,sp,-16
    1674:	dfc00315 	stw	ra,12(sp)
    1678:	dc800215 	stw	r18,8(sp)
    167c:	dc400115 	stw	r17,4(sp)
    1680:	dc000015 	stw	r16,0(sp)
    1684:	2025883a 	mov	r18,r4
    1688:	2823883a 	mov	r17,r5
	// Read which type of loopback mode we were in
	lms_loopback_mode_t mode = lms_get_loopback_mode() ;
    168c:	0000e3c0 	call	e3c <lms_get_loopback_mode>

	// Disable all RX loopback modes
	lms_spi_write( 0x08, 0 ) ;
    1690:	01000204 	movi	r4,8
    1694:	000b883a 	mov	r5,zero

// Disable loopback mode - must choose which LNA to hook up and what bandwidth you want
void lms_loopback_disable( lms_lna_t lna, lms_bw_t bw )
{
	// Read which type of loopback mode we were in
	lms_loopback_mode_t mode = lms_get_loopback_mode() ;
    1698:	1021883a 	mov	r16,r2

	// Disable all RX loopback modes
	lms_spi_write( 0x08, 0 ) ;
    169c:	00002500 	call	250 <lms_spi_write>

	switch(mode)
    16a0:	00800184 	movi	r2,6
    16a4:	14003136 	bltu	r2,r16,176c <lms_loopback_disable+0xfc>
    16a8:	8405883a 	add	r2,r16,r16
    16ac:	1085883a 	add	r2,r2,r2
    16b0:	00c00034 	movhi	r3,0
    16b4:	18c5b104 	addi	r3,r3,5828
    16b8:	10c5883a 	add	r2,r2,r3
    16bc:	10800017 	ldw	r2,0(r2)
    16c0:	1000683a 	jmp	r2
    16c4:	000016e0 	cmpeqi	zero,zero,91
    16c8:	000016ec 	andhi	zero,zero,91
    16cc:	00001714 	movui	zero,92
    16d0:	0000176c 	andhi	zero,zero,93
    16d4:	00001748 	cmpgei	zero,zero,93
    16d8:	00001748 	cmpgei	zero,zero,93
    16dc:	00001748 	cmpgei	zero,zero,93
	{
		case LB_BB_LPF:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    16e0:	0009883a 	mov	r4,zero
    16e4:	0000fd40 	call	fd4 <lms_tx_loopback_disable>
    16e8:	00001106 	br	1730 <lms_loopback_disable+0xc0>
			// Enable RXVGA1
			lms_rxvga1_enable() ;
			break ;
		case LB_BB_VGA2:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    16ec:	0009883a 	mov	r4,zero
    16f0:	0000fd40 	call	fd4 <lms_tx_loopback_disable>
			// Enable RXLPF
			lms_lpf_enable( RX, bw ) ;
    16f4:	880b883a 	mov	r5,r17
    16f8:	0009883a 	mov	r4,zero
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    16fc:	dfc00317 	ldw	ra,12(sp)
    1700:	dc800217 	ldw	r18,8(sp)
    1704:	dc400117 	ldw	r17,4(sp)
    1708:	dc000017 	ldw	r16,0(sp)
    170c:	dec00404 	addi	sp,sp,16
			break ;
		case LB_BB_VGA2:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
			// Enable RXLPF
			lms_lpf_enable( RX, bw ) ;
    1710:	00015b81 	jmpi	15b8 <lms_lpf_enable>
			break ;
		case LB_BB_OP:
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
    1714:	0009883a 	mov	r4,zero
    1718:	0000fd40 	call	fd4 <lms_tx_loopback_disable>
			// Enable RXLPF, RXVGA1 and RXVGA2
			lms_lpf_enable( RX, bw ) ;
    171c:	880b883a 	mov	r5,r17
    1720:	0009883a 	mov	r4,zero
    1724:	00015b80 	call	15b8 <lms_lpf_enable>
			lms_rxvga2_enable( 30/3 ) ;
    1728:	01000284 	movi	r4,10
    172c:	00011900 	call	1190 <lms_rxvga2_enable>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1730:	dfc00317 	ldw	ra,12(sp)
    1734:	dc800217 	ldw	r18,8(sp)
    1738:	dc400117 	ldw	r17,4(sp)
    173c:	dc000017 	ldw	r16,0(sp)
    1740:	dec00404 	addi	sp,sp,16
			// Disable TX baseband loopback
			lms_tx_loopback_disable( TXLB_BB ) ;
			// Enable RXLPF, RXVGA1 and RXVGA2
			lms_lpf_enable( RX, bw ) ;
			lms_rxvga2_enable( 30/3 ) ;
			lms_rxvga1_enable() ;
    1744:	00005d41 	jmpi	5d4 <lms_rxvga1_enable>
			break ;
		case LB_RF_LNA1:
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable TX RF loopback
			lms_tx_loopback_disable( TXLB_RF ) ;
    1748:	01000044 	movi	r4,1
    174c:	0000fd40 	call	fd4 <lms_tx_loopback_disable>
			// Enable selected LNA
			lms_lna_select( lna ) ;
    1750:	9009883a 	mov	r4,r18
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    1754:	dfc00317 	ldw	ra,12(sp)
    1758:	dc800217 	ldw	r18,8(sp)
    175c:	dc400117 	ldw	r17,4(sp)
    1760:	dc000017 	ldw	r16,0(sp)
    1764:	dec00404 	addi	sp,sp,16
		case LB_RF_LNA2:
		case LB_RF_LNA3:
			// Disable TX RF loopback
			lms_tx_loopback_disable( TXLB_RF ) ;
			// Enable selected LNA
			lms_lna_select( lna ) ;
    1768:	00012301 	jmpi	1230 <lms_lna_select>
		case LB_NONE:
			// Weird
			break ;
	}
	return ;
}
    176c:	dfc00317 	ldw	ra,12(sp)
    1770:	dc800217 	ldw	r18,8(sp)
    1774:	dc400117 	ldw	r17,4(sp)
    1778:	dc000017 	ldw	r16,0(sp)
    177c:	dec00404 	addi	sp,sp,16
    1780:	f800283a 	ret

00001784 <dac_write>:
     0x7C,
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1784:	defff704 	addi	sp,sp,-36
    1788:	dc000415 	stw	r16,16(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
    178c:	243fffcc 	andi	r16,r4,65535
     0x7C,
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1790:	dcc00715 	stw	r19,28(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
    1794:	800b883a 	mov	r5,r16
     0x7C,
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    1798:	2027883a 	mov	r19,r4
	alt_printf( "DAC Writing: %x\n", val ) ;
    179c:	01000034 	movhi	r4,0
    17a0:	210a1604 	addi	r4,r4,10328
     0x7C,
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
    17a4:	dfc00815 	stw	ra,32(sp)
    17a8:	dc800615 	stw	r18,24(sp)
    17ac:	dc400515 	stw	r17,20(sp)
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    17b0:	048000c4 	movi	r18,3
     0x7D
} ;

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
    17b4:	00022e00 	call	22e0 <alt_printf>
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    17b8:	044000b4 	movhi	r17,2
    17bc:	8c540004 	addi	r17,r17,20480
    17c0:	8809883a 	mov	r4,r17
    17c4:	900d883a 	mov	r6,r18
    17c8:	d9c00304 	addi	r7,sp,12
    17cc:	000b883a 	mov	r5,zero

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
    17d0:	00800a04 	movi	r2,40
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    17d4:	8020d23a 	srli	r16,r16,8

// Trim DAC write
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
    17d8:	d8800305 	stb	r2,12(sp)
    17dc:	d8000345 	stb	zero,13(sp)
    17e0:	d8000385 	stb	zero,14(sp)
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
    17e4:	d8000015 	stw	zero,0(sp)
    17e8:	d8000115 	stw	zero,4(sp)
    17ec:	d8000215 	stw	zero,8(sp)
    17f0:	000257c0 	call	257c <alt_avalon_spi_command>
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    17f4:	00800204 	movi	r2,8
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0) ;
    17f8:	8809883a 	mov	r4,r17
    17fc:	900d883a 	mov	r6,r18
    1800:	000b883a 	mov	r5,zero
    1804:	d9c00304 	addi	r7,sp,12
void dac_write( uint16_t val ) {
	alt_printf( "DAC Writing: %x\n", val ) ;
	uint8_t data[3] ;
	data[0] = 0x28, data[1] = 0, data[2] = 0 ;
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0 ) ;
	data[0] = 0x08, data[1] = (val>>8)&0xff, data[2] = val&0xff  ;
    1808:	d8800305 	stb	r2,12(sp)
    180c:	dc000345 	stb	r16,13(sp)
    1810:	dcc00385 	stb	r19,14(sp)
	alt_avalon_spi_command( SPI_1_BASE, 0, 3, data, 0, 0, 0) ;
    1814:	d8000015 	stw	zero,0(sp)
    1818:	d8000115 	stw	zero,4(sp)
    181c:	d8000215 	stw	zero,8(sp)
    1820:	000257c0 	call	257c <alt_avalon_spi_command>
	return ;
}
    1824:	dfc00817 	ldw	ra,32(sp)
    1828:	dcc00717 	ldw	r19,28(sp)
    182c:	dc800617 	ldw	r18,24(sp)
    1830:	dc400517 	ldw	r17,20(sp)
    1834:	dc000417 	ldw	r16,16(sp)
    1838:	dec00904 	addi	sp,sp,36
    183c:	f800283a 	ret

00001840 <__udivdi3>:
    1840:	defff104 	addi	sp,sp,-60
    1844:	0015883a 	mov	r10,zero
    1848:	2005883a 	mov	r2,r4
    184c:	3011883a 	mov	r8,r6
    1850:	df000d15 	stw	fp,52(sp)
    1854:	dd400a15 	stw	r21,40(sp)
    1858:	dcc00815 	stw	r19,32(sp)
    185c:	dfc00e15 	stw	ra,56(sp)
    1860:	ddc00c15 	stw	r23,48(sp)
    1864:	dd800b15 	stw	r22,44(sp)
    1868:	dd000915 	stw	r20,36(sp)
    186c:	dc800715 	stw	r18,28(sp)
    1870:	dc400615 	stw	r17,24(sp)
    1874:	dc000515 	stw	r16,20(sp)
    1878:	da800315 	stw	r10,12(sp)
    187c:	4027883a 	mov	r19,r8
    1880:	1039883a 	mov	fp,r2
    1884:	282b883a 	mov	r21,r5
    1888:	da800415 	stw	r10,16(sp)
    188c:	3800401e 	bne	r7,zero,1990 <__udivdi3+0x150>
    1890:	2a006536 	bltu	r5,r8,1a28 <__udivdi3+0x1e8>
    1894:	4000b526 	beq	r8,zero,1b6c <__udivdi3+0x32c>
    1898:	00bfffd4 	movui	r2,65535
    189c:	14c0ad36 	bltu	r2,r19,1b54 <__udivdi3+0x314>
    18a0:	00803fc4 	movi	r2,255
    18a4:	14c15e36 	bltu	r2,r19,1e20 <__udivdi3+0x5e0>
    18a8:	000b883a 	mov	r5,zero
    18ac:	0005883a 	mov	r2,zero
    18b0:	9884d83a 	srl	r2,r19,r2
    18b4:	01000034 	movhi	r4,0
    18b8:	210a7804 	addi	r4,r4,10720
    18bc:	01800804 	movi	r6,32
    18c0:	1105883a 	add	r2,r2,r4
    18c4:	10c00003 	ldbu	r3,0(r2)
    18c8:	28c7883a 	add	r3,r5,r3
    18cc:	30e9c83a 	sub	r20,r6,r3
    18d0:	a0010a1e 	bne	r20,zero,1cfc <__udivdi3+0x4bc>
    18d4:	982ed43a 	srli	r23,r19,16
    18d8:	acebc83a 	sub	r21,r21,r19
    18dc:	9dbfffcc 	andi	r22,r19,65535
    18e0:	05000044 	movi	r20,1
    18e4:	a809883a 	mov	r4,r21
    18e8:	b80b883a 	mov	r5,r23
    18ec:	0001fe80 	call	1fe8 <__udivsi3>
    18f0:	100b883a 	mov	r5,r2
    18f4:	b009883a 	mov	r4,r22
    18f8:	1021883a 	mov	r16,r2
    18fc:	0001ff80 	call	1ff8 <__mulsi3>
    1900:	a809883a 	mov	r4,r21
    1904:	b80b883a 	mov	r5,r23
    1908:	1023883a 	mov	r17,r2
    190c:	0001ff00 	call	1ff0 <__umodsi3>
    1910:	1004943a 	slli	r2,r2,16
    1914:	e006d43a 	srli	r3,fp,16
    1918:	10c4b03a 	or	r2,r2,r3
    191c:	1440042e 	bgeu	r2,r17,1930 <__udivdi3+0xf0>
    1920:	14c5883a 	add	r2,r2,r19
    1924:	843fffc4 	addi	r16,r16,-1
    1928:	14c00136 	bltu	r2,r19,1930 <__udivdi3+0xf0>
    192c:	14415c36 	bltu	r2,r17,1ea0 <__udivdi3+0x660>
    1930:	1463c83a 	sub	r17,r2,r17
    1934:	8809883a 	mov	r4,r17
    1938:	b80b883a 	mov	r5,r23
    193c:	0001fe80 	call	1fe8 <__udivsi3>
    1940:	100b883a 	mov	r5,r2
    1944:	b009883a 	mov	r4,r22
    1948:	102b883a 	mov	r21,r2
    194c:	0001ff80 	call	1ff8 <__mulsi3>
    1950:	8809883a 	mov	r4,r17
    1954:	b80b883a 	mov	r5,r23
    1958:	1025883a 	mov	r18,r2
    195c:	0001ff00 	call	1ff0 <__umodsi3>
    1960:	1004943a 	slli	r2,r2,16
    1964:	e0ffffcc 	andi	r3,fp,65535
    1968:	10c4b03a 	or	r2,r2,r3
    196c:	1480042e 	bgeu	r2,r18,1980 <__udivdi3+0x140>
    1970:	9885883a 	add	r2,r19,r2
    1974:	ad7fffc4 	addi	r21,r21,-1
    1978:	14c00136 	bltu	r2,r19,1980 <__udivdi3+0x140>
    197c:	14813c36 	bltu	r2,r18,1e70 <__udivdi3+0x630>
    1980:	8004943a 	slli	r2,r16,16
    1984:	a009883a 	mov	r4,r20
    1988:	a884b03a 	or	r2,r21,r2
    198c:	00001506 	br	19e4 <__udivdi3+0x1a4>
    1990:	380d883a 	mov	r6,r7
    1994:	29c06c36 	bltu	r5,r7,1b48 <__udivdi3+0x308>
    1998:	00bfffd4 	movui	r2,65535
    199c:	11c06436 	bltu	r2,r7,1b30 <__udivdi3+0x2f0>
    19a0:	00803fc4 	movi	r2,255
    19a4:	11c11836 	bltu	r2,r7,1e08 <__udivdi3+0x5c8>
    19a8:	000b883a 	mov	r5,zero
    19ac:	0005883a 	mov	r2,zero
    19b0:	3084d83a 	srl	r2,r6,r2
    19b4:	01000034 	movhi	r4,0
    19b8:	210a7804 	addi	r4,r4,10720
    19bc:	01c00804 	movi	r7,32
    19c0:	1105883a 	add	r2,r2,r4
    19c4:	10c00003 	ldbu	r3,0(r2)
    19c8:	28c7883a 	add	r3,r5,r3
    19cc:	38edc83a 	sub	r22,r7,r3
    19d0:	b000731e 	bne	r22,zero,1ba0 <__udivdi3+0x360>
    19d4:	35400136 	bltu	r6,r21,19dc <__udivdi3+0x19c>
    19d8:	e4c05b36 	bltu	fp,r19,1b48 <__udivdi3+0x308>
    19dc:	00800044 	movi	r2,1
    19e0:	0009883a 	mov	r4,zero
    19e4:	d8800315 	stw	r2,12(sp)
    19e8:	d9400317 	ldw	r5,12(sp)
    19ec:	2007883a 	mov	r3,r4
    19f0:	d9000415 	stw	r4,16(sp)
    19f4:	2805883a 	mov	r2,r5
    19f8:	dfc00e17 	ldw	ra,56(sp)
    19fc:	df000d17 	ldw	fp,52(sp)
    1a00:	ddc00c17 	ldw	r23,48(sp)
    1a04:	dd800b17 	ldw	r22,44(sp)
    1a08:	dd400a17 	ldw	r21,40(sp)
    1a0c:	dd000917 	ldw	r20,36(sp)
    1a10:	dcc00817 	ldw	r19,32(sp)
    1a14:	dc800717 	ldw	r18,28(sp)
    1a18:	dc400617 	ldw	r17,24(sp)
    1a1c:	dc000517 	ldw	r16,20(sp)
    1a20:	dec00f04 	addi	sp,sp,60
    1a24:	f800283a 	ret
    1a28:	00bfffd4 	movui	r2,65535
    1a2c:	12005636 	bltu	r2,r8,1b88 <__udivdi3+0x348>
    1a30:	00803fc4 	movi	r2,255
    1a34:	12010036 	bltu	r2,r8,1e38 <__udivdi3+0x5f8>
    1a38:	000b883a 	mov	r5,zero
    1a3c:	0005883a 	mov	r2,zero
    1a40:	9884d83a 	srl	r2,r19,r2
    1a44:	01000034 	movhi	r4,0
    1a48:	210a7804 	addi	r4,r4,10720
    1a4c:	01800804 	movi	r6,32
    1a50:	1105883a 	add	r2,r2,r4
    1a54:	10c00003 	ldbu	r3,0(r2)
    1a58:	28c7883a 	add	r3,r5,r3
    1a5c:	30cbc83a 	sub	r5,r6,r3
    1a60:	28000626 	beq	r5,zero,1a7c <__udivdi3+0x23c>
    1a64:	3145c83a 	sub	r2,r6,r5
    1a68:	e084d83a 	srl	r2,fp,r2
    1a6c:	a946983a 	sll	r3,r21,r5
    1a70:	e178983a 	sll	fp,fp,r5
    1a74:	9966983a 	sll	r19,r19,r5
    1a78:	18aab03a 	or	r21,r3,r2
    1a7c:	982ed43a 	srli	r23,r19,16
    1a80:	a809883a 	mov	r4,r21
    1a84:	9cbfffcc 	andi	r18,r19,65535
    1a88:	b80b883a 	mov	r5,r23
    1a8c:	0001fe80 	call	1fe8 <__udivsi3>
    1a90:	100b883a 	mov	r5,r2
    1a94:	9009883a 	mov	r4,r18
    1a98:	1021883a 	mov	r16,r2
    1a9c:	0001ff80 	call	1ff8 <__mulsi3>
    1aa0:	a809883a 	mov	r4,r21
    1aa4:	b80b883a 	mov	r5,r23
    1aa8:	1023883a 	mov	r17,r2
    1aac:	0001ff00 	call	1ff0 <__umodsi3>
    1ab0:	1004943a 	slli	r2,r2,16
    1ab4:	e006d43a 	srli	r3,fp,16
    1ab8:	10c4b03a 	or	r2,r2,r3
    1abc:	1440042e 	bgeu	r2,r17,1ad0 <__udivdi3+0x290>
    1ac0:	14c5883a 	add	r2,r2,r19
    1ac4:	843fffc4 	addi	r16,r16,-1
    1ac8:	14c00136 	bltu	r2,r19,1ad0 <__udivdi3+0x290>
    1acc:	1440ea36 	bltu	r2,r17,1e78 <__udivdi3+0x638>
    1ad0:	1463c83a 	sub	r17,r2,r17
    1ad4:	8809883a 	mov	r4,r17
    1ad8:	b80b883a 	mov	r5,r23
    1adc:	0001fe80 	call	1fe8 <__udivsi3>
    1ae0:	100b883a 	mov	r5,r2
    1ae4:	9009883a 	mov	r4,r18
    1ae8:	102b883a 	mov	r21,r2
    1aec:	0001ff80 	call	1ff8 <__mulsi3>
    1af0:	8809883a 	mov	r4,r17
    1af4:	b80b883a 	mov	r5,r23
    1af8:	1025883a 	mov	r18,r2
    1afc:	0001ff00 	call	1ff0 <__umodsi3>
    1b00:	1004943a 	slli	r2,r2,16
    1b04:	e0ffffcc 	andi	r3,fp,65535
    1b08:	10c4b03a 	or	r2,r2,r3
    1b0c:	1480042e 	bgeu	r2,r18,1b20 <__udivdi3+0x2e0>
    1b10:	9885883a 	add	r2,r19,r2
    1b14:	ad7fffc4 	addi	r21,r21,-1
    1b18:	14c00136 	bltu	r2,r19,1b20 <__udivdi3+0x2e0>
    1b1c:	1480d936 	bltu	r2,r18,1e84 <__udivdi3+0x644>
    1b20:	8004943a 	slli	r2,r16,16
    1b24:	0009883a 	mov	r4,zero
    1b28:	a884b03a 	or	r2,r21,r2
    1b2c:	003fad06 	br	19e4 <__udivdi3+0x1a4>
    1b30:	00804034 	movhi	r2,256
    1b34:	10bfffc4 	addi	r2,r2,-1
    1b38:	11c0b636 	bltu	r2,r7,1e14 <__udivdi3+0x5d4>
    1b3c:	01400404 	movi	r5,16
    1b40:	2805883a 	mov	r2,r5
    1b44:	003f9a06 	br	19b0 <__udivdi3+0x170>
    1b48:	0005883a 	mov	r2,zero
    1b4c:	0009883a 	mov	r4,zero
    1b50:	003fa406 	br	19e4 <__udivdi3+0x1a4>
    1b54:	00804034 	movhi	r2,256
    1b58:	10bfffc4 	addi	r2,r2,-1
    1b5c:	14c0b336 	bltu	r2,r19,1e2c <__udivdi3+0x5ec>
    1b60:	01400404 	movi	r5,16
    1b64:	2805883a 	mov	r2,r5
    1b68:	003f5106 	br	18b0 <__udivdi3+0x70>
    1b6c:	01000044 	movi	r4,1
    1b70:	000b883a 	mov	r5,zero
    1b74:	0001fe80 	call	1fe8 <__udivsi3>
    1b78:	1027883a 	mov	r19,r2
    1b7c:	00bfffd4 	movui	r2,65535
    1b80:	14fff436 	bltu	r2,r19,1b54 <__udivdi3+0x314>
    1b84:	003f4606 	br	18a0 <__udivdi3+0x60>
    1b88:	00804034 	movhi	r2,256
    1b8c:	10bfffc4 	addi	r2,r2,-1
    1b90:	1200ac36 	bltu	r2,r8,1e44 <__udivdi3+0x604>
    1b94:	01400404 	movi	r5,16
    1b98:	2805883a 	mov	r2,r5
    1b9c:	003fa806 	br	1a40 <__udivdi3+0x200>
    1ba0:	3d85c83a 	sub	r2,r7,r22
    1ba4:	3588983a 	sll	r4,r6,r22
    1ba8:	9886d83a 	srl	r3,r19,r2
    1bac:	a8a2d83a 	srl	r17,r21,r2
    1bb0:	e084d83a 	srl	r2,fp,r2
    1bb4:	20eeb03a 	or	r23,r4,r3
    1bb8:	b824d43a 	srli	r18,r23,16
    1bbc:	ad86983a 	sll	r3,r21,r22
    1bc0:	8809883a 	mov	r4,r17
    1bc4:	900b883a 	mov	r5,r18
    1bc8:	1886b03a 	or	r3,r3,r2
    1bcc:	d8c00115 	stw	r3,4(sp)
    1bd0:	bc3fffcc 	andi	r16,r23,65535
    1bd4:	0001fe80 	call	1fe8 <__udivsi3>
    1bd8:	100b883a 	mov	r5,r2
    1bdc:	8009883a 	mov	r4,r16
    1be0:	1029883a 	mov	r20,r2
    1be4:	0001ff80 	call	1ff8 <__mulsi3>
    1be8:	900b883a 	mov	r5,r18
    1bec:	8809883a 	mov	r4,r17
    1bf0:	102b883a 	mov	r21,r2
    1bf4:	0001ff00 	call	1ff0 <__umodsi3>
    1bf8:	d9400117 	ldw	r5,4(sp)
    1bfc:	1004943a 	slli	r2,r2,16
    1c00:	9da6983a 	sll	r19,r19,r22
    1c04:	2806d43a 	srli	r3,r5,16
    1c08:	10c4b03a 	or	r2,r2,r3
    1c0c:	1540032e 	bgeu	r2,r21,1c1c <__udivdi3+0x3dc>
    1c10:	15c5883a 	add	r2,r2,r23
    1c14:	a53fffc4 	addi	r20,r20,-1
    1c18:	15c0912e 	bgeu	r2,r23,1e60 <__udivdi3+0x620>
    1c1c:	1563c83a 	sub	r17,r2,r21
    1c20:	8809883a 	mov	r4,r17
    1c24:	900b883a 	mov	r5,r18
    1c28:	0001fe80 	call	1fe8 <__udivsi3>
    1c2c:	100b883a 	mov	r5,r2
    1c30:	8009883a 	mov	r4,r16
    1c34:	102b883a 	mov	r21,r2
    1c38:	0001ff80 	call	1ff8 <__mulsi3>
    1c3c:	8809883a 	mov	r4,r17
    1c40:	900b883a 	mov	r5,r18
    1c44:	1021883a 	mov	r16,r2
    1c48:	0001ff00 	call	1ff0 <__umodsi3>
    1c4c:	da800117 	ldw	r10,4(sp)
    1c50:	1004943a 	slli	r2,r2,16
    1c54:	50ffffcc 	andi	r3,r10,65535
    1c58:	10c6b03a 	or	r3,r2,r3
    1c5c:	1c00032e 	bgeu	r3,r16,1c6c <__udivdi3+0x42c>
    1c60:	1dc7883a 	add	r3,r3,r23
    1c64:	ad7fffc4 	addi	r21,r21,-1
    1c68:	1dc0792e 	bgeu	r3,r23,1e50 <__udivdi3+0x610>
    1c6c:	a004943a 	slli	r2,r20,16
    1c70:	982ed43a 	srli	r23,r19,16
    1c74:	9cffffcc 	andi	r19,r19,65535
    1c78:	a8a4b03a 	or	r18,r21,r2
    1c7c:	947fffcc 	andi	r17,r18,65535
    1c80:	902ad43a 	srli	r21,r18,16
    1c84:	8809883a 	mov	r4,r17
    1c88:	980b883a 	mov	r5,r19
    1c8c:	1c21c83a 	sub	r16,r3,r16
    1c90:	0001ff80 	call	1ff8 <__mulsi3>
    1c94:	8809883a 	mov	r4,r17
    1c98:	b80b883a 	mov	r5,r23
    1c9c:	1029883a 	mov	r20,r2
    1ca0:	0001ff80 	call	1ff8 <__mulsi3>
    1ca4:	980b883a 	mov	r5,r19
    1ca8:	a809883a 	mov	r4,r21
    1cac:	1023883a 	mov	r17,r2
    1cb0:	0001ff80 	call	1ff8 <__mulsi3>
    1cb4:	a809883a 	mov	r4,r21
    1cb8:	b80b883a 	mov	r5,r23
    1cbc:	1027883a 	mov	r19,r2
    1cc0:	0001ff80 	call	1ff8 <__mulsi3>
    1cc4:	1009883a 	mov	r4,r2
    1cc8:	a004d43a 	srli	r2,r20,16
    1ccc:	8ce3883a 	add	r17,r17,r19
    1cd0:	1447883a 	add	r3,r2,r17
    1cd4:	1cc0022e 	bgeu	r3,r19,1ce0 <__udivdi3+0x4a0>
    1cd8:	00800074 	movhi	r2,1
    1cdc:	2089883a 	add	r4,r4,r2
    1ce0:	1804d43a 	srli	r2,r3,16
    1ce4:	2085883a 	add	r2,r4,r2
    1ce8:	80804436 	bltu	r16,r2,1dfc <__udivdi3+0x5bc>
    1cec:	80803e26 	beq	r16,r2,1de8 <__udivdi3+0x5a8>
    1cf0:	9005883a 	mov	r2,r18
    1cf4:	0009883a 	mov	r4,zero
    1cf8:	003f3a06 	br	19e4 <__udivdi3+0x1a4>
    1cfc:	9d26983a 	sll	r19,r19,r20
    1d00:	3505c83a 	sub	r2,r6,r20
    1d04:	a8a2d83a 	srl	r17,r21,r2
    1d08:	982ed43a 	srli	r23,r19,16
    1d0c:	e084d83a 	srl	r2,fp,r2
    1d10:	ad06983a 	sll	r3,r21,r20
    1d14:	8809883a 	mov	r4,r17
    1d18:	b80b883a 	mov	r5,r23
    1d1c:	1886b03a 	or	r3,r3,r2
    1d20:	d8c00015 	stw	r3,0(sp)
    1d24:	9dbfffcc 	andi	r22,r19,65535
    1d28:	0001fe80 	call	1fe8 <__udivsi3>
    1d2c:	100b883a 	mov	r5,r2
    1d30:	b009883a 	mov	r4,r22
    1d34:	d8800215 	stw	r2,8(sp)
    1d38:	0001ff80 	call	1ff8 <__mulsi3>
    1d3c:	8809883a 	mov	r4,r17
    1d40:	b80b883a 	mov	r5,r23
    1d44:	102b883a 	mov	r21,r2
    1d48:	0001ff00 	call	1ff0 <__umodsi3>
    1d4c:	d9000017 	ldw	r4,0(sp)
    1d50:	1004943a 	slli	r2,r2,16
    1d54:	2006d43a 	srli	r3,r4,16
    1d58:	10c4b03a 	or	r2,r2,r3
    1d5c:	1540052e 	bgeu	r2,r21,1d74 <__udivdi3+0x534>
    1d60:	d9400217 	ldw	r5,8(sp)
    1d64:	14c5883a 	add	r2,r2,r19
    1d68:	297fffc4 	addi	r5,r5,-1
    1d6c:	d9400215 	stw	r5,8(sp)
    1d70:	14c0462e 	bgeu	r2,r19,1e8c <__udivdi3+0x64c>
    1d74:	1563c83a 	sub	r17,r2,r21
    1d78:	8809883a 	mov	r4,r17
    1d7c:	b80b883a 	mov	r5,r23
    1d80:	0001fe80 	call	1fe8 <__udivsi3>
    1d84:	100b883a 	mov	r5,r2
    1d88:	b009883a 	mov	r4,r22
    1d8c:	1025883a 	mov	r18,r2
    1d90:	0001ff80 	call	1ff8 <__mulsi3>
    1d94:	8809883a 	mov	r4,r17
    1d98:	b80b883a 	mov	r5,r23
    1d9c:	1021883a 	mov	r16,r2
    1da0:	0001ff00 	call	1ff0 <__umodsi3>
    1da4:	da800017 	ldw	r10,0(sp)
    1da8:	1004943a 	slli	r2,r2,16
    1dac:	50ffffcc 	andi	r3,r10,65535
    1db0:	10c6b03a 	or	r3,r2,r3
    1db4:	1c00062e 	bgeu	r3,r16,1dd0 <__udivdi3+0x590>
    1db8:	1cc7883a 	add	r3,r3,r19
    1dbc:	94bfffc4 	addi	r18,r18,-1
    1dc0:	1cc00336 	bltu	r3,r19,1dd0 <__udivdi3+0x590>
    1dc4:	1c00022e 	bgeu	r3,r16,1dd0 <__udivdi3+0x590>
    1dc8:	94bfffc4 	addi	r18,r18,-1
    1dcc:	1cc7883a 	add	r3,r3,r19
    1dd0:	d9000217 	ldw	r4,8(sp)
    1dd4:	e538983a 	sll	fp,fp,r20
    1dd8:	1c2bc83a 	sub	r21,r3,r16
    1ddc:	2004943a 	slli	r2,r4,16
    1de0:	90a8b03a 	or	r20,r18,r2
    1de4:	003ebf06 	br	18e4 <__udivdi3+0xa4>
    1de8:	1804943a 	slli	r2,r3,16
    1dec:	e588983a 	sll	r4,fp,r22
    1df0:	a0ffffcc 	andi	r3,r20,65535
    1df4:	10c5883a 	add	r2,r2,r3
    1df8:	20bfbd2e 	bgeu	r4,r2,1cf0 <__udivdi3+0x4b0>
    1dfc:	90bfffc4 	addi	r2,r18,-1
    1e00:	0009883a 	mov	r4,zero
    1e04:	003ef706 	br	19e4 <__udivdi3+0x1a4>
    1e08:	01400204 	movi	r5,8
    1e0c:	2805883a 	mov	r2,r5
    1e10:	003ee706 	br	19b0 <__udivdi3+0x170>
    1e14:	01400604 	movi	r5,24
    1e18:	2805883a 	mov	r2,r5
    1e1c:	003ee406 	br	19b0 <__udivdi3+0x170>
    1e20:	01400204 	movi	r5,8
    1e24:	2805883a 	mov	r2,r5
    1e28:	003ea106 	br	18b0 <__udivdi3+0x70>
    1e2c:	01400604 	movi	r5,24
    1e30:	2805883a 	mov	r2,r5
    1e34:	003e9e06 	br	18b0 <__udivdi3+0x70>
    1e38:	01400204 	movi	r5,8
    1e3c:	2805883a 	mov	r2,r5
    1e40:	003eff06 	br	1a40 <__udivdi3+0x200>
    1e44:	01400604 	movi	r5,24
    1e48:	2805883a 	mov	r2,r5
    1e4c:	003efc06 	br	1a40 <__udivdi3+0x200>
    1e50:	1c3f862e 	bgeu	r3,r16,1c6c <__udivdi3+0x42c>
    1e54:	1dc7883a 	add	r3,r3,r23
    1e58:	ad7fffc4 	addi	r21,r21,-1
    1e5c:	003f8306 	br	1c6c <__udivdi3+0x42c>
    1e60:	157f6e2e 	bgeu	r2,r21,1c1c <__udivdi3+0x3dc>
    1e64:	a53fffc4 	addi	r20,r20,-1
    1e68:	15c5883a 	add	r2,r2,r23
    1e6c:	003f6b06 	br	1c1c <__udivdi3+0x3dc>
    1e70:	ad7fffc4 	addi	r21,r21,-1
    1e74:	003ec206 	br	1980 <__udivdi3+0x140>
    1e78:	843fffc4 	addi	r16,r16,-1
    1e7c:	14c5883a 	add	r2,r2,r19
    1e80:	003f1306 	br	1ad0 <__udivdi3+0x290>
    1e84:	ad7fffc4 	addi	r21,r21,-1
    1e88:	003f2506 	br	1b20 <__udivdi3+0x2e0>
    1e8c:	157fb92e 	bgeu	r2,r21,1d74 <__udivdi3+0x534>
    1e90:	297fffc4 	addi	r5,r5,-1
    1e94:	14c5883a 	add	r2,r2,r19
    1e98:	d9400215 	stw	r5,8(sp)
    1e9c:	003fb506 	br	1d74 <__udivdi3+0x534>
    1ea0:	843fffc4 	addi	r16,r16,-1
    1ea4:	14c5883a 	add	r2,r2,r19
    1ea8:	003ea106 	br	1930 <__udivdi3+0xf0>

00001eac <udivmodsi4>:
    1eac:	29001b2e 	bgeu	r5,r4,1f1c <udivmodsi4+0x70>
    1eb0:	28001a16 	blt	r5,zero,1f1c <udivmodsi4+0x70>
    1eb4:	00800044 	movi	r2,1
    1eb8:	0007883a 	mov	r3,zero
    1ebc:	01c007c4 	movi	r7,31
    1ec0:	00000306 	br	1ed0 <udivmodsi4+0x24>
    1ec4:	19c01326 	beq	r3,r7,1f14 <udivmodsi4+0x68>
    1ec8:	18c00044 	addi	r3,r3,1
    1ecc:	28000416 	blt	r5,zero,1ee0 <udivmodsi4+0x34>
    1ed0:	294b883a 	add	r5,r5,r5
    1ed4:	1085883a 	add	r2,r2,r2
    1ed8:	293ffa36 	bltu	r5,r4,1ec4 <udivmodsi4+0x18>
    1edc:	10000d26 	beq	r2,zero,1f14 <udivmodsi4+0x68>
    1ee0:	0007883a 	mov	r3,zero
    1ee4:	21400236 	bltu	r4,r5,1ef0 <udivmodsi4+0x44>
    1ee8:	2149c83a 	sub	r4,r4,r5
    1eec:	1886b03a 	or	r3,r3,r2
    1ef0:	1004d07a 	srli	r2,r2,1
    1ef4:	280ad07a 	srli	r5,r5,1
    1ef8:	103ffa1e 	bne	r2,zero,1ee4 <udivmodsi4+0x38>
    1efc:	30000226 	beq	r6,zero,1f08 <udivmodsi4+0x5c>
    1f00:	2005883a 	mov	r2,r4
    1f04:	f800283a 	ret
    1f08:	1809883a 	mov	r4,r3
    1f0c:	2005883a 	mov	r2,r4
    1f10:	f800283a 	ret
    1f14:	0007883a 	mov	r3,zero
    1f18:	003ff806 	br	1efc <udivmodsi4+0x50>
    1f1c:	00800044 	movi	r2,1
    1f20:	0007883a 	mov	r3,zero
    1f24:	003fef06 	br	1ee4 <udivmodsi4+0x38>

00001f28 <__divsi3>:
    1f28:	defffe04 	addi	sp,sp,-8
    1f2c:	dc000015 	stw	r16,0(sp)
    1f30:	dfc00115 	stw	ra,4(sp)
    1f34:	0021883a 	mov	r16,zero
    1f38:	20000c16 	blt	r4,zero,1f6c <__divsi3+0x44>
    1f3c:	000d883a 	mov	r6,zero
    1f40:	28000e16 	blt	r5,zero,1f7c <__divsi3+0x54>
    1f44:	0001eac0 	call	1eac <udivmodsi4>
    1f48:	1007883a 	mov	r3,r2
    1f4c:	8005003a 	cmpeq	r2,r16,zero
    1f50:	1000011e 	bne	r2,zero,1f58 <__divsi3+0x30>
    1f54:	00c7c83a 	sub	r3,zero,r3
    1f58:	1805883a 	mov	r2,r3
    1f5c:	dfc00117 	ldw	ra,4(sp)
    1f60:	dc000017 	ldw	r16,0(sp)
    1f64:	dec00204 	addi	sp,sp,8
    1f68:	f800283a 	ret
    1f6c:	0109c83a 	sub	r4,zero,r4
    1f70:	04000044 	movi	r16,1
    1f74:	000d883a 	mov	r6,zero
    1f78:	283ff20e 	bge	r5,zero,1f44 <__divsi3+0x1c>
    1f7c:	014bc83a 	sub	r5,zero,r5
    1f80:	8021003a 	cmpeq	r16,r16,zero
    1f84:	003fef06 	br	1f44 <__divsi3+0x1c>

00001f88 <__modsi3>:
    1f88:	deffff04 	addi	sp,sp,-4
    1f8c:	dfc00015 	stw	ra,0(sp)
    1f90:	01800044 	movi	r6,1
    1f94:	2807883a 	mov	r3,r5
    1f98:	20000416 	blt	r4,zero,1fac <__modsi3+0x24>
    1f9c:	28000c16 	blt	r5,zero,1fd0 <__modsi3+0x48>
    1fa0:	dfc00017 	ldw	ra,0(sp)
    1fa4:	dec00104 	addi	sp,sp,4
    1fa8:	0001eac1 	jmpi	1eac <udivmodsi4>
    1fac:	0109c83a 	sub	r4,zero,r4
    1fb0:	28000b16 	blt	r5,zero,1fe0 <__modsi3+0x58>
    1fb4:	180b883a 	mov	r5,r3
    1fb8:	01800044 	movi	r6,1
    1fbc:	0001eac0 	call	1eac <udivmodsi4>
    1fc0:	0085c83a 	sub	r2,zero,r2
    1fc4:	dfc00017 	ldw	ra,0(sp)
    1fc8:	dec00104 	addi	sp,sp,4
    1fcc:	f800283a 	ret
    1fd0:	014bc83a 	sub	r5,zero,r5
    1fd4:	dfc00017 	ldw	ra,0(sp)
    1fd8:	dec00104 	addi	sp,sp,4
    1fdc:	0001eac1 	jmpi	1eac <udivmodsi4>
    1fe0:	0147c83a 	sub	r3,zero,r5
    1fe4:	003ff306 	br	1fb4 <__modsi3+0x2c>

00001fe8 <__udivsi3>:
    1fe8:	000d883a 	mov	r6,zero
    1fec:	0001eac1 	jmpi	1eac <udivmodsi4>

00001ff0 <__umodsi3>:
    1ff0:	01800044 	movi	r6,1
    1ff4:	0001eac1 	jmpi	1eac <udivmodsi4>

00001ff8 <__mulsi3>:
    1ff8:	20000a26 	beq	r4,zero,2024 <__mulsi3+0x2c>
    1ffc:	0007883a 	mov	r3,zero
    2000:	2080004c 	andi	r2,r4,1
    2004:	1005003a 	cmpeq	r2,r2,zero
    2008:	2008d07a 	srli	r4,r4,1
    200c:	1000011e 	bne	r2,zero,2014 <__mulsi3+0x1c>
    2010:	1947883a 	add	r3,r3,r5
    2014:	294b883a 	add	r5,r5,r5
    2018:	203ff91e 	bne	r4,zero,2000 <__mulsi3+0x8>
    201c:	1805883a 	mov	r2,r3
    2020:	f800283a 	ret
    2024:	0007883a 	mov	r3,zero
    2028:	1805883a 	mov	r2,r3
    202c:	f800283a 	ret

00002030 <_puts_r>:
    2030:	defffd04 	addi	sp,sp,-12
    2034:	dc000015 	stw	r16,0(sp)
    2038:	2021883a 	mov	r16,r4
    203c:	2809883a 	mov	r4,r5
    2040:	dfc00215 	stw	ra,8(sp)
    2044:	dc400115 	stw	r17,4(sp)
    2048:	2823883a 	mov	r17,r5
    204c:	00020d40 	call	20d4 <strlen>
    2050:	80c00217 	ldw	r3,8(r16)
    2054:	02000034 	movhi	r8,0
    2058:	42083d04 	addi	r8,r8,8436
    205c:	880d883a 	mov	r6,r17
    2060:	100f883a 	mov	r7,r2
    2064:	8009883a 	mov	r4,r16
    2068:	180b883a 	mov	r5,r3
    206c:	1a000115 	stw	r8,4(r3)
    2070:	403ee83a 	callr	r8
    2074:	047fffc4 	movi	r17,-1
    2078:	8009883a 	mov	r4,r16
    207c:	01800034 	movhi	r6,0
    2080:	3189ed04 	addi	r6,r6,10164
    2084:	01c00044 	movi	r7,1
    2088:	1440071e 	bne	r2,r17,20a8 <_puts_r+0x78>
    208c:	00ffffc4 	movi	r3,-1
    2090:	1805883a 	mov	r2,r3
    2094:	dfc00217 	ldw	ra,8(sp)
    2098:	dc400117 	ldw	r17,4(sp)
    209c:	dc000017 	ldw	r16,0(sp)
    20a0:	dec00304 	addi	sp,sp,12
    20a4:	f800283a 	ret
    20a8:	81400217 	ldw	r5,8(r16)
    20ac:	28c00117 	ldw	r3,4(r5)
    20b0:	183ee83a 	callr	r3
    20b4:	0007883a 	mov	r3,zero
    20b8:	147ff51e 	bne	r2,r17,2090 <_puts_r+0x60>
    20bc:	003ff306 	br	208c <_puts_r+0x5c>

000020c0 <puts>:
    20c0:	00800034 	movhi	r2,0
    20c4:	108af404 	addi	r2,r2,11216
    20c8:	200b883a 	mov	r5,r4
    20cc:	11000017 	ldw	r4,0(r2)
    20d0:	00020301 	jmpi	2030 <_puts_r>

000020d4 <strlen>:
    20d4:	20800007 	ldb	r2,0(r4)
    20d8:	10000526 	beq	r2,zero,20f0 <strlen+0x1c>
    20dc:	2007883a 	mov	r3,r4
    20e0:	18c00044 	addi	r3,r3,1
    20e4:	18800007 	ldb	r2,0(r3)
    20e8:	103ffd1e 	bne	r2,zero,20e0 <strlen+0xc>
    20ec:	1905c83a 	sub	r2,r3,r4
    20f0:	f800283a 	ret

000020f4 <__sfvwrite_small_dev>:
    20f4:	2880000b 	ldhu	r2,0(r5)
    20f8:	defffa04 	addi	sp,sp,-24
    20fc:	dcc00315 	stw	r19,12(sp)
    2100:	1080020c 	andi	r2,r2,8
    2104:	dc800215 	stw	r18,8(sp)
    2108:	dc400115 	stw	r17,4(sp)
    210c:	dfc00515 	stw	ra,20(sp)
    2110:	dd000415 	stw	r20,16(sp)
    2114:	dc000015 	stw	r16,0(sp)
    2118:	2825883a 	mov	r18,r5
    211c:	2027883a 	mov	r19,r4
    2120:	3023883a 	mov	r17,r6
    2124:	10002026 	beq	r2,zero,21a8 <__sfvwrite_small_dev+0xb4>
    2128:	2940008f 	ldh	r5,2(r5)
    212c:	28000f16 	blt	r5,zero,216c <__sfvwrite_small_dev+0x78>
    2130:	01c01b0e 	bge	zero,r7,21a0 <__sfvwrite_small_dev+0xac>
    2134:	3821883a 	mov	r16,r7
    2138:	05010004 	movi	r20,1024
    213c:	00000206 	br	2148 <__sfvwrite_small_dev+0x54>
    2140:	0400170e 	bge	zero,r16,21a0 <__sfvwrite_small_dev+0xac>
    2144:	9140008f 	ldh	r5,2(r18)
    2148:	880d883a 	mov	r6,r17
    214c:	9809883a 	mov	r4,r19
    2150:	800f883a 	mov	r7,r16
    2154:	a400010e 	bge	r20,r16,215c <__sfvwrite_small_dev+0x68>
    2158:	01c10004 	movi	r7,1024
    215c:	00021b00 	call	21b0 <_write_r>
    2160:	88a3883a 	add	r17,r17,r2
    2164:	80a1c83a 	sub	r16,r16,r2
    2168:	00bff516 	blt	zero,r2,2140 <__sfvwrite_small_dev+0x4c>
    216c:	9080000b 	ldhu	r2,0(r18)
    2170:	00ffffc4 	movi	r3,-1
    2174:	10801014 	ori	r2,r2,64
    2178:	9080000d 	sth	r2,0(r18)
    217c:	1805883a 	mov	r2,r3
    2180:	dfc00517 	ldw	ra,20(sp)
    2184:	dd000417 	ldw	r20,16(sp)
    2188:	dcc00317 	ldw	r19,12(sp)
    218c:	dc800217 	ldw	r18,8(sp)
    2190:	dc400117 	ldw	r17,4(sp)
    2194:	dc000017 	ldw	r16,0(sp)
    2198:	dec00604 	addi	sp,sp,24
    219c:	f800283a 	ret
    21a0:	0007883a 	mov	r3,zero
    21a4:	003ff506 	br	217c <__sfvwrite_small_dev+0x88>
    21a8:	00ffffc4 	movi	r3,-1
    21ac:	003ff306 	br	217c <__sfvwrite_small_dev+0x88>

000021b0 <_write_r>:
    21b0:	defffd04 	addi	sp,sp,-12
    21b4:	dc000015 	stw	r16,0(sp)
    21b8:	04000034 	movhi	r16,0
    21bc:	840b3a04 	addi	r16,r16,11496
    21c0:	dc400115 	stw	r17,4(sp)
    21c4:	80000015 	stw	zero,0(r16)
    21c8:	2023883a 	mov	r17,r4
    21cc:	2809883a 	mov	r4,r5
    21d0:	300b883a 	mov	r5,r6
    21d4:	380d883a 	mov	r6,r7
    21d8:	dfc00215 	stw	ra,8(sp)
    21dc:	00024ac0 	call	24ac <write>
    21e0:	1007883a 	mov	r3,r2
    21e4:	00bfffc4 	movi	r2,-1
    21e8:	18800626 	beq	r3,r2,2204 <_write_r+0x54>
    21ec:	1805883a 	mov	r2,r3
    21f0:	dfc00217 	ldw	ra,8(sp)
    21f4:	dc400117 	ldw	r17,4(sp)
    21f8:	dc000017 	ldw	r16,0(sp)
    21fc:	dec00304 	addi	sp,sp,12
    2200:	f800283a 	ret
    2204:	80800017 	ldw	r2,0(r16)
    2208:	103ff826 	beq	r2,zero,21ec <_write_r+0x3c>
    220c:	88800015 	stw	r2,0(r17)
    2210:	1805883a 	mov	r2,r3
    2214:	dfc00217 	ldw	ra,8(sp)
    2218:	dc400117 	ldw	r17,4(sp)
    221c:	dc000017 	ldw	r16,0(sp)
    2220:	dec00304 	addi	sp,sp,12
    2224:	f800283a 	ret

00002228 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2228:	2900051e 	bne	r5,r4,2240 <alt_load_section+0x18>
    222c:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    2230:	20800017 	ldw	r2,0(r4)
    2234:	21000104 	addi	r4,r4,4
    2238:	28800015 	stw	r2,0(r5)
    223c:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2240:	29bffb1e 	bne	r5,r6,2230 <alt_load_section+0x8>
    2244:	f800283a 	ret

00002248 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2248:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    224c:	01000034 	movhi	r4,0
    2250:	210af904 	addi	r4,r4,11236
    2254:	01400034 	movhi	r5,0
    2258:	294ab804 	addi	r5,r5,10976
    225c:	01800034 	movhi	r6,0
    2260:	318af904 	addi	r6,r6,11236
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2264:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2268:	00022280 	call	2228 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    226c:	01000034 	movhi	r4,0
    2270:	21000804 	addi	r4,r4,32
    2274:	01400034 	movhi	r5,0
    2278:	29400804 	addi	r5,r5,32
    227c:	01800034 	movhi	r6,0
    2280:	31800804 	addi	r6,r6,32
    2284:	00022280 	call	2228 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    2288:	01000034 	movhi	r4,0
    228c:	21099c04 	addi	r4,r4,9840
    2290:	01400034 	movhi	r5,0
    2294:	29499c04 	addi	r5,r5,9840
    2298:	01800034 	movhi	r6,0
    229c:	318ab804 	addi	r6,r6,10976
    22a0:	00022280 	call	2228 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    22a4:	00026600 	call	2660 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    22a8:	dfc00017 	ldw	ra,0(sp)
    22ac:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    22b0:	00026641 	jmpi	2664 <alt_icache_flush_all>

000022b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    22b4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    22b8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    22bc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    22c0:	00025280 	call	2528 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    22c4:	00025240 	call	2524 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    22c8:	d1204b17 	ldw	r4,-32468(gp)
    22cc:	d1604c17 	ldw	r5,-32464(gp)
    22d0:	d1a04d17 	ldw	r6,-32460(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    22d4:	dfc00017 	ldw	ra,0(sp)
    22d8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    22dc:	000005c1 	jmpi	5c <main>

000022e0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    22e0:	defff804 	addi	sp,sp,-32
    22e4:	dfc00415 	stw	ra,16(sp)
    22e8:	dc800315 	stw	r18,12(sp)
    22ec:	dc400215 	stw	r17,8(sp)
    22f0:	dc000115 	stw	r16,4(sp)
    22f4:	d9400515 	stw	r5,20(sp)
    22f8:	d9800615 	stw	r6,24(sp)
    22fc:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    2300:	d8800504 	addi	r2,sp,20
    2304:	2025883a 	mov	r18,r4
    2308:	d8800015 	stw	r2,0(sp)
    230c:	00003d06 	br	2404 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2310:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2314:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2318:	18800226 	beq	r3,r2,2324 <alt_printf+0x44>
        {
            alt_putchar(c);
    231c:	1809883a 	mov	r4,r3
    2320:	00000a06 	br	234c <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2324:	91000007 	ldb	r4,0(r18)
    2328:	94800044 	addi	r18,r18,1
    232c:	20003726 	beq	r4,zero,240c <alt_printf+0x12c>
            {
                if (c == '%')
    2330:	20c00626 	beq	r4,r3,234c <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2334:	008018c4 	movi	r2,99
    2338:	2080061e 	bne	r4,r2,2354 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
    233c:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
    2340:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2344:	10800104 	addi	r2,r2,4
    2348:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    234c:	00024240 	call	2424 <alt_putchar>
    2350:	00002c06 	br	2404 <alt_printf+0x124>
                }
                else if (c == 'x')
    2354:	00801e04 	movi	r2,120
    2358:	20801e1e 	bne	r4,r2,23d4 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    235c:	d8800017 	ldw	r2,0(sp)
    2360:	14400017 	ldw	r17,0(r2)
    2364:	10800104 	addi	r2,r2,4
    2368:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    236c:	88000226 	beq	r17,zero,2378 <alt_printf+0x98>
    2370:	04000704 	movi	r16,28
    2374:	00000306 	br	2384 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
    2378:	01000c04 	movi	r4,48
    237c:	003ff306 	br	234c <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    2380:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2384:	008003c4 	movi	r2,15
    2388:	1404983a 	sll	r2,r2,r16
    238c:	8884703a 	and	r2,r17,r2
    2390:	103ffb26 	beq	r2,zero,2380 <alt_printf+0xa0>
    2394:	00000b06 	br	23c4 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2398:	8884703a 	and	r2,r17,r2
    239c:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    23a0:	00800244 	movi	r2,9
                            c = '0' + digit;
    23a4:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
    23a8:	10c0012e 	bgeu	r2,r3,23b0 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
    23ac:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    23b0:	21003fcc 	andi	r4,r4,255
    23b4:	2100201c 	xori	r4,r4,128
    23b8:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    23bc:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
    23c0:	00024240 	call	2424 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    23c4:	008003c4 	movi	r2,15
    23c8:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    23cc:	803ff20e 	bge	r16,zero,2398 <alt_printf+0xb8>
    23d0:	00000c06 	br	2404 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    23d4:	00801cc4 	movi	r2,115
    23d8:	20800a1e 	bne	r4,r2,2404 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    23dc:	d8800017 	ldw	r2,0(sp)
    23e0:	14000017 	ldw	r16,0(r2)
    23e4:	10800104 	addi	r2,r2,4
    23e8:	d8800015 	stw	r2,0(sp)
    23ec:	00000106 	br	23f4 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
    23f0:	00024240 	call	2424 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    23f4:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
    23f8:	84000044 	addi	r16,r16,1
    23fc:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2400:	103ffb1e 	bne	r2,zero,23f0 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2404:	90c00007 	ldb	r3,0(r18)
    2408:	183fc11e 	bne	r3,zero,2310 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
    240c:	dfc00417 	ldw	ra,16(sp)
    2410:	dc800317 	ldw	r18,12(sp)
    2414:	dc400217 	ldw	r17,8(sp)
    2418:	dc000117 	ldw	r16,4(sp)
    241c:	dec00804 	addi	sp,sp,32
    2420:	f800283a 	ret

00002424 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2424:	defffd04 	addi	sp,sp,-12
    2428:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    242c:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2430:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2434:	01800044 	movi	r6,1
    2438:	01000034 	movhi	r4,0
    243c:	210af604 	addi	r4,r4,11224
    2440:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2444:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2448:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    244c:	00025480 	call	2548 <altera_avalon_jtag_uart_write>
    2450:	1009883a 	mov	r4,r2
    2454:	00bfffc4 	movi	r2,-1
    2458:	2080011e 	bne	r4,r2,2460 <alt_putchar+0x3c>
    245c:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    2460:	8005883a 	mov	r2,r16
    2464:	dfc00217 	ldw	ra,8(sp)
    2468:	dc000117 	ldw	r16,4(sp)
    246c:	dec00304 	addi	sp,sp,12
    2470:	f800283a 	ret

00002474 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2474:	defffe04 	addi	sp,sp,-8
    2478:	dc000015 	stw	r16,0(sp)
    247c:	dfc00115 	stw	ra,4(sp)
    2480:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2484:	00020d40 	call	20d4 <strlen>
    2488:	800b883a 	mov	r5,r16
    248c:	100d883a 	mov	r6,r2
    2490:	01000034 	movhi	r4,0
    2494:	210af604 	addi	r4,r4,11224
    2498:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	dc000017 	ldw	r16,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    24a8:	00025481 	jmpi	2548 <altera_avalon_jtag_uart_write>

000024ac <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    24ac:	deffff04 	addi	sp,sp,-4
    24b0:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    24b4:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    24b8:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    24bc:	000f883a 	mov	r7,zero
    24c0:	01000034 	movhi	r4,0
    24c4:	210af604 	addi	r4,r4,11224
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    24c8:	18800526 	beq	r3,r2,24e0 <write+0x34>
    24cc:	00800084 	movi	r2,2
    24d0:	1880061e 	bne	r3,r2,24ec <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    24d4:	01000034 	movhi	r4,0
    24d8:	210af604 	addi	r4,r4,11224
    24dc:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    24e0:	dfc00017 	ldw	ra,0(sp)
    24e4:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    24e8:	00025481 	jmpi	2548 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    24ec:	00800034 	movhi	r2,0
    24f0:	108af804 	addi	r2,r2,11232
    24f4:	10800017 	ldw	r2,0(r2)
    24f8:	00c00034 	movhi	r3,0
    24fc:	18cb3a04 	addi	r3,r3,11496
    2500:	10000226 	beq	r2,zero,250c <write+0x60>
    2504:	103ee83a 	callr	r2
    2508:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    250c:	00801444 	movi	r2,81
    2510:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
    2514:	00bfffc4 	movi	r2,-1
    2518:	dfc00017 	ldw	ra,0(sp)
    251c:	dec00104 	addi	sp,sp,4
    2520:	f800283a 	ret

00002524 <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
    2524:	f800283a 	ret

00002528 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2528:	deffff04 	addi	sp,sp,-4
    252c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    2530:	00026680 	call	2668 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2534:	00800044 	movi	r2,1
    2538:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    253c:	dfc00017 	ldw	ra,0(sp)
    2540:	dec00104 	addi	sp,sp,4
    2544:	f800283a 	ret

00002548 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2548:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    254c:	298f883a 	add	r7,r5,r6
    2550:	20c00104 	addi	r3,r4,4
    2554:	00000606 	br	2570 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2558:	18800037 	ldwio	r2,0(r3)
    255c:	10bfffec 	andhi	r2,r2,65535
    2560:	10000326 	beq	r2,zero,2570 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2564:	28800007 	ldb	r2,0(r5)
    2568:	29400044 	addi	r5,r5,1
    256c:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2570:	29fff936 	bltu	r5,r7,2558 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    2574:	3005883a 	mov	r2,r6
    2578:	f800283a 	ret

0000257c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    257c:	db000017 	ldw	r12,0(sp)
    2580:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    2584:	00c00044 	movi	r3,1
    2588:	194a983a 	sll	r5,r3,r5

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    258c:	dbc00217 	ldw	r15,8(sp)
  const alt_u8 * write_end = write_data + write_length;
    2590:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
    2594:	431b883a 	add	r13,r8,r12
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    2598:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    259c:	7880008c 	andi	r2,r15,2
    25a0:	1000021e 	bne	r2,zero,25ac <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    25a4:	00810004 	movi	r2,1024
    25a8:	20800335 	stwio	r2,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    25ac:	20800037 	ldwio	r2,0(r4)
    25b0:	180b883a 	mov	r5,r3
    25b4:	6013883a 	mov	r9,r12
    25b8:	22c00204 	addi	r11,r4,8
    25bc:	00000106 	br	25c4 <alt_avalon_spi_command+0x48>
    25c0:	000d883a 	mov	r6,zero
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    25c4:	5a800037 	ldwio	r10,0(r11)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    25c8:	5080100c 	andi	r2,r10,64
    25cc:	1007003a 	cmpeq	r3,r2,zero
    25d0:	1800011e 	bne	r3,zero,25d8 <alt_avalon_spi_command+0x5c>
    25d4:	2800031e 	bne	r5,zero,25e4 <alt_avalon_spi_command+0x68>
    25d8:	5080200c 	andi	r2,r10,128
    25dc:	103ff926 	beq	r2,zero,25c4 <alt_avalon_spi_command+0x48>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    25e0:	18000e1e 	bne	r3,zero,261c <alt_avalon_spi_command+0xa0>
    25e4:	01400b0e 	bge	zero,r5,2614 <alt_avalon_spi_command+0x98>
    {
      credits--;
    25e8:	297fffc4 	addi	r5,r5,-1

      if (write_data < write_end)
    25ec:	3b80042e 	bgeu	r7,r14,2600 <alt_avalon_spi_command+0x84>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    25f0:	38800003 	ldbu	r2,0(r7)
    25f4:	39c00044 	addi	r7,r7,1
    25f8:	20800135 	stwio	r2,4(r4)
    25fc:	00000506 	br	2614 <alt_avalon_spi_command+0x98>
      else if (write_zeros > 0)
    2600:	4800021e 	bne	r9,zero,260c <alt_avalon_spi_command+0x90>
    2604:	017f0004 	movi	r5,-1024
    2608:	00000206 	br	2614 <alt_avalon_spi_command+0x98>
      {
        write_zeros--;
    260c:	4a7fffc4 	addi	r9,r9,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    2610:	20000135 	stwio	zero,4(r4)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    2614:	5080200c 	andi	r2,r10,128
    2618:	103fea26 	beq	r2,zero,25c4 <alt_avalon_spi_command+0x48>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    261c:	20800037 	ldwio	r2,0(r4)
    2620:	29400044 	addi	r5,r5,1

      if (read_ignore > 0)
    2624:	30000326 	beq	r6,zero,2634 <alt_avalon_spi_command+0xb8>
        read_ignore--;
    2628:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;

      if (read_ignore == 0 && read_data == read_end)
    262c:	30000326 	beq	r6,zero,263c <alt_avalon_spi_command+0xc0>
    2630:	003fe406 	br	25c4 <alt_avalon_spi_command+0x48>
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
    2634:	40800005 	stb	r2,0(r8)
    2638:	42000044 	addi	r8,r8,1
      credits++;

      if (read_ignore == 0 && read_data == read_end)
    263c:	437fe01e 	bne	r8,r13,25c0 <alt_avalon_spi_command+0x44>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    2640:	58800037 	ldwio	r2,0(r11)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    2644:	1080080c 	andi	r2,r2,32
    2648:	103ffd26 	beq	r2,zero,2640 <alt_avalon_spi_command+0xc4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    264c:	7880004c 	andi	r2,r15,1
    2650:	1000011e 	bne	r2,zero,2658 <alt_avalon_spi_command+0xdc>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    2654:	20000335 	stwio	zero,12(r4)

  return read_length;
}
    2658:	6005883a 	mov	r2,r12
    265c:	f800283a 	ret

00002660 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2660:	f800283a 	ret

00002664 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2664:	f800283a 	ret

00002668 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2668:	000170fa 	wrctl	ienable,zero
}
    266c:	f800283a 	ret
